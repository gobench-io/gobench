// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: pb/agent.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Agent_FindCreateGroup_FullMethodName  = "/pb.Agent/FindCreateGroup"
	Agent_FindCreateGraph_FullMethodName  = "/pb.Agent/FindCreateGraph"
	Agent_FindCreateMetric_FullMethodName = "/pb.Agent/FindCreateMetric"
	Agent_Histogram_FullMethodName        = "/pb.Agent/Histogram"
	Agent_Counter_FullMethodName          = "/pb.Agent/Counter"
	Agent_Gauge_FullMethodName            = "/pb.Agent/Gauge"
)

// AgentClient is the client API for Agent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentClient interface {
	FindCreateGroup(ctx context.Context, in *FCGroupReq, opts ...grpc.CallOption) (*FCGroupRes, error)
	FindCreateGraph(ctx context.Context, in *FCGraphReq, opts ...grpc.CallOption) (*FCGraphRes, error)
	FindCreateMetric(ctx context.Context, in *FCMetricReq, opts ...grpc.CallOption) (*FCMetricRes, error)
	Histogram(ctx context.Context, in *HistogramReq, opts ...grpc.CallOption) (*HistogramRes, error)
	Counter(ctx context.Context, in *CounterReq, opts ...grpc.CallOption) (*CounterRes, error)
	Gauge(ctx context.Context, in *GaugeReq, opts ...grpc.CallOption) (*GaugeRes, error)
}

type agentClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentClient(cc grpc.ClientConnInterface) AgentClient {
	return &agentClient{cc}
}

func (c *agentClient) FindCreateGroup(ctx context.Context, in *FCGroupReq, opts ...grpc.CallOption) (*FCGroupRes, error) {
	out := new(FCGroupRes)
	err := c.cc.Invoke(ctx, Agent_FindCreateGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) FindCreateGraph(ctx context.Context, in *FCGraphReq, opts ...grpc.CallOption) (*FCGraphRes, error) {
	out := new(FCGraphRes)
	err := c.cc.Invoke(ctx, Agent_FindCreateGraph_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) FindCreateMetric(ctx context.Context, in *FCMetricReq, opts ...grpc.CallOption) (*FCMetricRes, error) {
	out := new(FCMetricRes)
	err := c.cc.Invoke(ctx, Agent_FindCreateMetric_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) Histogram(ctx context.Context, in *HistogramReq, opts ...grpc.CallOption) (*HistogramRes, error) {
	out := new(HistogramRes)
	err := c.cc.Invoke(ctx, Agent_Histogram_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) Counter(ctx context.Context, in *CounterReq, opts ...grpc.CallOption) (*CounterRes, error) {
	out := new(CounterRes)
	err := c.cc.Invoke(ctx, Agent_Counter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) Gauge(ctx context.Context, in *GaugeReq, opts ...grpc.CallOption) (*GaugeRes, error) {
	out := new(GaugeRes)
	err := c.cc.Invoke(ctx, Agent_Gauge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentServer is the server API for Agent service.
// All implementations should embed UnimplementedAgentServer
// for forward compatibility
type AgentServer interface {
	FindCreateGroup(context.Context, *FCGroupReq) (*FCGroupRes, error)
	FindCreateGraph(context.Context, *FCGraphReq) (*FCGraphRes, error)
	FindCreateMetric(context.Context, *FCMetricReq) (*FCMetricRes, error)
	Histogram(context.Context, *HistogramReq) (*HistogramRes, error)
	Counter(context.Context, *CounterReq) (*CounterRes, error)
	Gauge(context.Context, *GaugeReq) (*GaugeRes, error)
}

// UnimplementedAgentServer should be embedded to have forward compatible implementations.
type UnimplementedAgentServer struct {
}

func (UnimplementedAgentServer) FindCreateGroup(context.Context, *FCGroupReq) (*FCGroupRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCreateGroup not implemented")
}
func (UnimplementedAgentServer) FindCreateGraph(context.Context, *FCGraphReq) (*FCGraphRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCreateGraph not implemented")
}
func (UnimplementedAgentServer) FindCreateMetric(context.Context, *FCMetricReq) (*FCMetricRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCreateMetric not implemented")
}
func (UnimplementedAgentServer) Histogram(context.Context, *HistogramReq) (*HistogramRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Histogram not implemented")
}
func (UnimplementedAgentServer) Counter(context.Context, *CounterReq) (*CounterRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Counter not implemented")
}
func (UnimplementedAgentServer) Gauge(context.Context, *GaugeReq) (*GaugeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Gauge not implemented")
}

// UnsafeAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentServer will
// result in compilation errors.
type UnsafeAgentServer interface {
	mustEmbedUnimplementedAgentServer()
}

func RegisterAgentServer(s grpc.ServiceRegistrar, srv AgentServer) {
	s.RegisterService(&Agent_ServiceDesc, srv)
}

func _Agent_FindCreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FCGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).FindCreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_FindCreateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).FindCreateGroup(ctx, req.(*FCGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_FindCreateGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FCGraphReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).FindCreateGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_FindCreateGraph_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).FindCreateGraph(ctx, req.(*FCGraphReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_FindCreateMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FCMetricReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).FindCreateMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_FindCreateMetric_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).FindCreateMetric(ctx, req.(*FCMetricReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_Histogram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistogramReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).Histogram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_Histogram_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).Histogram(ctx, req.(*HistogramReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_Counter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CounterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).Counter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_Counter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).Counter(ctx, req.(*CounterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_Gauge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GaugeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).Gauge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_Gauge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).Gauge(ctx, req.(*GaugeReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Agent_ServiceDesc is the grpc.ServiceDesc for Agent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Agent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Agent",
	HandlerType: (*AgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindCreateGroup",
			Handler:    _Agent_FindCreateGroup_Handler,
		},
		{
			MethodName: "FindCreateGraph",
			Handler:    _Agent_FindCreateGraph_Handler,
		},
		{
			MethodName: "FindCreateMetric",
			Handler:    _Agent_FindCreateMetric_Handler,
		},
		{
			MethodName: "Histogram",
			Handler:    _Agent_Histogram_Handler,
		},
		{
			MethodName: "Counter",
			Handler:    _Agent_Counter_Handler,
		},
		{
			MethodName: "Gauge",
			Handler:    _Agent_Gauge_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/agent.proto",
}
