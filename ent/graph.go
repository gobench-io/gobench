// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/gobench-io/gobench/v2/ent/graph"
	"github.com/gobench-io/gobench/v2/ent/group"
)

// Graph is the model entity for the Graph schema.
type Graph struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title"`
	// Unit holds the value of the "unit" field.
	Unit string `json:"unit"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GraphQuery when eager-loading is set.
	Edges        GraphEdges `json:"edges"`
	group_graphs *int
	selectValues sql.SelectValues
}

// GraphEdges holds the relations/edges for other nodes in the graph.
type GraphEdges struct {
	// Group holds the value of the group edge.
	Group *Group `json:"group,omitempty"`
	// Metrics holds the value of the metrics edge.
	Metrics []*Metric `json:"metrics,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// GroupOrErr returns the Group value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GraphEdges) GroupOrErr() (*Group, error) {
	if e.loadedTypes[0] {
		if e.Group == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: group.Label}
		}
		return e.Group, nil
	}
	return nil, &NotLoadedError{edge: "group"}
}

// MetricsOrErr returns the Metrics value or an error if the edge
// was not loaded in eager-loading.
func (e GraphEdges) MetricsOrErr() ([]*Metric, error) {
	if e.loadedTypes[1] {
		return e.Metrics, nil
	}
	return nil, &NotLoadedError{edge: "metrics"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Graph) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case graph.FieldID:
			values[i] = new(sql.NullInt64)
		case graph.FieldTitle, graph.FieldUnit:
			values[i] = new(sql.NullString)
		case graph.ForeignKeys[0]: // group_graphs
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Graph fields.
func (gr *Graph) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case graph.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gr.ID = int(value.Int64)
		case graph.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				gr.Title = value.String
			}
		case graph.FieldUnit:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field unit", values[i])
			} else if value.Valid {
				gr.Unit = value.String
			}
		case graph.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field group_graphs", value)
			} else if value.Valid {
				gr.group_graphs = new(int)
				*gr.group_graphs = int(value.Int64)
			}
		default:
			gr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Graph.
// This includes values selected through modifiers, order, etc.
func (gr *Graph) Value(name string) (ent.Value, error) {
	return gr.selectValues.Get(name)
}

// QueryGroup queries the "group" edge of the Graph entity.
func (gr *Graph) QueryGroup() *GroupQuery {
	return NewGraphClient(gr.config).QueryGroup(gr)
}

// QueryMetrics queries the "metrics" edge of the Graph entity.
func (gr *Graph) QueryMetrics() *MetricQuery {
	return NewGraphClient(gr.config).QueryMetrics(gr)
}

// Update returns a builder for updating this Graph.
// Note that you need to call Graph.Unwrap() before calling this method if this Graph
// was returned from a transaction, and the transaction was committed or rolled back.
func (gr *Graph) Update() *GraphUpdateOne {
	return NewGraphClient(gr.config).UpdateOne(gr)
}

// Unwrap unwraps the Graph entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gr *Graph) Unwrap() *Graph {
	_tx, ok := gr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Graph is not a transactional entity")
	}
	gr.config.driver = _tx.drv
	return gr
}

// String implements the fmt.Stringer.
func (gr *Graph) String() string {
	var builder strings.Builder
	builder.WriteString("Graph(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gr.ID))
	builder.WriteString("title=")
	builder.WriteString(gr.Title)
	builder.WriteString(", ")
	builder.WriteString("unit=")
	builder.WriteString(gr.Unit)
	builder.WriteByte(')')
	return builder.String()
}

// Graphs is a parsable slice of Graph.
type Graphs []*Graph
