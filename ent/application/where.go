// Code generated by ent, DO NOT EDIT.

package application

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/gobench-io/gobench/v2/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Application {
	return predicate.Application(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Application {
	return predicate.Application(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Application {
	return predicate.Application(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Application {
	return predicate.Application(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Application {
	return predicate.Application(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Application {
	return predicate.Application(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Application {
	return predicate.Application(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldName, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldStatus, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldCreatedAt, v))
}

// StartedAt applies equality check predicate on the "started_at" field. It's identical to StartedAtEQ.
func StartedAt(v time.Time) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldStartedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldUpdatedAt, v))
}

// Scenario applies equality check predicate on the "scenario" field. It's identical to ScenarioEQ.
func Scenario(v string) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldScenario, v))
}

// Gomod applies equality check predicate on the "gomod" field. It's identical to GomodEQ.
func Gomod(v string) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldGomod, v))
}

// Gosum applies equality check predicate on the "gosum" field. It's identical to GosumEQ.
func Gosum(v string) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldGosum, v))
}

// Vu applies equality check predicate on the "vu" field. It's identical to VuEQ.
func Vu(v int) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldVu, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Application {
	return predicate.Application(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Application {
	return predicate.Application(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Application {
	return predicate.Application(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Application {
	return predicate.Application(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Application {
	return predicate.Application(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Application {
	return predicate.Application(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Application {
	return predicate.Application(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Application {
	return predicate.Application(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Application {
	return predicate.Application(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Application {
	return predicate.Application(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Application {
	return predicate.Application(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Application {
	return predicate.Application(sql.FieldContainsFold(FieldName, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Application {
	return predicate.Application(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Application {
	return predicate.Application(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Application {
	return predicate.Application(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Application {
	return predicate.Application(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Application {
	return predicate.Application(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Application {
	return predicate.Application(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Application {
	return predicate.Application(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Application {
	return predicate.Application(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Application {
	return predicate.Application(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Application {
	return predicate.Application(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Application {
	return predicate.Application(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Application {
	return predicate.Application(sql.FieldContainsFold(FieldStatus, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Application {
	return predicate.Application(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Application {
	return predicate.Application(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Application {
	return predicate.Application(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Application {
	return predicate.Application(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Application {
	return predicate.Application(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Application {
	return predicate.Application(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Application {
	return predicate.Application(sql.FieldLTE(FieldCreatedAt, v))
}

// StartedAtEQ applies the EQ predicate on the "started_at" field.
func StartedAtEQ(v time.Time) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldStartedAt, v))
}

// StartedAtNEQ applies the NEQ predicate on the "started_at" field.
func StartedAtNEQ(v time.Time) predicate.Application {
	return predicate.Application(sql.FieldNEQ(FieldStartedAt, v))
}

// StartedAtIn applies the In predicate on the "started_at" field.
func StartedAtIn(vs ...time.Time) predicate.Application {
	return predicate.Application(sql.FieldIn(FieldStartedAt, vs...))
}

// StartedAtNotIn applies the NotIn predicate on the "started_at" field.
func StartedAtNotIn(vs ...time.Time) predicate.Application {
	return predicate.Application(sql.FieldNotIn(FieldStartedAt, vs...))
}

// StartedAtGT applies the GT predicate on the "started_at" field.
func StartedAtGT(v time.Time) predicate.Application {
	return predicate.Application(sql.FieldGT(FieldStartedAt, v))
}

// StartedAtGTE applies the GTE predicate on the "started_at" field.
func StartedAtGTE(v time.Time) predicate.Application {
	return predicate.Application(sql.FieldGTE(FieldStartedAt, v))
}

// StartedAtLT applies the LT predicate on the "started_at" field.
func StartedAtLT(v time.Time) predicate.Application {
	return predicate.Application(sql.FieldLT(FieldStartedAt, v))
}

// StartedAtLTE applies the LTE predicate on the "started_at" field.
func StartedAtLTE(v time.Time) predicate.Application {
	return predicate.Application(sql.FieldLTE(FieldStartedAt, v))
}

// StartedAtIsNil applies the IsNil predicate on the "started_at" field.
func StartedAtIsNil() predicate.Application {
	return predicate.Application(sql.FieldIsNull(FieldStartedAt))
}

// StartedAtNotNil applies the NotNil predicate on the "started_at" field.
func StartedAtNotNil() predicate.Application {
	return predicate.Application(sql.FieldNotNull(FieldStartedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Application {
	return predicate.Application(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Application {
	return predicate.Application(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Application {
	return predicate.Application(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Application {
	return predicate.Application(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Application {
	return predicate.Application(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Application {
	return predicate.Application(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Application {
	return predicate.Application(sql.FieldLTE(FieldUpdatedAt, v))
}

// ScenarioEQ applies the EQ predicate on the "scenario" field.
func ScenarioEQ(v string) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldScenario, v))
}

// ScenarioNEQ applies the NEQ predicate on the "scenario" field.
func ScenarioNEQ(v string) predicate.Application {
	return predicate.Application(sql.FieldNEQ(FieldScenario, v))
}

// ScenarioIn applies the In predicate on the "scenario" field.
func ScenarioIn(vs ...string) predicate.Application {
	return predicate.Application(sql.FieldIn(FieldScenario, vs...))
}

// ScenarioNotIn applies the NotIn predicate on the "scenario" field.
func ScenarioNotIn(vs ...string) predicate.Application {
	return predicate.Application(sql.FieldNotIn(FieldScenario, vs...))
}

// ScenarioGT applies the GT predicate on the "scenario" field.
func ScenarioGT(v string) predicate.Application {
	return predicate.Application(sql.FieldGT(FieldScenario, v))
}

// ScenarioGTE applies the GTE predicate on the "scenario" field.
func ScenarioGTE(v string) predicate.Application {
	return predicate.Application(sql.FieldGTE(FieldScenario, v))
}

// ScenarioLT applies the LT predicate on the "scenario" field.
func ScenarioLT(v string) predicate.Application {
	return predicate.Application(sql.FieldLT(FieldScenario, v))
}

// ScenarioLTE applies the LTE predicate on the "scenario" field.
func ScenarioLTE(v string) predicate.Application {
	return predicate.Application(sql.FieldLTE(FieldScenario, v))
}

// ScenarioContains applies the Contains predicate on the "scenario" field.
func ScenarioContains(v string) predicate.Application {
	return predicate.Application(sql.FieldContains(FieldScenario, v))
}

// ScenarioHasPrefix applies the HasPrefix predicate on the "scenario" field.
func ScenarioHasPrefix(v string) predicate.Application {
	return predicate.Application(sql.FieldHasPrefix(FieldScenario, v))
}

// ScenarioHasSuffix applies the HasSuffix predicate on the "scenario" field.
func ScenarioHasSuffix(v string) predicate.Application {
	return predicate.Application(sql.FieldHasSuffix(FieldScenario, v))
}

// ScenarioEqualFold applies the EqualFold predicate on the "scenario" field.
func ScenarioEqualFold(v string) predicate.Application {
	return predicate.Application(sql.FieldEqualFold(FieldScenario, v))
}

// ScenarioContainsFold applies the ContainsFold predicate on the "scenario" field.
func ScenarioContainsFold(v string) predicate.Application {
	return predicate.Application(sql.FieldContainsFold(FieldScenario, v))
}

// GomodEQ applies the EQ predicate on the "gomod" field.
func GomodEQ(v string) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldGomod, v))
}

// GomodNEQ applies the NEQ predicate on the "gomod" field.
func GomodNEQ(v string) predicate.Application {
	return predicate.Application(sql.FieldNEQ(FieldGomod, v))
}

// GomodIn applies the In predicate on the "gomod" field.
func GomodIn(vs ...string) predicate.Application {
	return predicate.Application(sql.FieldIn(FieldGomod, vs...))
}

// GomodNotIn applies the NotIn predicate on the "gomod" field.
func GomodNotIn(vs ...string) predicate.Application {
	return predicate.Application(sql.FieldNotIn(FieldGomod, vs...))
}

// GomodGT applies the GT predicate on the "gomod" field.
func GomodGT(v string) predicate.Application {
	return predicate.Application(sql.FieldGT(FieldGomod, v))
}

// GomodGTE applies the GTE predicate on the "gomod" field.
func GomodGTE(v string) predicate.Application {
	return predicate.Application(sql.FieldGTE(FieldGomod, v))
}

// GomodLT applies the LT predicate on the "gomod" field.
func GomodLT(v string) predicate.Application {
	return predicate.Application(sql.FieldLT(FieldGomod, v))
}

// GomodLTE applies the LTE predicate on the "gomod" field.
func GomodLTE(v string) predicate.Application {
	return predicate.Application(sql.FieldLTE(FieldGomod, v))
}

// GomodContains applies the Contains predicate on the "gomod" field.
func GomodContains(v string) predicate.Application {
	return predicate.Application(sql.FieldContains(FieldGomod, v))
}

// GomodHasPrefix applies the HasPrefix predicate on the "gomod" field.
func GomodHasPrefix(v string) predicate.Application {
	return predicate.Application(sql.FieldHasPrefix(FieldGomod, v))
}

// GomodHasSuffix applies the HasSuffix predicate on the "gomod" field.
func GomodHasSuffix(v string) predicate.Application {
	return predicate.Application(sql.FieldHasSuffix(FieldGomod, v))
}

// GomodEqualFold applies the EqualFold predicate on the "gomod" field.
func GomodEqualFold(v string) predicate.Application {
	return predicate.Application(sql.FieldEqualFold(FieldGomod, v))
}

// GomodContainsFold applies the ContainsFold predicate on the "gomod" field.
func GomodContainsFold(v string) predicate.Application {
	return predicate.Application(sql.FieldContainsFold(FieldGomod, v))
}

// GosumEQ applies the EQ predicate on the "gosum" field.
func GosumEQ(v string) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldGosum, v))
}

// GosumNEQ applies the NEQ predicate on the "gosum" field.
func GosumNEQ(v string) predicate.Application {
	return predicate.Application(sql.FieldNEQ(FieldGosum, v))
}

// GosumIn applies the In predicate on the "gosum" field.
func GosumIn(vs ...string) predicate.Application {
	return predicate.Application(sql.FieldIn(FieldGosum, vs...))
}

// GosumNotIn applies the NotIn predicate on the "gosum" field.
func GosumNotIn(vs ...string) predicate.Application {
	return predicate.Application(sql.FieldNotIn(FieldGosum, vs...))
}

// GosumGT applies the GT predicate on the "gosum" field.
func GosumGT(v string) predicate.Application {
	return predicate.Application(sql.FieldGT(FieldGosum, v))
}

// GosumGTE applies the GTE predicate on the "gosum" field.
func GosumGTE(v string) predicate.Application {
	return predicate.Application(sql.FieldGTE(FieldGosum, v))
}

// GosumLT applies the LT predicate on the "gosum" field.
func GosumLT(v string) predicate.Application {
	return predicate.Application(sql.FieldLT(FieldGosum, v))
}

// GosumLTE applies the LTE predicate on the "gosum" field.
func GosumLTE(v string) predicate.Application {
	return predicate.Application(sql.FieldLTE(FieldGosum, v))
}

// GosumContains applies the Contains predicate on the "gosum" field.
func GosumContains(v string) predicate.Application {
	return predicate.Application(sql.FieldContains(FieldGosum, v))
}

// GosumHasPrefix applies the HasPrefix predicate on the "gosum" field.
func GosumHasPrefix(v string) predicate.Application {
	return predicate.Application(sql.FieldHasPrefix(FieldGosum, v))
}

// GosumHasSuffix applies the HasSuffix predicate on the "gosum" field.
func GosumHasSuffix(v string) predicate.Application {
	return predicate.Application(sql.FieldHasSuffix(FieldGosum, v))
}

// GosumEqualFold applies the EqualFold predicate on the "gosum" field.
func GosumEqualFold(v string) predicate.Application {
	return predicate.Application(sql.FieldEqualFold(FieldGosum, v))
}

// GosumContainsFold applies the ContainsFold predicate on the "gosum" field.
func GosumContainsFold(v string) predicate.Application {
	return predicate.Application(sql.FieldContainsFold(FieldGosum, v))
}

// VuEQ applies the EQ predicate on the "vu" field.
func VuEQ(v int) predicate.Application {
	return predicate.Application(sql.FieldEQ(FieldVu, v))
}

// VuNEQ applies the NEQ predicate on the "vu" field.
func VuNEQ(v int) predicate.Application {
	return predicate.Application(sql.FieldNEQ(FieldVu, v))
}

// VuIn applies the In predicate on the "vu" field.
func VuIn(vs ...int) predicate.Application {
	return predicate.Application(sql.FieldIn(FieldVu, vs...))
}

// VuNotIn applies the NotIn predicate on the "vu" field.
func VuNotIn(vs ...int) predicate.Application {
	return predicate.Application(sql.FieldNotIn(FieldVu, vs...))
}

// VuGT applies the GT predicate on the "vu" field.
func VuGT(v int) predicate.Application {
	return predicate.Application(sql.FieldGT(FieldVu, v))
}

// VuGTE applies the GTE predicate on the "vu" field.
func VuGTE(v int) predicate.Application {
	return predicate.Application(sql.FieldGTE(FieldVu, v))
}

// VuLT applies the LT predicate on the "vu" field.
func VuLT(v int) predicate.Application {
	return predicate.Application(sql.FieldLT(FieldVu, v))
}

// VuLTE applies the LTE predicate on the "vu" field.
func VuLTE(v int) predicate.Application {
	return predicate.Application(sql.FieldLTE(FieldVu, v))
}

// HasGroups applies the HasEdge predicate on the "groups" edge.
func HasGroups() predicate.Application {
	return predicate.Application(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, GroupsTable, GroupsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGroupsWith applies the HasEdge predicate on the "groups" edge with a given conditions (other predicates).
func HasGroupsWith(preds ...predicate.Group) predicate.Application {
	return predicate.Application(func(s *sql.Selector) {
		step := newGroupsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTags applies the HasEdge predicate on the "tags" edge.
func HasTags() predicate.Application {
	return predicate.Application(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TagsTable, TagsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTagsWith applies the HasEdge predicate on the "tags" edge with a given conditions (other predicates).
func HasTagsWith(preds ...predicate.Tag) predicate.Application {
	return predicate.Application(func(s *sql.Selector) {
		step := newTagsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Application) predicate.Application {
	return predicate.Application(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Application) predicate.Application {
	return predicate.Application(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Application) predicate.Application {
	return predicate.Application(func(s *sql.Selector) {
		p(s.Not())
	})
}
