// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/gobench-io/gobench/v2/ent/graph"
	"github.com/gobench-io/gobench/v2/ent/metric"
)

// Metric is the model entity for the Metric schema.
type Metric struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title"`
	// Type holds the value of the "type" field.
	Type string `json:"type"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MetricQuery when eager-loading is set.
	Edges         MetricEdges `json:"edges"`
	graph_metrics *int
	selectValues  sql.SelectValues
}

// MetricEdges holds the relations/edges for other nodes in the graph.
type MetricEdges struct {
	// Graph holds the value of the graph edge.
	Graph *Graph `json:"graph,omitempty"`
	// Histograms holds the value of the histograms edge.
	Histograms []*Histogram `json:"histograms,omitempty"`
	// Counters holds the value of the counters edge.
	Counters []*Counter `json:"counters,omitempty"`
	// Gauges holds the value of the gauges edge.
	Gauges []*Gauge `json:"gauges,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// GraphOrErr returns the Graph value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MetricEdges) GraphOrErr() (*Graph, error) {
	if e.loadedTypes[0] {
		if e.Graph == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: graph.Label}
		}
		return e.Graph, nil
	}
	return nil, &NotLoadedError{edge: "graph"}
}

// HistogramsOrErr returns the Histograms value or an error if the edge
// was not loaded in eager-loading.
func (e MetricEdges) HistogramsOrErr() ([]*Histogram, error) {
	if e.loadedTypes[1] {
		return e.Histograms, nil
	}
	return nil, &NotLoadedError{edge: "histograms"}
}

// CountersOrErr returns the Counters value or an error if the edge
// was not loaded in eager-loading.
func (e MetricEdges) CountersOrErr() ([]*Counter, error) {
	if e.loadedTypes[2] {
		return e.Counters, nil
	}
	return nil, &NotLoadedError{edge: "counters"}
}

// GaugesOrErr returns the Gauges value or an error if the edge
// was not loaded in eager-loading.
func (e MetricEdges) GaugesOrErr() ([]*Gauge, error) {
	if e.loadedTypes[3] {
		return e.Gauges, nil
	}
	return nil, &NotLoadedError{edge: "gauges"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Metric) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case metric.FieldID:
			values[i] = new(sql.NullInt64)
		case metric.FieldTitle, metric.FieldType:
			values[i] = new(sql.NullString)
		case metric.ForeignKeys[0]: // graph_metrics
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Metric fields.
func (m *Metric) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case metric.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case metric.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				m.Title = value.String
			}
		case metric.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				m.Type = value.String
			}
		case metric.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field graph_metrics", value)
			} else if value.Valid {
				m.graph_metrics = new(int)
				*m.graph_metrics = int(value.Int64)
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Metric.
// This includes values selected through modifiers, order, etc.
func (m *Metric) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// QueryGraph queries the "graph" edge of the Metric entity.
func (m *Metric) QueryGraph() *GraphQuery {
	return NewMetricClient(m.config).QueryGraph(m)
}

// QueryHistograms queries the "histograms" edge of the Metric entity.
func (m *Metric) QueryHistograms() *HistogramQuery {
	return NewMetricClient(m.config).QueryHistograms(m)
}

// QueryCounters queries the "counters" edge of the Metric entity.
func (m *Metric) QueryCounters() *CounterQuery {
	return NewMetricClient(m.config).QueryCounters(m)
}

// QueryGauges queries the "gauges" edge of the Metric entity.
func (m *Metric) QueryGauges() *GaugeQuery {
	return NewMetricClient(m.config).QueryGauges(m)
}

// Update returns a builder for updating this Metric.
// Note that you need to call Metric.Unwrap() before calling this method if this Metric
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Metric) Update() *MetricUpdateOne {
	return NewMetricClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Metric entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Metric) Unwrap() *Metric {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Metric is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Metric) String() string {
	var builder strings.Builder
	builder.WriteString("Metric(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("title=")
	builder.WriteString(m.Title)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(m.Type)
	builder.WriteByte(')')
	return builder.String()
}

// Metrics is a parsable slice of Metric.
type Metrics []*Metric
