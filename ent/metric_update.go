// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gobench-io/gobench/v2/ent/counter"
	"github.com/gobench-io/gobench/v2/ent/gauge"
	"github.com/gobench-io/gobench/v2/ent/graph"
	"github.com/gobench-io/gobench/v2/ent/histogram"
	"github.com/gobench-io/gobench/v2/ent/metric"
	"github.com/gobench-io/gobench/v2/ent/predicate"
)

// MetricUpdate is the builder for updating Metric entities.
type MetricUpdate struct {
	config
	hooks    []Hook
	mutation *MetricMutation
}

// Where appends a list predicates to the MetricUpdate builder.
func (mu *MetricUpdate) Where(ps ...predicate.Metric) *MetricUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetType sets the "type" field.
func (mu *MetricUpdate) SetType(s string) *MetricUpdate {
	mu.mutation.SetType(s)
	return mu
}

// SetGraphID sets the "graph" edge to the Graph entity by ID.
func (mu *MetricUpdate) SetGraphID(id int) *MetricUpdate {
	mu.mutation.SetGraphID(id)
	return mu
}

// SetNillableGraphID sets the "graph" edge to the Graph entity by ID if the given value is not nil.
func (mu *MetricUpdate) SetNillableGraphID(id *int) *MetricUpdate {
	if id != nil {
		mu = mu.SetGraphID(*id)
	}
	return mu
}

// SetGraph sets the "graph" edge to the Graph entity.
func (mu *MetricUpdate) SetGraph(g *Graph) *MetricUpdate {
	return mu.SetGraphID(g.ID)
}

// AddHistogramIDs adds the "histograms" edge to the Histogram entity by IDs.
func (mu *MetricUpdate) AddHistogramIDs(ids ...int) *MetricUpdate {
	mu.mutation.AddHistogramIDs(ids...)
	return mu
}

// AddHistograms adds the "histograms" edges to the Histogram entity.
func (mu *MetricUpdate) AddHistograms(h ...*Histogram) *MetricUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return mu.AddHistogramIDs(ids...)
}

// AddCounterIDs adds the "counters" edge to the Counter entity by IDs.
func (mu *MetricUpdate) AddCounterIDs(ids ...int) *MetricUpdate {
	mu.mutation.AddCounterIDs(ids...)
	return mu
}

// AddCounters adds the "counters" edges to the Counter entity.
func (mu *MetricUpdate) AddCounters(c ...*Counter) *MetricUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return mu.AddCounterIDs(ids...)
}

// AddGaugeIDs adds the "gauges" edge to the Gauge entity by IDs.
func (mu *MetricUpdate) AddGaugeIDs(ids ...int) *MetricUpdate {
	mu.mutation.AddGaugeIDs(ids...)
	return mu
}

// AddGauges adds the "gauges" edges to the Gauge entity.
func (mu *MetricUpdate) AddGauges(g ...*Gauge) *MetricUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return mu.AddGaugeIDs(ids...)
}

// Mutation returns the MetricMutation object of the builder.
func (mu *MetricUpdate) Mutation() *MetricMutation {
	return mu.mutation
}

// ClearGraph clears the "graph" edge to the Graph entity.
func (mu *MetricUpdate) ClearGraph() *MetricUpdate {
	mu.mutation.ClearGraph()
	return mu
}

// ClearHistograms clears all "histograms" edges to the Histogram entity.
func (mu *MetricUpdate) ClearHistograms() *MetricUpdate {
	mu.mutation.ClearHistograms()
	return mu
}

// RemoveHistogramIDs removes the "histograms" edge to Histogram entities by IDs.
func (mu *MetricUpdate) RemoveHistogramIDs(ids ...int) *MetricUpdate {
	mu.mutation.RemoveHistogramIDs(ids...)
	return mu
}

// RemoveHistograms removes "histograms" edges to Histogram entities.
func (mu *MetricUpdate) RemoveHistograms(h ...*Histogram) *MetricUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return mu.RemoveHistogramIDs(ids...)
}

// ClearCounters clears all "counters" edges to the Counter entity.
func (mu *MetricUpdate) ClearCounters() *MetricUpdate {
	mu.mutation.ClearCounters()
	return mu
}

// RemoveCounterIDs removes the "counters" edge to Counter entities by IDs.
func (mu *MetricUpdate) RemoveCounterIDs(ids ...int) *MetricUpdate {
	mu.mutation.RemoveCounterIDs(ids...)
	return mu
}

// RemoveCounters removes "counters" edges to Counter entities.
func (mu *MetricUpdate) RemoveCounters(c ...*Counter) *MetricUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return mu.RemoveCounterIDs(ids...)
}

// ClearGauges clears all "gauges" edges to the Gauge entity.
func (mu *MetricUpdate) ClearGauges() *MetricUpdate {
	mu.mutation.ClearGauges()
	return mu
}

// RemoveGaugeIDs removes the "gauges" edge to Gauge entities by IDs.
func (mu *MetricUpdate) RemoveGaugeIDs(ids ...int) *MetricUpdate {
	mu.mutation.RemoveGaugeIDs(ids...)
	return mu
}

// RemoveGauges removes "gauges" edges to Gauge entities.
func (mu *MetricUpdate) RemoveGauges(g ...*Gauge) *MetricUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return mu.RemoveGaugeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MetricUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MetricUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MetricUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MetricUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mu *MetricUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(metric.Table, metric.Columns, sqlgraph.NewFieldSpec(metric.FieldID, field.TypeInt))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.GetType(); ok {
		_spec.SetField(metric.FieldType, field.TypeString, value)
	}
	if mu.mutation.GraphCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   metric.GraphTable,
			Columns: []string{metric.GraphColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(graph.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.GraphIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   metric.GraphTable,
			Columns: []string{metric.GraphColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(graph.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.HistogramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   metric.HistogramsTable,
			Columns: []string{metric.HistogramsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(histogram.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedHistogramsIDs(); len(nodes) > 0 && !mu.mutation.HistogramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   metric.HistogramsTable,
			Columns: []string{metric.HistogramsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(histogram.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.HistogramsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   metric.HistogramsTable,
			Columns: []string{metric.HistogramsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(histogram.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.CountersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   metric.CountersTable,
			Columns: []string{metric.CountersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(counter.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedCountersIDs(); len(nodes) > 0 && !mu.mutation.CountersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   metric.CountersTable,
			Columns: []string{metric.CountersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(counter.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.CountersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   metric.CountersTable,
			Columns: []string{metric.CountersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(counter.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.GaugesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   metric.GaugesTable,
			Columns: []string{metric.GaugesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gauge.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedGaugesIDs(); len(nodes) > 0 && !mu.mutation.GaugesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   metric.GaugesTable,
			Columns: []string{metric.GaugesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gauge.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.GaugesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   metric.GaugesTable,
			Columns: []string{metric.GaugesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gauge.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{metric.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MetricUpdateOne is the builder for updating a single Metric entity.
type MetricUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MetricMutation
}

// SetType sets the "type" field.
func (muo *MetricUpdateOne) SetType(s string) *MetricUpdateOne {
	muo.mutation.SetType(s)
	return muo
}

// SetGraphID sets the "graph" edge to the Graph entity by ID.
func (muo *MetricUpdateOne) SetGraphID(id int) *MetricUpdateOne {
	muo.mutation.SetGraphID(id)
	return muo
}

// SetNillableGraphID sets the "graph" edge to the Graph entity by ID if the given value is not nil.
func (muo *MetricUpdateOne) SetNillableGraphID(id *int) *MetricUpdateOne {
	if id != nil {
		muo = muo.SetGraphID(*id)
	}
	return muo
}

// SetGraph sets the "graph" edge to the Graph entity.
func (muo *MetricUpdateOne) SetGraph(g *Graph) *MetricUpdateOne {
	return muo.SetGraphID(g.ID)
}

// AddHistogramIDs adds the "histograms" edge to the Histogram entity by IDs.
func (muo *MetricUpdateOne) AddHistogramIDs(ids ...int) *MetricUpdateOne {
	muo.mutation.AddHistogramIDs(ids...)
	return muo
}

// AddHistograms adds the "histograms" edges to the Histogram entity.
func (muo *MetricUpdateOne) AddHistograms(h ...*Histogram) *MetricUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return muo.AddHistogramIDs(ids...)
}

// AddCounterIDs adds the "counters" edge to the Counter entity by IDs.
func (muo *MetricUpdateOne) AddCounterIDs(ids ...int) *MetricUpdateOne {
	muo.mutation.AddCounterIDs(ids...)
	return muo
}

// AddCounters adds the "counters" edges to the Counter entity.
func (muo *MetricUpdateOne) AddCounters(c ...*Counter) *MetricUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return muo.AddCounterIDs(ids...)
}

// AddGaugeIDs adds the "gauges" edge to the Gauge entity by IDs.
func (muo *MetricUpdateOne) AddGaugeIDs(ids ...int) *MetricUpdateOne {
	muo.mutation.AddGaugeIDs(ids...)
	return muo
}

// AddGauges adds the "gauges" edges to the Gauge entity.
func (muo *MetricUpdateOne) AddGauges(g ...*Gauge) *MetricUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return muo.AddGaugeIDs(ids...)
}

// Mutation returns the MetricMutation object of the builder.
func (muo *MetricUpdateOne) Mutation() *MetricMutation {
	return muo.mutation
}

// ClearGraph clears the "graph" edge to the Graph entity.
func (muo *MetricUpdateOne) ClearGraph() *MetricUpdateOne {
	muo.mutation.ClearGraph()
	return muo
}

// ClearHistograms clears all "histograms" edges to the Histogram entity.
func (muo *MetricUpdateOne) ClearHistograms() *MetricUpdateOne {
	muo.mutation.ClearHistograms()
	return muo
}

// RemoveHistogramIDs removes the "histograms" edge to Histogram entities by IDs.
func (muo *MetricUpdateOne) RemoveHistogramIDs(ids ...int) *MetricUpdateOne {
	muo.mutation.RemoveHistogramIDs(ids...)
	return muo
}

// RemoveHistograms removes "histograms" edges to Histogram entities.
func (muo *MetricUpdateOne) RemoveHistograms(h ...*Histogram) *MetricUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return muo.RemoveHistogramIDs(ids...)
}

// ClearCounters clears all "counters" edges to the Counter entity.
func (muo *MetricUpdateOne) ClearCounters() *MetricUpdateOne {
	muo.mutation.ClearCounters()
	return muo
}

// RemoveCounterIDs removes the "counters" edge to Counter entities by IDs.
func (muo *MetricUpdateOne) RemoveCounterIDs(ids ...int) *MetricUpdateOne {
	muo.mutation.RemoveCounterIDs(ids...)
	return muo
}

// RemoveCounters removes "counters" edges to Counter entities.
func (muo *MetricUpdateOne) RemoveCounters(c ...*Counter) *MetricUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return muo.RemoveCounterIDs(ids...)
}

// ClearGauges clears all "gauges" edges to the Gauge entity.
func (muo *MetricUpdateOne) ClearGauges() *MetricUpdateOne {
	muo.mutation.ClearGauges()
	return muo
}

// RemoveGaugeIDs removes the "gauges" edge to Gauge entities by IDs.
func (muo *MetricUpdateOne) RemoveGaugeIDs(ids ...int) *MetricUpdateOne {
	muo.mutation.RemoveGaugeIDs(ids...)
	return muo
}

// RemoveGauges removes "gauges" edges to Gauge entities.
func (muo *MetricUpdateOne) RemoveGauges(g ...*Gauge) *MetricUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return muo.RemoveGaugeIDs(ids...)
}

// Where appends a list predicates to the MetricUpdate builder.
func (muo *MetricUpdateOne) Where(ps ...predicate.Metric) *MetricUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MetricUpdateOne) Select(field string, fields ...string) *MetricUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Metric entity.
func (muo *MetricUpdateOne) Save(ctx context.Context) (*Metric, error) {
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MetricUpdateOne) SaveX(ctx context.Context) *Metric {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MetricUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MetricUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (muo *MetricUpdateOne) sqlSave(ctx context.Context) (_node *Metric, err error) {
	_spec := sqlgraph.NewUpdateSpec(metric.Table, metric.Columns, sqlgraph.NewFieldSpec(metric.FieldID, field.TypeInt))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Metric.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, metric.FieldID)
		for _, f := range fields {
			if !metric.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != metric.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.GetType(); ok {
		_spec.SetField(metric.FieldType, field.TypeString, value)
	}
	if muo.mutation.GraphCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   metric.GraphTable,
			Columns: []string{metric.GraphColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(graph.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.GraphIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   metric.GraphTable,
			Columns: []string{metric.GraphColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(graph.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.HistogramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   metric.HistogramsTable,
			Columns: []string{metric.HistogramsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(histogram.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedHistogramsIDs(); len(nodes) > 0 && !muo.mutation.HistogramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   metric.HistogramsTable,
			Columns: []string{metric.HistogramsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(histogram.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.HistogramsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   metric.HistogramsTable,
			Columns: []string{metric.HistogramsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(histogram.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.CountersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   metric.CountersTable,
			Columns: []string{metric.CountersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(counter.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedCountersIDs(); len(nodes) > 0 && !muo.mutation.CountersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   metric.CountersTable,
			Columns: []string{metric.CountersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(counter.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.CountersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   metric.CountersTable,
			Columns: []string{metric.CountersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(counter.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.GaugesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   metric.GaugesTable,
			Columns: []string{metric.GaugesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gauge.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedGaugesIDs(); len(nodes) > 0 && !muo.mutation.GaugesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   metric.GaugesTable,
			Columns: []string{metric.GaugesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gauge.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.GaugesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   metric.GaugesTable,
			Columns: []string{metric.GaugesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gauge.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Metric{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{metric.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
