// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/gobench-io/gobench/v2/ent/application"
	"github.com/gobench-io/gobench/v2/ent/counter"
	"github.com/gobench-io/gobench/v2/ent/gauge"
	"github.com/gobench-io/gobench/v2/ent/graph"
	"github.com/gobench-io/gobench/v2/ent/group"
	"github.com/gobench-io/gobench/v2/ent/histogram"
	"github.com/gobench-io/gobench/v2/ent/metric"
	"github.com/gobench-io/gobench/v2/ent/predicate"
	"github.com/gobench-io/gobench/v2/ent/tag"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeApplication = "Application"
	TypeCounter     = "Counter"
	TypeGauge       = "Gauge"
	TypeGraph       = "Graph"
	TypeGroup       = "Group"
	TypeHistogram   = "Histogram"
	TypeMetric      = "Metric"
	TypeTag         = "Tag"
)

// ApplicationMutation represents an operation that mutates the Application nodes in the graph.
type ApplicationMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	status        *string
	created_at    *time.Time
	started_at    *time.Time
	updated_at    *time.Time
	scenario      *string
	gomod         *string
	gosum         *string
	vu            *int
	addvu         *int
	clearedFields map[string]struct{}
	groups        map[int]struct{}
	removedgroups map[int]struct{}
	clearedgroups bool
	tags          map[int]struct{}
	removedtags   map[int]struct{}
	clearedtags   bool
	done          bool
	oldValue      func(context.Context) (*Application, error)
	predicates    []predicate.Application
}

var _ ent.Mutation = (*ApplicationMutation)(nil)

// applicationOption allows management of the mutation configuration using functional options.
type applicationOption func(*ApplicationMutation)

// newApplicationMutation creates new mutation for the Application entity.
func newApplicationMutation(c config, op Op, opts ...applicationOption) *ApplicationMutation {
	m := &ApplicationMutation{
		config:        c,
		op:            op,
		typ:           TypeApplication,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withApplicationID sets the ID field of the mutation.
func withApplicationID(id int) applicationOption {
	return func(m *ApplicationMutation) {
		var (
			err   error
			once  sync.Once
			value *Application
		)
		m.oldValue = func(ctx context.Context) (*Application, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Application.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withApplication sets the old Application of the mutation.
func withApplication(node *Application) applicationOption {
	return func(m *ApplicationMutation) {
		m.oldValue = func(context.Context) (*Application, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ApplicationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ApplicationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ApplicationMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ApplicationMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Application.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ApplicationMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ApplicationMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Application entity.
// If the Application object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ApplicationMutation) ResetName() {
	m.name = nil
}

// SetStatus sets the "status" field.
func (m *ApplicationMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *ApplicationMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Application entity.
// If the Application object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *ApplicationMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ApplicationMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ApplicationMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Application entity.
// If the Application object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ApplicationMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetStartedAt sets the "started_at" field.
func (m *ApplicationMutation) SetStartedAt(t time.Time) {
	m.started_at = &t
}

// StartedAt returns the value of the "started_at" field in the mutation.
func (m *ApplicationMutation) StartedAt() (r time.Time, exists bool) {
	v := m.started_at
	if v == nil {
		return
	}
	return *v, true
}

// OldStartedAt returns the old "started_at" field's value of the Application entity.
// If the Application object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationMutation) OldStartedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartedAt: %w", err)
	}
	return oldValue.StartedAt, nil
}

// ClearStartedAt clears the value of the "started_at" field.
func (m *ApplicationMutation) ClearStartedAt() {
	m.started_at = nil
	m.clearedFields[application.FieldStartedAt] = struct{}{}
}

// StartedAtCleared returns if the "started_at" field was cleared in this mutation.
func (m *ApplicationMutation) StartedAtCleared() bool {
	_, ok := m.clearedFields[application.FieldStartedAt]
	return ok
}

// ResetStartedAt resets all changes to the "started_at" field.
func (m *ApplicationMutation) ResetStartedAt() {
	m.started_at = nil
	delete(m.clearedFields, application.FieldStartedAt)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ApplicationMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ApplicationMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Application entity.
// If the Application object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ApplicationMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetScenario sets the "scenario" field.
func (m *ApplicationMutation) SetScenario(s string) {
	m.scenario = &s
}

// Scenario returns the value of the "scenario" field in the mutation.
func (m *ApplicationMutation) Scenario() (r string, exists bool) {
	v := m.scenario
	if v == nil {
		return
	}
	return *v, true
}

// OldScenario returns the old "scenario" field's value of the Application entity.
// If the Application object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationMutation) OldScenario(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldScenario is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldScenario requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScenario: %w", err)
	}
	return oldValue.Scenario, nil
}

// ResetScenario resets all changes to the "scenario" field.
func (m *ApplicationMutation) ResetScenario() {
	m.scenario = nil
}

// SetGomod sets the "gomod" field.
func (m *ApplicationMutation) SetGomod(s string) {
	m.gomod = &s
}

// Gomod returns the value of the "gomod" field in the mutation.
func (m *ApplicationMutation) Gomod() (r string, exists bool) {
	v := m.gomod
	if v == nil {
		return
	}
	return *v, true
}

// OldGomod returns the old "gomod" field's value of the Application entity.
// If the Application object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationMutation) OldGomod(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGomod is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGomod requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGomod: %w", err)
	}
	return oldValue.Gomod, nil
}

// ResetGomod resets all changes to the "gomod" field.
func (m *ApplicationMutation) ResetGomod() {
	m.gomod = nil
}

// SetGosum sets the "gosum" field.
func (m *ApplicationMutation) SetGosum(s string) {
	m.gosum = &s
}

// Gosum returns the value of the "gosum" field in the mutation.
func (m *ApplicationMutation) Gosum() (r string, exists bool) {
	v := m.gosum
	if v == nil {
		return
	}
	return *v, true
}

// OldGosum returns the old "gosum" field's value of the Application entity.
// If the Application object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationMutation) OldGosum(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGosum is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGosum requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGosum: %w", err)
	}
	return oldValue.Gosum, nil
}

// ResetGosum resets all changes to the "gosum" field.
func (m *ApplicationMutation) ResetGosum() {
	m.gosum = nil
}

// SetVu sets the "vu" field.
func (m *ApplicationMutation) SetVu(i int) {
	m.vu = &i
	m.addvu = nil
}

// Vu returns the value of the "vu" field in the mutation.
func (m *ApplicationMutation) Vu() (r int, exists bool) {
	v := m.vu
	if v == nil {
		return
	}
	return *v, true
}

// OldVu returns the old "vu" field's value of the Application entity.
// If the Application object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ApplicationMutation) OldVu(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVu is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVu requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVu: %w", err)
	}
	return oldValue.Vu, nil
}

// AddVu adds i to the "vu" field.
func (m *ApplicationMutation) AddVu(i int) {
	if m.addvu != nil {
		*m.addvu += i
	} else {
		m.addvu = &i
	}
}

// AddedVu returns the value that was added to the "vu" field in this mutation.
func (m *ApplicationMutation) AddedVu() (r int, exists bool) {
	v := m.addvu
	if v == nil {
		return
	}
	return *v, true
}

// ResetVu resets all changes to the "vu" field.
func (m *ApplicationMutation) ResetVu() {
	m.vu = nil
	m.addvu = nil
}

// AddGroupIDs adds the "groups" edge to the Group entity by ids.
func (m *ApplicationMutation) AddGroupIDs(ids ...int) {
	if m.groups == nil {
		m.groups = make(map[int]struct{})
	}
	for i := range ids {
		m.groups[ids[i]] = struct{}{}
	}
}

// ClearGroups clears the "groups" edge to the Group entity.
func (m *ApplicationMutation) ClearGroups() {
	m.clearedgroups = true
}

// GroupsCleared reports if the "groups" edge to the Group entity was cleared.
func (m *ApplicationMutation) GroupsCleared() bool {
	return m.clearedgroups
}

// RemoveGroupIDs removes the "groups" edge to the Group entity by IDs.
func (m *ApplicationMutation) RemoveGroupIDs(ids ...int) {
	if m.removedgroups == nil {
		m.removedgroups = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.groups, ids[i])
		m.removedgroups[ids[i]] = struct{}{}
	}
}

// RemovedGroups returns the removed IDs of the "groups" edge to the Group entity.
func (m *ApplicationMutation) RemovedGroupsIDs() (ids []int) {
	for id := range m.removedgroups {
		ids = append(ids, id)
	}
	return
}

// GroupsIDs returns the "groups" edge IDs in the mutation.
func (m *ApplicationMutation) GroupsIDs() (ids []int) {
	for id := range m.groups {
		ids = append(ids, id)
	}
	return
}

// ResetGroups resets all changes to the "groups" edge.
func (m *ApplicationMutation) ResetGroups() {
	m.groups = nil
	m.clearedgroups = false
	m.removedgroups = nil
}

// AddTagIDs adds the "tags" edge to the Tag entity by ids.
func (m *ApplicationMutation) AddTagIDs(ids ...int) {
	if m.tags == nil {
		m.tags = make(map[int]struct{})
	}
	for i := range ids {
		m.tags[ids[i]] = struct{}{}
	}
}

// ClearTags clears the "tags" edge to the Tag entity.
func (m *ApplicationMutation) ClearTags() {
	m.clearedtags = true
}

// TagsCleared reports if the "tags" edge to the Tag entity was cleared.
func (m *ApplicationMutation) TagsCleared() bool {
	return m.clearedtags
}

// RemoveTagIDs removes the "tags" edge to the Tag entity by IDs.
func (m *ApplicationMutation) RemoveTagIDs(ids ...int) {
	if m.removedtags == nil {
		m.removedtags = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.tags, ids[i])
		m.removedtags[ids[i]] = struct{}{}
	}
}

// RemovedTags returns the removed IDs of the "tags" edge to the Tag entity.
func (m *ApplicationMutation) RemovedTagsIDs() (ids []int) {
	for id := range m.removedtags {
		ids = append(ids, id)
	}
	return
}

// TagsIDs returns the "tags" edge IDs in the mutation.
func (m *ApplicationMutation) TagsIDs() (ids []int) {
	for id := range m.tags {
		ids = append(ids, id)
	}
	return
}

// ResetTags resets all changes to the "tags" edge.
func (m *ApplicationMutation) ResetTags() {
	m.tags = nil
	m.clearedtags = false
	m.removedtags = nil
}

// Where appends a list predicates to the ApplicationMutation builder.
func (m *ApplicationMutation) Where(ps ...predicate.Application) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ApplicationMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ApplicationMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Application, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ApplicationMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ApplicationMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Application).
func (m *ApplicationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ApplicationMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.name != nil {
		fields = append(fields, application.FieldName)
	}
	if m.status != nil {
		fields = append(fields, application.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, application.FieldCreatedAt)
	}
	if m.started_at != nil {
		fields = append(fields, application.FieldStartedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, application.FieldUpdatedAt)
	}
	if m.scenario != nil {
		fields = append(fields, application.FieldScenario)
	}
	if m.gomod != nil {
		fields = append(fields, application.FieldGomod)
	}
	if m.gosum != nil {
		fields = append(fields, application.FieldGosum)
	}
	if m.vu != nil {
		fields = append(fields, application.FieldVu)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ApplicationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case application.FieldName:
		return m.Name()
	case application.FieldStatus:
		return m.Status()
	case application.FieldCreatedAt:
		return m.CreatedAt()
	case application.FieldStartedAt:
		return m.StartedAt()
	case application.FieldUpdatedAt:
		return m.UpdatedAt()
	case application.FieldScenario:
		return m.Scenario()
	case application.FieldGomod:
		return m.Gomod()
	case application.FieldGosum:
		return m.Gosum()
	case application.FieldVu:
		return m.Vu()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ApplicationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case application.FieldName:
		return m.OldName(ctx)
	case application.FieldStatus:
		return m.OldStatus(ctx)
	case application.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case application.FieldStartedAt:
		return m.OldStartedAt(ctx)
	case application.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case application.FieldScenario:
		return m.OldScenario(ctx)
	case application.FieldGomod:
		return m.OldGomod(ctx)
	case application.FieldGosum:
		return m.OldGosum(ctx)
	case application.FieldVu:
		return m.OldVu(ctx)
	}
	return nil, fmt.Errorf("unknown Application field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ApplicationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case application.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case application.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case application.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case application.FieldStartedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartedAt(v)
		return nil
	case application.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case application.FieldScenario:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScenario(v)
		return nil
	case application.FieldGomod:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGomod(v)
		return nil
	case application.FieldGosum:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGosum(v)
		return nil
	case application.FieldVu:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVu(v)
		return nil
	}
	return fmt.Errorf("unknown Application field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ApplicationMutation) AddedFields() []string {
	var fields []string
	if m.addvu != nil {
		fields = append(fields, application.FieldVu)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ApplicationMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case application.FieldVu:
		return m.AddedVu()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ApplicationMutation) AddField(name string, value ent.Value) error {
	switch name {
	case application.FieldVu:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddVu(v)
		return nil
	}
	return fmt.Errorf("unknown Application numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ApplicationMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(application.FieldStartedAt) {
		fields = append(fields, application.FieldStartedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ApplicationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ApplicationMutation) ClearField(name string) error {
	switch name {
	case application.FieldStartedAt:
		m.ClearStartedAt()
		return nil
	}
	return fmt.Errorf("unknown Application nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ApplicationMutation) ResetField(name string) error {
	switch name {
	case application.FieldName:
		m.ResetName()
		return nil
	case application.FieldStatus:
		m.ResetStatus()
		return nil
	case application.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case application.FieldStartedAt:
		m.ResetStartedAt()
		return nil
	case application.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case application.FieldScenario:
		m.ResetScenario()
		return nil
	case application.FieldGomod:
		m.ResetGomod()
		return nil
	case application.FieldGosum:
		m.ResetGosum()
		return nil
	case application.FieldVu:
		m.ResetVu()
		return nil
	}
	return fmt.Errorf("unknown Application field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ApplicationMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.groups != nil {
		edges = append(edges, application.EdgeGroups)
	}
	if m.tags != nil {
		edges = append(edges, application.EdgeTags)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ApplicationMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case application.EdgeGroups:
		ids := make([]ent.Value, 0, len(m.groups))
		for id := range m.groups {
			ids = append(ids, id)
		}
		return ids
	case application.EdgeTags:
		ids := make([]ent.Value, 0, len(m.tags))
		for id := range m.tags {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ApplicationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedgroups != nil {
		edges = append(edges, application.EdgeGroups)
	}
	if m.removedtags != nil {
		edges = append(edges, application.EdgeTags)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ApplicationMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case application.EdgeGroups:
		ids := make([]ent.Value, 0, len(m.removedgroups))
		for id := range m.removedgroups {
			ids = append(ids, id)
		}
		return ids
	case application.EdgeTags:
		ids := make([]ent.Value, 0, len(m.removedtags))
		for id := range m.removedtags {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ApplicationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedgroups {
		edges = append(edges, application.EdgeGroups)
	}
	if m.clearedtags {
		edges = append(edges, application.EdgeTags)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ApplicationMutation) EdgeCleared(name string) bool {
	switch name {
	case application.EdgeGroups:
		return m.clearedgroups
	case application.EdgeTags:
		return m.clearedtags
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ApplicationMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Application unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ApplicationMutation) ResetEdge(name string) error {
	switch name {
	case application.EdgeGroups:
		m.ResetGroups()
		return nil
	case application.EdgeTags:
		m.ResetTags()
		return nil
	}
	return fmt.Errorf("unknown Application edge %s", name)
}

// CounterMutation represents an operation that mutates the Counter nodes in the graph.
type CounterMutation struct {
	config
	op            Op
	typ           string
	id            *int
	time          *int64
	addtime       *int64
	count         *int64
	addcount      *int64
	wID           *string
	clearedFields map[string]struct{}
	metric        *int
	clearedmetric bool
	done          bool
	oldValue      func(context.Context) (*Counter, error)
	predicates    []predicate.Counter
}

var _ ent.Mutation = (*CounterMutation)(nil)

// counterOption allows management of the mutation configuration using functional options.
type counterOption func(*CounterMutation)

// newCounterMutation creates new mutation for the Counter entity.
func newCounterMutation(c config, op Op, opts ...counterOption) *CounterMutation {
	m := &CounterMutation{
		config:        c,
		op:            op,
		typ:           TypeCounter,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCounterID sets the ID field of the mutation.
func withCounterID(id int) counterOption {
	return func(m *CounterMutation) {
		var (
			err   error
			once  sync.Once
			value *Counter
		)
		m.oldValue = func(ctx context.Context) (*Counter, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Counter.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCounter sets the old Counter of the mutation.
func withCounter(node *Counter) counterOption {
	return func(m *CounterMutation) {
		m.oldValue = func(context.Context) (*Counter, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CounterMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CounterMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CounterMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CounterMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Counter.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTime sets the "time" field.
func (m *CounterMutation) SetTime(i int64) {
	m.time = &i
	m.addtime = nil
}

// Time returns the value of the "time" field in the mutation.
func (m *CounterMutation) Time() (r int64, exists bool) {
	v := m.time
	if v == nil {
		return
	}
	return *v, true
}

// OldTime returns the old "time" field's value of the Counter entity.
// If the Counter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CounterMutation) OldTime(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTime: %w", err)
	}
	return oldValue.Time, nil
}

// AddTime adds i to the "time" field.
func (m *CounterMutation) AddTime(i int64) {
	if m.addtime != nil {
		*m.addtime += i
	} else {
		m.addtime = &i
	}
}

// AddedTime returns the value that was added to the "time" field in this mutation.
func (m *CounterMutation) AddedTime() (r int64, exists bool) {
	v := m.addtime
	if v == nil {
		return
	}
	return *v, true
}

// ResetTime resets all changes to the "time" field.
func (m *CounterMutation) ResetTime() {
	m.time = nil
	m.addtime = nil
}

// SetCount sets the "count" field.
func (m *CounterMutation) SetCount(i int64) {
	m.count = &i
	m.addcount = nil
}

// Count returns the value of the "count" field in the mutation.
func (m *CounterMutation) Count() (r int64, exists bool) {
	v := m.count
	if v == nil {
		return
	}
	return *v, true
}

// OldCount returns the old "count" field's value of the Counter entity.
// If the Counter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CounterMutation) OldCount(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCount: %w", err)
	}
	return oldValue.Count, nil
}

// AddCount adds i to the "count" field.
func (m *CounterMutation) AddCount(i int64) {
	if m.addcount != nil {
		*m.addcount += i
	} else {
		m.addcount = &i
	}
}

// AddedCount returns the value that was added to the "count" field in this mutation.
func (m *CounterMutation) AddedCount() (r int64, exists bool) {
	v := m.addcount
	if v == nil {
		return
	}
	return *v, true
}

// ResetCount resets all changes to the "count" field.
func (m *CounterMutation) ResetCount() {
	m.count = nil
	m.addcount = nil
}

// SetWID sets the "wID" field.
func (m *CounterMutation) SetWID(s string) {
	m.wID = &s
}

// WID returns the value of the "wID" field in the mutation.
func (m *CounterMutation) WID() (r string, exists bool) {
	v := m.wID
	if v == nil {
		return
	}
	return *v, true
}

// OldWID returns the old "wID" field's value of the Counter entity.
// If the Counter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CounterMutation) OldWID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWID: %w", err)
	}
	return oldValue.WID, nil
}

// ResetWID resets all changes to the "wID" field.
func (m *CounterMutation) ResetWID() {
	m.wID = nil
}

// SetMetricID sets the "metric" edge to the Metric entity by id.
func (m *CounterMutation) SetMetricID(id int) {
	m.metric = &id
}

// ClearMetric clears the "metric" edge to the Metric entity.
func (m *CounterMutation) ClearMetric() {
	m.clearedmetric = true
}

// MetricCleared reports if the "metric" edge to the Metric entity was cleared.
func (m *CounterMutation) MetricCleared() bool {
	return m.clearedmetric
}

// MetricID returns the "metric" edge ID in the mutation.
func (m *CounterMutation) MetricID() (id int, exists bool) {
	if m.metric != nil {
		return *m.metric, true
	}
	return
}

// MetricIDs returns the "metric" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// MetricID instead. It exists only for internal usage by the builders.
func (m *CounterMutation) MetricIDs() (ids []int) {
	if id := m.metric; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetMetric resets all changes to the "metric" edge.
func (m *CounterMutation) ResetMetric() {
	m.metric = nil
	m.clearedmetric = false
}

// Where appends a list predicates to the CounterMutation builder.
func (m *CounterMutation) Where(ps ...predicate.Counter) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CounterMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CounterMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Counter, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CounterMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CounterMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Counter).
func (m *CounterMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CounterMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.time != nil {
		fields = append(fields, counter.FieldTime)
	}
	if m.count != nil {
		fields = append(fields, counter.FieldCount)
	}
	if m.wID != nil {
		fields = append(fields, counter.FieldWID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CounterMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case counter.FieldTime:
		return m.Time()
	case counter.FieldCount:
		return m.Count()
	case counter.FieldWID:
		return m.WID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CounterMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case counter.FieldTime:
		return m.OldTime(ctx)
	case counter.FieldCount:
		return m.OldCount(ctx)
	case counter.FieldWID:
		return m.OldWID(ctx)
	}
	return nil, fmt.Errorf("unknown Counter field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CounterMutation) SetField(name string, value ent.Value) error {
	switch name {
	case counter.FieldTime:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTime(v)
		return nil
	case counter.FieldCount:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCount(v)
		return nil
	case counter.FieldWID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWID(v)
		return nil
	}
	return fmt.Errorf("unknown Counter field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CounterMutation) AddedFields() []string {
	var fields []string
	if m.addtime != nil {
		fields = append(fields, counter.FieldTime)
	}
	if m.addcount != nil {
		fields = append(fields, counter.FieldCount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CounterMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case counter.FieldTime:
		return m.AddedTime()
	case counter.FieldCount:
		return m.AddedCount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CounterMutation) AddField(name string, value ent.Value) error {
	switch name {
	case counter.FieldTime:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTime(v)
		return nil
	case counter.FieldCount:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCount(v)
		return nil
	}
	return fmt.Errorf("unknown Counter numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CounterMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CounterMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CounterMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Counter nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CounterMutation) ResetField(name string) error {
	switch name {
	case counter.FieldTime:
		m.ResetTime()
		return nil
	case counter.FieldCount:
		m.ResetCount()
		return nil
	case counter.FieldWID:
		m.ResetWID()
		return nil
	}
	return fmt.Errorf("unknown Counter field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CounterMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.metric != nil {
		edges = append(edges, counter.EdgeMetric)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CounterMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case counter.EdgeMetric:
		if id := m.metric; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CounterMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CounterMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CounterMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedmetric {
		edges = append(edges, counter.EdgeMetric)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CounterMutation) EdgeCleared(name string) bool {
	switch name {
	case counter.EdgeMetric:
		return m.clearedmetric
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CounterMutation) ClearEdge(name string) error {
	switch name {
	case counter.EdgeMetric:
		m.ClearMetric()
		return nil
	}
	return fmt.Errorf("unknown Counter unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CounterMutation) ResetEdge(name string) error {
	switch name {
	case counter.EdgeMetric:
		m.ResetMetric()
		return nil
	}
	return fmt.Errorf("unknown Counter edge %s", name)
}

// GaugeMutation represents an operation that mutates the Gauge nodes in the graph.
type GaugeMutation struct {
	config
	op            Op
	typ           string
	id            *int
	time          *int64
	addtime       *int64
	value         *int64
	addvalue      *int64
	wID           *string
	clearedFields map[string]struct{}
	metric        *int
	clearedmetric bool
	done          bool
	oldValue      func(context.Context) (*Gauge, error)
	predicates    []predicate.Gauge
}

var _ ent.Mutation = (*GaugeMutation)(nil)

// gaugeOption allows management of the mutation configuration using functional options.
type gaugeOption func(*GaugeMutation)

// newGaugeMutation creates new mutation for the Gauge entity.
func newGaugeMutation(c config, op Op, opts ...gaugeOption) *GaugeMutation {
	m := &GaugeMutation{
		config:        c,
		op:            op,
		typ:           TypeGauge,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGaugeID sets the ID field of the mutation.
func withGaugeID(id int) gaugeOption {
	return func(m *GaugeMutation) {
		var (
			err   error
			once  sync.Once
			value *Gauge
		)
		m.oldValue = func(ctx context.Context) (*Gauge, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Gauge.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGauge sets the old Gauge of the mutation.
func withGauge(node *Gauge) gaugeOption {
	return func(m *GaugeMutation) {
		m.oldValue = func(context.Context) (*Gauge, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GaugeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GaugeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GaugeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GaugeMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Gauge.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTime sets the "time" field.
func (m *GaugeMutation) SetTime(i int64) {
	m.time = &i
	m.addtime = nil
}

// Time returns the value of the "time" field in the mutation.
func (m *GaugeMutation) Time() (r int64, exists bool) {
	v := m.time
	if v == nil {
		return
	}
	return *v, true
}

// OldTime returns the old "time" field's value of the Gauge entity.
// If the Gauge object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GaugeMutation) OldTime(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTime: %w", err)
	}
	return oldValue.Time, nil
}

// AddTime adds i to the "time" field.
func (m *GaugeMutation) AddTime(i int64) {
	if m.addtime != nil {
		*m.addtime += i
	} else {
		m.addtime = &i
	}
}

// AddedTime returns the value that was added to the "time" field in this mutation.
func (m *GaugeMutation) AddedTime() (r int64, exists bool) {
	v := m.addtime
	if v == nil {
		return
	}
	return *v, true
}

// ResetTime resets all changes to the "time" field.
func (m *GaugeMutation) ResetTime() {
	m.time = nil
	m.addtime = nil
}

// SetValue sets the "value" field.
func (m *GaugeMutation) SetValue(i int64) {
	m.value = &i
	m.addvalue = nil
}

// Value returns the value of the "value" field in the mutation.
func (m *GaugeMutation) Value() (r int64, exists bool) {
	v := m.value
	if v == nil {
		return
	}
	return *v, true
}

// OldValue returns the old "value" field's value of the Gauge entity.
// If the Gauge object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GaugeMutation) OldValue(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValue: %w", err)
	}
	return oldValue.Value, nil
}

// AddValue adds i to the "value" field.
func (m *GaugeMutation) AddValue(i int64) {
	if m.addvalue != nil {
		*m.addvalue += i
	} else {
		m.addvalue = &i
	}
}

// AddedValue returns the value that was added to the "value" field in this mutation.
func (m *GaugeMutation) AddedValue() (r int64, exists bool) {
	v := m.addvalue
	if v == nil {
		return
	}
	return *v, true
}

// ResetValue resets all changes to the "value" field.
func (m *GaugeMutation) ResetValue() {
	m.value = nil
	m.addvalue = nil
}

// SetWID sets the "wID" field.
func (m *GaugeMutation) SetWID(s string) {
	m.wID = &s
}

// WID returns the value of the "wID" field in the mutation.
func (m *GaugeMutation) WID() (r string, exists bool) {
	v := m.wID
	if v == nil {
		return
	}
	return *v, true
}

// OldWID returns the old "wID" field's value of the Gauge entity.
// If the Gauge object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GaugeMutation) OldWID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWID: %w", err)
	}
	return oldValue.WID, nil
}

// ResetWID resets all changes to the "wID" field.
func (m *GaugeMutation) ResetWID() {
	m.wID = nil
}

// SetMetricID sets the "metric" edge to the Metric entity by id.
func (m *GaugeMutation) SetMetricID(id int) {
	m.metric = &id
}

// ClearMetric clears the "metric" edge to the Metric entity.
func (m *GaugeMutation) ClearMetric() {
	m.clearedmetric = true
}

// MetricCleared reports if the "metric" edge to the Metric entity was cleared.
func (m *GaugeMutation) MetricCleared() bool {
	return m.clearedmetric
}

// MetricID returns the "metric" edge ID in the mutation.
func (m *GaugeMutation) MetricID() (id int, exists bool) {
	if m.metric != nil {
		return *m.metric, true
	}
	return
}

// MetricIDs returns the "metric" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// MetricID instead. It exists only for internal usage by the builders.
func (m *GaugeMutation) MetricIDs() (ids []int) {
	if id := m.metric; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetMetric resets all changes to the "metric" edge.
func (m *GaugeMutation) ResetMetric() {
	m.metric = nil
	m.clearedmetric = false
}

// Where appends a list predicates to the GaugeMutation builder.
func (m *GaugeMutation) Where(ps ...predicate.Gauge) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the GaugeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *GaugeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Gauge, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *GaugeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *GaugeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Gauge).
func (m *GaugeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GaugeMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.time != nil {
		fields = append(fields, gauge.FieldTime)
	}
	if m.value != nil {
		fields = append(fields, gauge.FieldValue)
	}
	if m.wID != nil {
		fields = append(fields, gauge.FieldWID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GaugeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case gauge.FieldTime:
		return m.Time()
	case gauge.FieldValue:
		return m.Value()
	case gauge.FieldWID:
		return m.WID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GaugeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case gauge.FieldTime:
		return m.OldTime(ctx)
	case gauge.FieldValue:
		return m.OldValue(ctx)
	case gauge.FieldWID:
		return m.OldWID(ctx)
	}
	return nil, fmt.Errorf("unknown Gauge field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GaugeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case gauge.FieldTime:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTime(v)
		return nil
	case gauge.FieldValue:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValue(v)
		return nil
	case gauge.FieldWID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWID(v)
		return nil
	}
	return fmt.Errorf("unknown Gauge field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GaugeMutation) AddedFields() []string {
	var fields []string
	if m.addtime != nil {
		fields = append(fields, gauge.FieldTime)
	}
	if m.addvalue != nil {
		fields = append(fields, gauge.FieldValue)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GaugeMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case gauge.FieldTime:
		return m.AddedTime()
	case gauge.FieldValue:
		return m.AddedValue()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GaugeMutation) AddField(name string, value ent.Value) error {
	switch name {
	case gauge.FieldTime:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTime(v)
		return nil
	case gauge.FieldValue:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddValue(v)
		return nil
	}
	return fmt.Errorf("unknown Gauge numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GaugeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GaugeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GaugeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Gauge nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GaugeMutation) ResetField(name string) error {
	switch name {
	case gauge.FieldTime:
		m.ResetTime()
		return nil
	case gauge.FieldValue:
		m.ResetValue()
		return nil
	case gauge.FieldWID:
		m.ResetWID()
		return nil
	}
	return fmt.Errorf("unknown Gauge field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GaugeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.metric != nil {
		edges = append(edges, gauge.EdgeMetric)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GaugeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case gauge.EdgeMetric:
		if id := m.metric; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GaugeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GaugeMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GaugeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedmetric {
		edges = append(edges, gauge.EdgeMetric)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GaugeMutation) EdgeCleared(name string) bool {
	switch name {
	case gauge.EdgeMetric:
		return m.clearedmetric
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GaugeMutation) ClearEdge(name string) error {
	switch name {
	case gauge.EdgeMetric:
		m.ClearMetric()
		return nil
	}
	return fmt.Errorf("unknown Gauge unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GaugeMutation) ResetEdge(name string) error {
	switch name {
	case gauge.EdgeMetric:
		m.ResetMetric()
		return nil
	}
	return fmt.Errorf("unknown Gauge edge %s", name)
}

// GraphMutation represents an operation that mutates the Graph nodes in the graph.
type GraphMutation struct {
	config
	op             Op
	typ            string
	id             *int
	title          *string
	unit           *string
	clearedFields  map[string]struct{}
	group          *int
	clearedgroup   bool
	metrics        map[int]struct{}
	removedmetrics map[int]struct{}
	clearedmetrics bool
	done           bool
	oldValue       func(context.Context) (*Graph, error)
	predicates     []predicate.Graph
}

var _ ent.Mutation = (*GraphMutation)(nil)

// graphOption allows management of the mutation configuration using functional options.
type graphOption func(*GraphMutation)

// newGraphMutation creates new mutation for the Graph entity.
func newGraphMutation(c config, op Op, opts ...graphOption) *GraphMutation {
	m := &GraphMutation{
		config:        c,
		op:            op,
		typ:           TypeGraph,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGraphID sets the ID field of the mutation.
func withGraphID(id int) graphOption {
	return func(m *GraphMutation) {
		var (
			err   error
			once  sync.Once
			value *Graph
		)
		m.oldValue = func(ctx context.Context) (*Graph, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Graph.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGraph sets the old Graph of the mutation.
func withGraph(node *Graph) graphOption {
	return func(m *GraphMutation) {
		m.oldValue = func(context.Context) (*Graph, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GraphMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GraphMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GraphMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GraphMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Graph.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTitle sets the "title" field.
func (m *GraphMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *GraphMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Graph entity.
// If the Graph object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GraphMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *GraphMutation) ResetTitle() {
	m.title = nil
}

// SetUnit sets the "unit" field.
func (m *GraphMutation) SetUnit(s string) {
	m.unit = &s
}

// Unit returns the value of the "unit" field in the mutation.
func (m *GraphMutation) Unit() (r string, exists bool) {
	v := m.unit
	if v == nil {
		return
	}
	return *v, true
}

// OldUnit returns the old "unit" field's value of the Graph entity.
// If the Graph object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GraphMutation) OldUnit(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUnit is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUnit requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUnit: %w", err)
	}
	return oldValue.Unit, nil
}

// ResetUnit resets all changes to the "unit" field.
func (m *GraphMutation) ResetUnit() {
	m.unit = nil
}

// SetGroupID sets the "group" edge to the Group entity by id.
func (m *GraphMutation) SetGroupID(id int) {
	m.group = &id
}

// ClearGroup clears the "group" edge to the Group entity.
func (m *GraphMutation) ClearGroup() {
	m.clearedgroup = true
}

// GroupCleared reports if the "group" edge to the Group entity was cleared.
func (m *GraphMutation) GroupCleared() bool {
	return m.clearedgroup
}

// GroupID returns the "group" edge ID in the mutation.
func (m *GraphMutation) GroupID() (id int, exists bool) {
	if m.group != nil {
		return *m.group, true
	}
	return
}

// GroupIDs returns the "group" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// GroupID instead. It exists only for internal usage by the builders.
func (m *GraphMutation) GroupIDs() (ids []int) {
	if id := m.group; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGroup resets all changes to the "group" edge.
func (m *GraphMutation) ResetGroup() {
	m.group = nil
	m.clearedgroup = false
}

// AddMetricIDs adds the "metrics" edge to the Metric entity by ids.
func (m *GraphMutation) AddMetricIDs(ids ...int) {
	if m.metrics == nil {
		m.metrics = make(map[int]struct{})
	}
	for i := range ids {
		m.metrics[ids[i]] = struct{}{}
	}
}

// ClearMetrics clears the "metrics" edge to the Metric entity.
func (m *GraphMutation) ClearMetrics() {
	m.clearedmetrics = true
}

// MetricsCleared reports if the "metrics" edge to the Metric entity was cleared.
func (m *GraphMutation) MetricsCleared() bool {
	return m.clearedmetrics
}

// RemoveMetricIDs removes the "metrics" edge to the Metric entity by IDs.
func (m *GraphMutation) RemoveMetricIDs(ids ...int) {
	if m.removedmetrics == nil {
		m.removedmetrics = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.metrics, ids[i])
		m.removedmetrics[ids[i]] = struct{}{}
	}
}

// RemovedMetrics returns the removed IDs of the "metrics" edge to the Metric entity.
func (m *GraphMutation) RemovedMetricsIDs() (ids []int) {
	for id := range m.removedmetrics {
		ids = append(ids, id)
	}
	return
}

// MetricsIDs returns the "metrics" edge IDs in the mutation.
func (m *GraphMutation) MetricsIDs() (ids []int) {
	for id := range m.metrics {
		ids = append(ids, id)
	}
	return
}

// ResetMetrics resets all changes to the "metrics" edge.
func (m *GraphMutation) ResetMetrics() {
	m.metrics = nil
	m.clearedmetrics = false
	m.removedmetrics = nil
}

// Where appends a list predicates to the GraphMutation builder.
func (m *GraphMutation) Where(ps ...predicate.Graph) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the GraphMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *GraphMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Graph, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *GraphMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *GraphMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Graph).
func (m *GraphMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GraphMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.title != nil {
		fields = append(fields, graph.FieldTitle)
	}
	if m.unit != nil {
		fields = append(fields, graph.FieldUnit)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GraphMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case graph.FieldTitle:
		return m.Title()
	case graph.FieldUnit:
		return m.Unit()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GraphMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case graph.FieldTitle:
		return m.OldTitle(ctx)
	case graph.FieldUnit:
		return m.OldUnit(ctx)
	}
	return nil, fmt.Errorf("unknown Graph field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GraphMutation) SetField(name string, value ent.Value) error {
	switch name {
	case graph.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case graph.FieldUnit:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUnit(v)
		return nil
	}
	return fmt.Errorf("unknown Graph field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GraphMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GraphMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GraphMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Graph numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GraphMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GraphMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GraphMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Graph nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GraphMutation) ResetField(name string) error {
	switch name {
	case graph.FieldTitle:
		m.ResetTitle()
		return nil
	case graph.FieldUnit:
		m.ResetUnit()
		return nil
	}
	return fmt.Errorf("unknown Graph field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GraphMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.group != nil {
		edges = append(edges, graph.EdgeGroup)
	}
	if m.metrics != nil {
		edges = append(edges, graph.EdgeMetrics)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GraphMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case graph.EdgeGroup:
		if id := m.group; id != nil {
			return []ent.Value{*id}
		}
	case graph.EdgeMetrics:
		ids := make([]ent.Value, 0, len(m.metrics))
		for id := range m.metrics {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GraphMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedmetrics != nil {
		edges = append(edges, graph.EdgeMetrics)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GraphMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case graph.EdgeMetrics:
		ids := make([]ent.Value, 0, len(m.removedmetrics))
		for id := range m.removedmetrics {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GraphMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedgroup {
		edges = append(edges, graph.EdgeGroup)
	}
	if m.clearedmetrics {
		edges = append(edges, graph.EdgeMetrics)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GraphMutation) EdgeCleared(name string) bool {
	switch name {
	case graph.EdgeGroup:
		return m.clearedgroup
	case graph.EdgeMetrics:
		return m.clearedmetrics
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GraphMutation) ClearEdge(name string) error {
	switch name {
	case graph.EdgeGroup:
		m.ClearGroup()
		return nil
	}
	return fmt.Errorf("unknown Graph unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GraphMutation) ResetEdge(name string) error {
	switch name {
	case graph.EdgeGroup:
		m.ResetGroup()
		return nil
	case graph.EdgeMetrics:
		m.ResetMetrics()
		return nil
	}
	return fmt.Errorf("unknown Graph edge %s", name)
}

// GroupMutation represents an operation that mutates the Group nodes in the graph.
type GroupMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	name               *string
	clearedFields      map[string]struct{}
	application        *int
	clearedapplication bool
	graphs             map[int]struct{}
	removedgraphs      map[int]struct{}
	clearedgraphs      bool
	done               bool
	oldValue           func(context.Context) (*Group, error)
	predicates         []predicate.Group
}

var _ ent.Mutation = (*GroupMutation)(nil)

// groupOption allows management of the mutation configuration using functional options.
type groupOption func(*GroupMutation)

// newGroupMutation creates new mutation for the Group entity.
func newGroupMutation(c config, op Op, opts ...groupOption) *GroupMutation {
	m := &GroupMutation{
		config:        c,
		op:            op,
		typ:           TypeGroup,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGroupID sets the ID field of the mutation.
func withGroupID(id int) groupOption {
	return func(m *GroupMutation) {
		var (
			err   error
			once  sync.Once
			value *Group
		)
		m.oldValue = func(ctx context.Context) (*Group, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Group.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGroup sets the old Group of the mutation.
func withGroup(node *Group) groupOption {
	return func(m *GroupMutation) {
		m.oldValue = func(context.Context) (*Group, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GroupMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GroupMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GroupMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GroupMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Group.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *GroupMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *GroupMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *GroupMutation) ResetName() {
	m.name = nil
}

// SetApplicationID sets the "application" edge to the Application entity by id.
func (m *GroupMutation) SetApplicationID(id int) {
	m.application = &id
}

// ClearApplication clears the "application" edge to the Application entity.
func (m *GroupMutation) ClearApplication() {
	m.clearedapplication = true
}

// ApplicationCleared reports if the "application" edge to the Application entity was cleared.
func (m *GroupMutation) ApplicationCleared() bool {
	return m.clearedapplication
}

// ApplicationID returns the "application" edge ID in the mutation.
func (m *GroupMutation) ApplicationID() (id int, exists bool) {
	if m.application != nil {
		return *m.application, true
	}
	return
}

// ApplicationIDs returns the "application" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ApplicationID instead. It exists only for internal usage by the builders.
func (m *GroupMutation) ApplicationIDs() (ids []int) {
	if id := m.application; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetApplication resets all changes to the "application" edge.
func (m *GroupMutation) ResetApplication() {
	m.application = nil
	m.clearedapplication = false
}

// AddGraphIDs adds the "graphs" edge to the Graph entity by ids.
func (m *GroupMutation) AddGraphIDs(ids ...int) {
	if m.graphs == nil {
		m.graphs = make(map[int]struct{})
	}
	for i := range ids {
		m.graphs[ids[i]] = struct{}{}
	}
}

// ClearGraphs clears the "graphs" edge to the Graph entity.
func (m *GroupMutation) ClearGraphs() {
	m.clearedgraphs = true
}

// GraphsCleared reports if the "graphs" edge to the Graph entity was cleared.
func (m *GroupMutation) GraphsCleared() bool {
	return m.clearedgraphs
}

// RemoveGraphIDs removes the "graphs" edge to the Graph entity by IDs.
func (m *GroupMutation) RemoveGraphIDs(ids ...int) {
	if m.removedgraphs == nil {
		m.removedgraphs = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.graphs, ids[i])
		m.removedgraphs[ids[i]] = struct{}{}
	}
}

// RemovedGraphs returns the removed IDs of the "graphs" edge to the Graph entity.
func (m *GroupMutation) RemovedGraphsIDs() (ids []int) {
	for id := range m.removedgraphs {
		ids = append(ids, id)
	}
	return
}

// GraphsIDs returns the "graphs" edge IDs in the mutation.
func (m *GroupMutation) GraphsIDs() (ids []int) {
	for id := range m.graphs {
		ids = append(ids, id)
	}
	return
}

// ResetGraphs resets all changes to the "graphs" edge.
func (m *GroupMutation) ResetGraphs() {
	m.graphs = nil
	m.clearedgraphs = false
	m.removedgraphs = nil
}

// Where appends a list predicates to the GroupMutation builder.
func (m *GroupMutation) Where(ps ...predicate.Group) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the GroupMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *GroupMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Group, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *GroupMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *GroupMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Group).
func (m *GroupMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GroupMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, group.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GroupMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case group.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GroupMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case group.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Group field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupMutation) SetField(name string, value ent.Value) error {
	switch name {
	case group.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Group field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GroupMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GroupMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Group numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GroupMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GroupMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GroupMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Group nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GroupMutation) ResetField(name string) error {
	switch name {
	case group.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Group field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GroupMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.application != nil {
		edges = append(edges, group.EdgeApplication)
	}
	if m.graphs != nil {
		edges = append(edges, group.EdgeGraphs)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GroupMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case group.EdgeApplication:
		if id := m.application; id != nil {
			return []ent.Value{*id}
		}
	case group.EdgeGraphs:
		ids := make([]ent.Value, 0, len(m.graphs))
		for id := range m.graphs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GroupMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedgraphs != nil {
		edges = append(edges, group.EdgeGraphs)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GroupMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case group.EdgeGraphs:
		ids := make([]ent.Value, 0, len(m.removedgraphs))
		for id := range m.removedgraphs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GroupMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedapplication {
		edges = append(edges, group.EdgeApplication)
	}
	if m.clearedgraphs {
		edges = append(edges, group.EdgeGraphs)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GroupMutation) EdgeCleared(name string) bool {
	switch name {
	case group.EdgeApplication:
		return m.clearedapplication
	case group.EdgeGraphs:
		return m.clearedgraphs
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GroupMutation) ClearEdge(name string) error {
	switch name {
	case group.EdgeApplication:
		m.ClearApplication()
		return nil
	}
	return fmt.Errorf("unknown Group unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GroupMutation) ResetEdge(name string) error {
	switch name {
	case group.EdgeApplication:
		m.ResetApplication()
		return nil
	case group.EdgeGraphs:
		m.ResetGraphs()
		return nil
	}
	return fmt.Errorf("unknown Group edge %s", name)
}

// HistogramMutation represents an operation that mutates the Histogram nodes in the graph.
type HistogramMutation struct {
	config
	op            Op
	typ           string
	id            *int
	time          *int64
	addtime       *int64
	count         *int64
	addcount      *int64
	min           *int64
	addmin        *int64
	max           *int64
	addmax        *int64
	mean          *float64
	addmean       *float64
	stddev        *float64
	addstddev     *float64
	median        *float64
	addmedian     *float64
	p75           *float64
	addp75        *float64
	p95           *float64
	addp95        *float64
	p99           *float64
	addp99        *float64
	p999          *float64
	addp999       *float64
	wID           *string
	clearedFields map[string]struct{}
	metric        *int
	clearedmetric bool
	done          bool
	oldValue      func(context.Context) (*Histogram, error)
	predicates    []predicate.Histogram
}

var _ ent.Mutation = (*HistogramMutation)(nil)

// histogramOption allows management of the mutation configuration using functional options.
type histogramOption func(*HistogramMutation)

// newHistogramMutation creates new mutation for the Histogram entity.
func newHistogramMutation(c config, op Op, opts ...histogramOption) *HistogramMutation {
	m := &HistogramMutation{
		config:        c,
		op:            op,
		typ:           TypeHistogram,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withHistogramID sets the ID field of the mutation.
func withHistogramID(id int) histogramOption {
	return func(m *HistogramMutation) {
		var (
			err   error
			once  sync.Once
			value *Histogram
		)
		m.oldValue = func(ctx context.Context) (*Histogram, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Histogram.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withHistogram sets the old Histogram of the mutation.
func withHistogram(node *Histogram) histogramOption {
	return func(m *HistogramMutation) {
		m.oldValue = func(context.Context) (*Histogram, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m HistogramMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m HistogramMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *HistogramMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *HistogramMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Histogram.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTime sets the "time" field.
func (m *HistogramMutation) SetTime(i int64) {
	m.time = &i
	m.addtime = nil
}

// Time returns the value of the "time" field in the mutation.
func (m *HistogramMutation) Time() (r int64, exists bool) {
	v := m.time
	if v == nil {
		return
	}
	return *v, true
}

// OldTime returns the old "time" field's value of the Histogram entity.
// If the Histogram object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HistogramMutation) OldTime(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTime: %w", err)
	}
	return oldValue.Time, nil
}

// AddTime adds i to the "time" field.
func (m *HistogramMutation) AddTime(i int64) {
	if m.addtime != nil {
		*m.addtime += i
	} else {
		m.addtime = &i
	}
}

// AddedTime returns the value that was added to the "time" field in this mutation.
func (m *HistogramMutation) AddedTime() (r int64, exists bool) {
	v := m.addtime
	if v == nil {
		return
	}
	return *v, true
}

// ResetTime resets all changes to the "time" field.
func (m *HistogramMutation) ResetTime() {
	m.time = nil
	m.addtime = nil
}

// SetCount sets the "count" field.
func (m *HistogramMutation) SetCount(i int64) {
	m.count = &i
	m.addcount = nil
}

// Count returns the value of the "count" field in the mutation.
func (m *HistogramMutation) Count() (r int64, exists bool) {
	v := m.count
	if v == nil {
		return
	}
	return *v, true
}

// OldCount returns the old "count" field's value of the Histogram entity.
// If the Histogram object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HistogramMutation) OldCount(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCount: %w", err)
	}
	return oldValue.Count, nil
}

// AddCount adds i to the "count" field.
func (m *HistogramMutation) AddCount(i int64) {
	if m.addcount != nil {
		*m.addcount += i
	} else {
		m.addcount = &i
	}
}

// AddedCount returns the value that was added to the "count" field in this mutation.
func (m *HistogramMutation) AddedCount() (r int64, exists bool) {
	v := m.addcount
	if v == nil {
		return
	}
	return *v, true
}

// ResetCount resets all changes to the "count" field.
func (m *HistogramMutation) ResetCount() {
	m.count = nil
	m.addcount = nil
}

// SetMin sets the "min" field.
func (m *HistogramMutation) SetMin(i int64) {
	m.min = &i
	m.addmin = nil
}

// Min returns the value of the "min" field in the mutation.
func (m *HistogramMutation) Min() (r int64, exists bool) {
	v := m.min
	if v == nil {
		return
	}
	return *v, true
}

// OldMin returns the old "min" field's value of the Histogram entity.
// If the Histogram object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HistogramMutation) OldMin(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMin is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMin requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMin: %w", err)
	}
	return oldValue.Min, nil
}

// AddMin adds i to the "min" field.
func (m *HistogramMutation) AddMin(i int64) {
	if m.addmin != nil {
		*m.addmin += i
	} else {
		m.addmin = &i
	}
}

// AddedMin returns the value that was added to the "min" field in this mutation.
func (m *HistogramMutation) AddedMin() (r int64, exists bool) {
	v := m.addmin
	if v == nil {
		return
	}
	return *v, true
}

// ResetMin resets all changes to the "min" field.
func (m *HistogramMutation) ResetMin() {
	m.min = nil
	m.addmin = nil
}

// SetMax sets the "max" field.
func (m *HistogramMutation) SetMax(i int64) {
	m.max = &i
	m.addmax = nil
}

// Max returns the value of the "max" field in the mutation.
func (m *HistogramMutation) Max() (r int64, exists bool) {
	v := m.max
	if v == nil {
		return
	}
	return *v, true
}

// OldMax returns the old "max" field's value of the Histogram entity.
// If the Histogram object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HistogramMutation) OldMax(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMax is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMax requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMax: %w", err)
	}
	return oldValue.Max, nil
}

// AddMax adds i to the "max" field.
func (m *HistogramMutation) AddMax(i int64) {
	if m.addmax != nil {
		*m.addmax += i
	} else {
		m.addmax = &i
	}
}

// AddedMax returns the value that was added to the "max" field in this mutation.
func (m *HistogramMutation) AddedMax() (r int64, exists bool) {
	v := m.addmax
	if v == nil {
		return
	}
	return *v, true
}

// ResetMax resets all changes to the "max" field.
func (m *HistogramMutation) ResetMax() {
	m.max = nil
	m.addmax = nil
}

// SetMean sets the "mean" field.
func (m *HistogramMutation) SetMean(f float64) {
	m.mean = &f
	m.addmean = nil
}

// Mean returns the value of the "mean" field in the mutation.
func (m *HistogramMutation) Mean() (r float64, exists bool) {
	v := m.mean
	if v == nil {
		return
	}
	return *v, true
}

// OldMean returns the old "mean" field's value of the Histogram entity.
// If the Histogram object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HistogramMutation) OldMean(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMean is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMean requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMean: %w", err)
	}
	return oldValue.Mean, nil
}

// AddMean adds f to the "mean" field.
func (m *HistogramMutation) AddMean(f float64) {
	if m.addmean != nil {
		*m.addmean += f
	} else {
		m.addmean = &f
	}
}

// AddedMean returns the value that was added to the "mean" field in this mutation.
func (m *HistogramMutation) AddedMean() (r float64, exists bool) {
	v := m.addmean
	if v == nil {
		return
	}
	return *v, true
}

// ResetMean resets all changes to the "mean" field.
func (m *HistogramMutation) ResetMean() {
	m.mean = nil
	m.addmean = nil
}

// SetStddev sets the "stddev" field.
func (m *HistogramMutation) SetStddev(f float64) {
	m.stddev = &f
	m.addstddev = nil
}

// Stddev returns the value of the "stddev" field in the mutation.
func (m *HistogramMutation) Stddev() (r float64, exists bool) {
	v := m.stddev
	if v == nil {
		return
	}
	return *v, true
}

// OldStddev returns the old "stddev" field's value of the Histogram entity.
// If the Histogram object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HistogramMutation) OldStddev(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStddev is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStddev requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStddev: %w", err)
	}
	return oldValue.Stddev, nil
}

// AddStddev adds f to the "stddev" field.
func (m *HistogramMutation) AddStddev(f float64) {
	if m.addstddev != nil {
		*m.addstddev += f
	} else {
		m.addstddev = &f
	}
}

// AddedStddev returns the value that was added to the "stddev" field in this mutation.
func (m *HistogramMutation) AddedStddev() (r float64, exists bool) {
	v := m.addstddev
	if v == nil {
		return
	}
	return *v, true
}

// ResetStddev resets all changes to the "stddev" field.
func (m *HistogramMutation) ResetStddev() {
	m.stddev = nil
	m.addstddev = nil
}

// SetMedian sets the "median" field.
func (m *HistogramMutation) SetMedian(f float64) {
	m.median = &f
	m.addmedian = nil
}

// Median returns the value of the "median" field in the mutation.
func (m *HistogramMutation) Median() (r float64, exists bool) {
	v := m.median
	if v == nil {
		return
	}
	return *v, true
}

// OldMedian returns the old "median" field's value of the Histogram entity.
// If the Histogram object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HistogramMutation) OldMedian(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMedian is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMedian requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMedian: %w", err)
	}
	return oldValue.Median, nil
}

// AddMedian adds f to the "median" field.
func (m *HistogramMutation) AddMedian(f float64) {
	if m.addmedian != nil {
		*m.addmedian += f
	} else {
		m.addmedian = &f
	}
}

// AddedMedian returns the value that was added to the "median" field in this mutation.
func (m *HistogramMutation) AddedMedian() (r float64, exists bool) {
	v := m.addmedian
	if v == nil {
		return
	}
	return *v, true
}

// ResetMedian resets all changes to the "median" field.
func (m *HistogramMutation) ResetMedian() {
	m.median = nil
	m.addmedian = nil
}

// SetP75 sets the "p75" field.
func (m *HistogramMutation) SetP75(f float64) {
	m.p75 = &f
	m.addp75 = nil
}

// P75 returns the value of the "p75" field in the mutation.
func (m *HistogramMutation) P75() (r float64, exists bool) {
	v := m.p75
	if v == nil {
		return
	}
	return *v, true
}

// OldP75 returns the old "p75" field's value of the Histogram entity.
// If the Histogram object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HistogramMutation) OldP75(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldP75 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldP75 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldP75: %w", err)
	}
	return oldValue.P75, nil
}

// AddP75 adds f to the "p75" field.
func (m *HistogramMutation) AddP75(f float64) {
	if m.addp75 != nil {
		*m.addp75 += f
	} else {
		m.addp75 = &f
	}
}

// AddedP75 returns the value that was added to the "p75" field in this mutation.
func (m *HistogramMutation) AddedP75() (r float64, exists bool) {
	v := m.addp75
	if v == nil {
		return
	}
	return *v, true
}

// ResetP75 resets all changes to the "p75" field.
func (m *HistogramMutation) ResetP75() {
	m.p75 = nil
	m.addp75 = nil
}

// SetP95 sets the "p95" field.
func (m *HistogramMutation) SetP95(f float64) {
	m.p95 = &f
	m.addp95 = nil
}

// P95 returns the value of the "p95" field in the mutation.
func (m *HistogramMutation) P95() (r float64, exists bool) {
	v := m.p95
	if v == nil {
		return
	}
	return *v, true
}

// OldP95 returns the old "p95" field's value of the Histogram entity.
// If the Histogram object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HistogramMutation) OldP95(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldP95 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldP95 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldP95: %w", err)
	}
	return oldValue.P95, nil
}

// AddP95 adds f to the "p95" field.
func (m *HistogramMutation) AddP95(f float64) {
	if m.addp95 != nil {
		*m.addp95 += f
	} else {
		m.addp95 = &f
	}
}

// AddedP95 returns the value that was added to the "p95" field in this mutation.
func (m *HistogramMutation) AddedP95() (r float64, exists bool) {
	v := m.addp95
	if v == nil {
		return
	}
	return *v, true
}

// ResetP95 resets all changes to the "p95" field.
func (m *HistogramMutation) ResetP95() {
	m.p95 = nil
	m.addp95 = nil
}

// SetP99 sets the "p99" field.
func (m *HistogramMutation) SetP99(f float64) {
	m.p99 = &f
	m.addp99 = nil
}

// P99 returns the value of the "p99" field in the mutation.
func (m *HistogramMutation) P99() (r float64, exists bool) {
	v := m.p99
	if v == nil {
		return
	}
	return *v, true
}

// OldP99 returns the old "p99" field's value of the Histogram entity.
// If the Histogram object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HistogramMutation) OldP99(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldP99 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldP99 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldP99: %w", err)
	}
	return oldValue.P99, nil
}

// AddP99 adds f to the "p99" field.
func (m *HistogramMutation) AddP99(f float64) {
	if m.addp99 != nil {
		*m.addp99 += f
	} else {
		m.addp99 = &f
	}
}

// AddedP99 returns the value that was added to the "p99" field in this mutation.
func (m *HistogramMutation) AddedP99() (r float64, exists bool) {
	v := m.addp99
	if v == nil {
		return
	}
	return *v, true
}

// ResetP99 resets all changes to the "p99" field.
func (m *HistogramMutation) ResetP99() {
	m.p99 = nil
	m.addp99 = nil
}

// SetP999 sets the "p999" field.
func (m *HistogramMutation) SetP999(f float64) {
	m.p999 = &f
	m.addp999 = nil
}

// P999 returns the value of the "p999" field in the mutation.
func (m *HistogramMutation) P999() (r float64, exists bool) {
	v := m.p999
	if v == nil {
		return
	}
	return *v, true
}

// OldP999 returns the old "p999" field's value of the Histogram entity.
// If the Histogram object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HistogramMutation) OldP999(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldP999 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldP999 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldP999: %w", err)
	}
	return oldValue.P999, nil
}

// AddP999 adds f to the "p999" field.
func (m *HistogramMutation) AddP999(f float64) {
	if m.addp999 != nil {
		*m.addp999 += f
	} else {
		m.addp999 = &f
	}
}

// AddedP999 returns the value that was added to the "p999" field in this mutation.
func (m *HistogramMutation) AddedP999() (r float64, exists bool) {
	v := m.addp999
	if v == nil {
		return
	}
	return *v, true
}

// ResetP999 resets all changes to the "p999" field.
func (m *HistogramMutation) ResetP999() {
	m.p999 = nil
	m.addp999 = nil
}

// SetWID sets the "wID" field.
func (m *HistogramMutation) SetWID(s string) {
	m.wID = &s
}

// WID returns the value of the "wID" field in the mutation.
func (m *HistogramMutation) WID() (r string, exists bool) {
	v := m.wID
	if v == nil {
		return
	}
	return *v, true
}

// OldWID returns the old "wID" field's value of the Histogram entity.
// If the Histogram object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HistogramMutation) OldWID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWID: %w", err)
	}
	return oldValue.WID, nil
}

// ResetWID resets all changes to the "wID" field.
func (m *HistogramMutation) ResetWID() {
	m.wID = nil
}

// SetMetricID sets the "metric" edge to the Metric entity by id.
func (m *HistogramMutation) SetMetricID(id int) {
	m.metric = &id
}

// ClearMetric clears the "metric" edge to the Metric entity.
func (m *HistogramMutation) ClearMetric() {
	m.clearedmetric = true
}

// MetricCleared reports if the "metric" edge to the Metric entity was cleared.
func (m *HistogramMutation) MetricCleared() bool {
	return m.clearedmetric
}

// MetricID returns the "metric" edge ID in the mutation.
func (m *HistogramMutation) MetricID() (id int, exists bool) {
	if m.metric != nil {
		return *m.metric, true
	}
	return
}

// MetricIDs returns the "metric" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// MetricID instead. It exists only for internal usage by the builders.
func (m *HistogramMutation) MetricIDs() (ids []int) {
	if id := m.metric; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetMetric resets all changes to the "metric" edge.
func (m *HistogramMutation) ResetMetric() {
	m.metric = nil
	m.clearedmetric = false
}

// Where appends a list predicates to the HistogramMutation builder.
func (m *HistogramMutation) Where(ps ...predicate.Histogram) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the HistogramMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *HistogramMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Histogram, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *HistogramMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *HistogramMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Histogram).
func (m *HistogramMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *HistogramMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m.time != nil {
		fields = append(fields, histogram.FieldTime)
	}
	if m.count != nil {
		fields = append(fields, histogram.FieldCount)
	}
	if m.min != nil {
		fields = append(fields, histogram.FieldMin)
	}
	if m.max != nil {
		fields = append(fields, histogram.FieldMax)
	}
	if m.mean != nil {
		fields = append(fields, histogram.FieldMean)
	}
	if m.stddev != nil {
		fields = append(fields, histogram.FieldStddev)
	}
	if m.median != nil {
		fields = append(fields, histogram.FieldMedian)
	}
	if m.p75 != nil {
		fields = append(fields, histogram.FieldP75)
	}
	if m.p95 != nil {
		fields = append(fields, histogram.FieldP95)
	}
	if m.p99 != nil {
		fields = append(fields, histogram.FieldP99)
	}
	if m.p999 != nil {
		fields = append(fields, histogram.FieldP999)
	}
	if m.wID != nil {
		fields = append(fields, histogram.FieldWID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *HistogramMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case histogram.FieldTime:
		return m.Time()
	case histogram.FieldCount:
		return m.Count()
	case histogram.FieldMin:
		return m.Min()
	case histogram.FieldMax:
		return m.Max()
	case histogram.FieldMean:
		return m.Mean()
	case histogram.FieldStddev:
		return m.Stddev()
	case histogram.FieldMedian:
		return m.Median()
	case histogram.FieldP75:
		return m.P75()
	case histogram.FieldP95:
		return m.P95()
	case histogram.FieldP99:
		return m.P99()
	case histogram.FieldP999:
		return m.P999()
	case histogram.FieldWID:
		return m.WID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *HistogramMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case histogram.FieldTime:
		return m.OldTime(ctx)
	case histogram.FieldCount:
		return m.OldCount(ctx)
	case histogram.FieldMin:
		return m.OldMin(ctx)
	case histogram.FieldMax:
		return m.OldMax(ctx)
	case histogram.FieldMean:
		return m.OldMean(ctx)
	case histogram.FieldStddev:
		return m.OldStddev(ctx)
	case histogram.FieldMedian:
		return m.OldMedian(ctx)
	case histogram.FieldP75:
		return m.OldP75(ctx)
	case histogram.FieldP95:
		return m.OldP95(ctx)
	case histogram.FieldP99:
		return m.OldP99(ctx)
	case histogram.FieldP999:
		return m.OldP999(ctx)
	case histogram.FieldWID:
		return m.OldWID(ctx)
	}
	return nil, fmt.Errorf("unknown Histogram field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HistogramMutation) SetField(name string, value ent.Value) error {
	switch name {
	case histogram.FieldTime:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTime(v)
		return nil
	case histogram.FieldCount:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCount(v)
		return nil
	case histogram.FieldMin:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMin(v)
		return nil
	case histogram.FieldMax:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMax(v)
		return nil
	case histogram.FieldMean:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMean(v)
		return nil
	case histogram.FieldStddev:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStddev(v)
		return nil
	case histogram.FieldMedian:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMedian(v)
		return nil
	case histogram.FieldP75:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetP75(v)
		return nil
	case histogram.FieldP95:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetP95(v)
		return nil
	case histogram.FieldP99:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetP99(v)
		return nil
	case histogram.FieldP999:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetP999(v)
		return nil
	case histogram.FieldWID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWID(v)
		return nil
	}
	return fmt.Errorf("unknown Histogram field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *HistogramMutation) AddedFields() []string {
	var fields []string
	if m.addtime != nil {
		fields = append(fields, histogram.FieldTime)
	}
	if m.addcount != nil {
		fields = append(fields, histogram.FieldCount)
	}
	if m.addmin != nil {
		fields = append(fields, histogram.FieldMin)
	}
	if m.addmax != nil {
		fields = append(fields, histogram.FieldMax)
	}
	if m.addmean != nil {
		fields = append(fields, histogram.FieldMean)
	}
	if m.addstddev != nil {
		fields = append(fields, histogram.FieldStddev)
	}
	if m.addmedian != nil {
		fields = append(fields, histogram.FieldMedian)
	}
	if m.addp75 != nil {
		fields = append(fields, histogram.FieldP75)
	}
	if m.addp95 != nil {
		fields = append(fields, histogram.FieldP95)
	}
	if m.addp99 != nil {
		fields = append(fields, histogram.FieldP99)
	}
	if m.addp999 != nil {
		fields = append(fields, histogram.FieldP999)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *HistogramMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case histogram.FieldTime:
		return m.AddedTime()
	case histogram.FieldCount:
		return m.AddedCount()
	case histogram.FieldMin:
		return m.AddedMin()
	case histogram.FieldMax:
		return m.AddedMax()
	case histogram.FieldMean:
		return m.AddedMean()
	case histogram.FieldStddev:
		return m.AddedStddev()
	case histogram.FieldMedian:
		return m.AddedMedian()
	case histogram.FieldP75:
		return m.AddedP75()
	case histogram.FieldP95:
		return m.AddedP95()
	case histogram.FieldP99:
		return m.AddedP99()
	case histogram.FieldP999:
		return m.AddedP999()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HistogramMutation) AddField(name string, value ent.Value) error {
	switch name {
	case histogram.FieldTime:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTime(v)
		return nil
	case histogram.FieldCount:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCount(v)
		return nil
	case histogram.FieldMin:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMin(v)
		return nil
	case histogram.FieldMax:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMax(v)
		return nil
	case histogram.FieldMean:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMean(v)
		return nil
	case histogram.FieldStddev:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStddev(v)
		return nil
	case histogram.FieldMedian:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMedian(v)
		return nil
	case histogram.FieldP75:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddP75(v)
		return nil
	case histogram.FieldP95:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddP95(v)
		return nil
	case histogram.FieldP99:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddP99(v)
		return nil
	case histogram.FieldP999:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddP999(v)
		return nil
	}
	return fmt.Errorf("unknown Histogram numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *HistogramMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *HistogramMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *HistogramMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Histogram nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *HistogramMutation) ResetField(name string) error {
	switch name {
	case histogram.FieldTime:
		m.ResetTime()
		return nil
	case histogram.FieldCount:
		m.ResetCount()
		return nil
	case histogram.FieldMin:
		m.ResetMin()
		return nil
	case histogram.FieldMax:
		m.ResetMax()
		return nil
	case histogram.FieldMean:
		m.ResetMean()
		return nil
	case histogram.FieldStddev:
		m.ResetStddev()
		return nil
	case histogram.FieldMedian:
		m.ResetMedian()
		return nil
	case histogram.FieldP75:
		m.ResetP75()
		return nil
	case histogram.FieldP95:
		m.ResetP95()
		return nil
	case histogram.FieldP99:
		m.ResetP99()
		return nil
	case histogram.FieldP999:
		m.ResetP999()
		return nil
	case histogram.FieldWID:
		m.ResetWID()
		return nil
	}
	return fmt.Errorf("unknown Histogram field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *HistogramMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.metric != nil {
		edges = append(edges, histogram.EdgeMetric)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *HistogramMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case histogram.EdgeMetric:
		if id := m.metric; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *HistogramMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *HistogramMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *HistogramMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedmetric {
		edges = append(edges, histogram.EdgeMetric)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *HistogramMutation) EdgeCleared(name string) bool {
	switch name {
	case histogram.EdgeMetric:
		return m.clearedmetric
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *HistogramMutation) ClearEdge(name string) error {
	switch name {
	case histogram.EdgeMetric:
		m.ClearMetric()
		return nil
	}
	return fmt.Errorf("unknown Histogram unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *HistogramMutation) ResetEdge(name string) error {
	switch name {
	case histogram.EdgeMetric:
		m.ResetMetric()
		return nil
	}
	return fmt.Errorf("unknown Histogram edge %s", name)
}

// MetricMutation represents an operation that mutates the Metric nodes in the graph.
type MetricMutation struct {
	config
	op                Op
	typ               string
	id                *int
	title             *string
	_type             *string
	clearedFields     map[string]struct{}
	graph             *int
	clearedgraph      bool
	histograms        map[int]struct{}
	removedhistograms map[int]struct{}
	clearedhistograms bool
	counters          map[int]struct{}
	removedcounters   map[int]struct{}
	clearedcounters   bool
	gauges            map[int]struct{}
	removedgauges     map[int]struct{}
	clearedgauges     bool
	done              bool
	oldValue          func(context.Context) (*Metric, error)
	predicates        []predicate.Metric
}

var _ ent.Mutation = (*MetricMutation)(nil)

// metricOption allows management of the mutation configuration using functional options.
type metricOption func(*MetricMutation)

// newMetricMutation creates new mutation for the Metric entity.
func newMetricMutation(c config, op Op, opts ...metricOption) *MetricMutation {
	m := &MetricMutation{
		config:        c,
		op:            op,
		typ:           TypeMetric,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMetricID sets the ID field of the mutation.
func withMetricID(id int) metricOption {
	return func(m *MetricMutation) {
		var (
			err   error
			once  sync.Once
			value *Metric
		)
		m.oldValue = func(ctx context.Context) (*Metric, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Metric.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMetric sets the old Metric of the mutation.
func withMetric(node *Metric) metricOption {
	return func(m *MetricMutation) {
		m.oldValue = func(context.Context) (*Metric, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MetricMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MetricMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MetricMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MetricMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Metric.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTitle sets the "title" field.
func (m *MetricMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *MetricMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Metric entity.
// If the Metric object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MetricMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *MetricMutation) ResetTitle() {
	m.title = nil
}

// SetType sets the "type" field.
func (m *MetricMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *MetricMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Metric entity.
// If the Metric object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MetricMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *MetricMutation) ResetType() {
	m._type = nil
}

// SetGraphID sets the "graph" edge to the Graph entity by id.
func (m *MetricMutation) SetGraphID(id int) {
	m.graph = &id
}

// ClearGraph clears the "graph" edge to the Graph entity.
func (m *MetricMutation) ClearGraph() {
	m.clearedgraph = true
}

// GraphCleared reports if the "graph" edge to the Graph entity was cleared.
func (m *MetricMutation) GraphCleared() bool {
	return m.clearedgraph
}

// GraphID returns the "graph" edge ID in the mutation.
func (m *MetricMutation) GraphID() (id int, exists bool) {
	if m.graph != nil {
		return *m.graph, true
	}
	return
}

// GraphIDs returns the "graph" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// GraphID instead. It exists only for internal usage by the builders.
func (m *MetricMutation) GraphIDs() (ids []int) {
	if id := m.graph; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGraph resets all changes to the "graph" edge.
func (m *MetricMutation) ResetGraph() {
	m.graph = nil
	m.clearedgraph = false
}

// AddHistogramIDs adds the "histograms" edge to the Histogram entity by ids.
func (m *MetricMutation) AddHistogramIDs(ids ...int) {
	if m.histograms == nil {
		m.histograms = make(map[int]struct{})
	}
	for i := range ids {
		m.histograms[ids[i]] = struct{}{}
	}
}

// ClearHistograms clears the "histograms" edge to the Histogram entity.
func (m *MetricMutation) ClearHistograms() {
	m.clearedhistograms = true
}

// HistogramsCleared reports if the "histograms" edge to the Histogram entity was cleared.
func (m *MetricMutation) HistogramsCleared() bool {
	return m.clearedhistograms
}

// RemoveHistogramIDs removes the "histograms" edge to the Histogram entity by IDs.
func (m *MetricMutation) RemoveHistogramIDs(ids ...int) {
	if m.removedhistograms == nil {
		m.removedhistograms = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.histograms, ids[i])
		m.removedhistograms[ids[i]] = struct{}{}
	}
}

// RemovedHistograms returns the removed IDs of the "histograms" edge to the Histogram entity.
func (m *MetricMutation) RemovedHistogramsIDs() (ids []int) {
	for id := range m.removedhistograms {
		ids = append(ids, id)
	}
	return
}

// HistogramsIDs returns the "histograms" edge IDs in the mutation.
func (m *MetricMutation) HistogramsIDs() (ids []int) {
	for id := range m.histograms {
		ids = append(ids, id)
	}
	return
}

// ResetHistograms resets all changes to the "histograms" edge.
func (m *MetricMutation) ResetHistograms() {
	m.histograms = nil
	m.clearedhistograms = false
	m.removedhistograms = nil
}

// AddCounterIDs adds the "counters" edge to the Counter entity by ids.
func (m *MetricMutation) AddCounterIDs(ids ...int) {
	if m.counters == nil {
		m.counters = make(map[int]struct{})
	}
	for i := range ids {
		m.counters[ids[i]] = struct{}{}
	}
}

// ClearCounters clears the "counters" edge to the Counter entity.
func (m *MetricMutation) ClearCounters() {
	m.clearedcounters = true
}

// CountersCleared reports if the "counters" edge to the Counter entity was cleared.
func (m *MetricMutation) CountersCleared() bool {
	return m.clearedcounters
}

// RemoveCounterIDs removes the "counters" edge to the Counter entity by IDs.
func (m *MetricMutation) RemoveCounterIDs(ids ...int) {
	if m.removedcounters == nil {
		m.removedcounters = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.counters, ids[i])
		m.removedcounters[ids[i]] = struct{}{}
	}
}

// RemovedCounters returns the removed IDs of the "counters" edge to the Counter entity.
func (m *MetricMutation) RemovedCountersIDs() (ids []int) {
	for id := range m.removedcounters {
		ids = append(ids, id)
	}
	return
}

// CountersIDs returns the "counters" edge IDs in the mutation.
func (m *MetricMutation) CountersIDs() (ids []int) {
	for id := range m.counters {
		ids = append(ids, id)
	}
	return
}

// ResetCounters resets all changes to the "counters" edge.
func (m *MetricMutation) ResetCounters() {
	m.counters = nil
	m.clearedcounters = false
	m.removedcounters = nil
}

// AddGaugeIDs adds the "gauges" edge to the Gauge entity by ids.
func (m *MetricMutation) AddGaugeIDs(ids ...int) {
	if m.gauges == nil {
		m.gauges = make(map[int]struct{})
	}
	for i := range ids {
		m.gauges[ids[i]] = struct{}{}
	}
}

// ClearGauges clears the "gauges" edge to the Gauge entity.
func (m *MetricMutation) ClearGauges() {
	m.clearedgauges = true
}

// GaugesCleared reports if the "gauges" edge to the Gauge entity was cleared.
func (m *MetricMutation) GaugesCleared() bool {
	return m.clearedgauges
}

// RemoveGaugeIDs removes the "gauges" edge to the Gauge entity by IDs.
func (m *MetricMutation) RemoveGaugeIDs(ids ...int) {
	if m.removedgauges == nil {
		m.removedgauges = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.gauges, ids[i])
		m.removedgauges[ids[i]] = struct{}{}
	}
}

// RemovedGauges returns the removed IDs of the "gauges" edge to the Gauge entity.
func (m *MetricMutation) RemovedGaugesIDs() (ids []int) {
	for id := range m.removedgauges {
		ids = append(ids, id)
	}
	return
}

// GaugesIDs returns the "gauges" edge IDs in the mutation.
func (m *MetricMutation) GaugesIDs() (ids []int) {
	for id := range m.gauges {
		ids = append(ids, id)
	}
	return
}

// ResetGauges resets all changes to the "gauges" edge.
func (m *MetricMutation) ResetGauges() {
	m.gauges = nil
	m.clearedgauges = false
	m.removedgauges = nil
}

// Where appends a list predicates to the MetricMutation builder.
func (m *MetricMutation) Where(ps ...predicate.Metric) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MetricMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MetricMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Metric, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MetricMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MetricMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Metric).
func (m *MetricMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MetricMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.title != nil {
		fields = append(fields, metric.FieldTitle)
	}
	if m._type != nil {
		fields = append(fields, metric.FieldType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MetricMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case metric.FieldTitle:
		return m.Title()
	case metric.FieldType:
		return m.GetType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MetricMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case metric.FieldTitle:
		return m.OldTitle(ctx)
	case metric.FieldType:
		return m.OldType(ctx)
	}
	return nil, fmt.Errorf("unknown Metric field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MetricMutation) SetField(name string, value ent.Value) error {
	switch name {
	case metric.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case metric.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	}
	return fmt.Errorf("unknown Metric field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MetricMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MetricMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MetricMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Metric numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MetricMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MetricMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MetricMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Metric nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MetricMutation) ResetField(name string) error {
	switch name {
	case metric.FieldTitle:
		m.ResetTitle()
		return nil
	case metric.FieldType:
		m.ResetType()
		return nil
	}
	return fmt.Errorf("unknown Metric field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MetricMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.graph != nil {
		edges = append(edges, metric.EdgeGraph)
	}
	if m.histograms != nil {
		edges = append(edges, metric.EdgeHistograms)
	}
	if m.counters != nil {
		edges = append(edges, metric.EdgeCounters)
	}
	if m.gauges != nil {
		edges = append(edges, metric.EdgeGauges)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MetricMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case metric.EdgeGraph:
		if id := m.graph; id != nil {
			return []ent.Value{*id}
		}
	case metric.EdgeHistograms:
		ids := make([]ent.Value, 0, len(m.histograms))
		for id := range m.histograms {
			ids = append(ids, id)
		}
		return ids
	case metric.EdgeCounters:
		ids := make([]ent.Value, 0, len(m.counters))
		for id := range m.counters {
			ids = append(ids, id)
		}
		return ids
	case metric.EdgeGauges:
		ids := make([]ent.Value, 0, len(m.gauges))
		for id := range m.gauges {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MetricMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedhistograms != nil {
		edges = append(edges, metric.EdgeHistograms)
	}
	if m.removedcounters != nil {
		edges = append(edges, metric.EdgeCounters)
	}
	if m.removedgauges != nil {
		edges = append(edges, metric.EdgeGauges)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MetricMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case metric.EdgeHistograms:
		ids := make([]ent.Value, 0, len(m.removedhistograms))
		for id := range m.removedhistograms {
			ids = append(ids, id)
		}
		return ids
	case metric.EdgeCounters:
		ids := make([]ent.Value, 0, len(m.removedcounters))
		for id := range m.removedcounters {
			ids = append(ids, id)
		}
		return ids
	case metric.EdgeGauges:
		ids := make([]ent.Value, 0, len(m.removedgauges))
		for id := range m.removedgauges {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MetricMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedgraph {
		edges = append(edges, metric.EdgeGraph)
	}
	if m.clearedhistograms {
		edges = append(edges, metric.EdgeHistograms)
	}
	if m.clearedcounters {
		edges = append(edges, metric.EdgeCounters)
	}
	if m.clearedgauges {
		edges = append(edges, metric.EdgeGauges)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MetricMutation) EdgeCleared(name string) bool {
	switch name {
	case metric.EdgeGraph:
		return m.clearedgraph
	case metric.EdgeHistograms:
		return m.clearedhistograms
	case metric.EdgeCounters:
		return m.clearedcounters
	case metric.EdgeGauges:
		return m.clearedgauges
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MetricMutation) ClearEdge(name string) error {
	switch name {
	case metric.EdgeGraph:
		m.ClearGraph()
		return nil
	}
	return fmt.Errorf("unknown Metric unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MetricMutation) ResetEdge(name string) error {
	switch name {
	case metric.EdgeGraph:
		m.ResetGraph()
		return nil
	case metric.EdgeHistograms:
		m.ResetHistograms()
		return nil
	case metric.EdgeCounters:
		m.ResetCounters()
		return nil
	case metric.EdgeGauges:
		m.ResetGauges()
		return nil
	}
	return fmt.Errorf("unknown Metric edge %s", name)
}

// TagMutation represents an operation that mutates the Tag nodes in the graph.
type TagMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	name               *string
	clearedFields      map[string]struct{}
	application        *int
	clearedapplication bool
	done               bool
	oldValue           func(context.Context) (*Tag, error)
	predicates         []predicate.Tag
}

var _ ent.Mutation = (*TagMutation)(nil)

// tagOption allows management of the mutation configuration using functional options.
type tagOption func(*TagMutation)

// newTagMutation creates new mutation for the Tag entity.
func newTagMutation(c config, op Op, opts ...tagOption) *TagMutation {
	m := &TagMutation{
		config:        c,
		op:            op,
		typ:           TypeTag,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTagID sets the ID field of the mutation.
func withTagID(id int) tagOption {
	return func(m *TagMutation) {
		var (
			err   error
			once  sync.Once
			value *Tag
		)
		m.oldValue = func(ctx context.Context) (*Tag, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Tag.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTag sets the old Tag of the mutation.
func withTag(node *Tag) tagOption {
	return func(m *TagMutation) {
		m.oldValue = func(context.Context) (*Tag, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TagMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TagMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TagMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TagMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Tag.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *TagMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TagMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Tag entity.
// If the Tag object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TagMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *TagMutation) ResetName() {
	m.name = nil
}

// SetApplicationID sets the "application" edge to the Application entity by id.
func (m *TagMutation) SetApplicationID(id int) {
	m.application = &id
}

// ClearApplication clears the "application" edge to the Application entity.
func (m *TagMutation) ClearApplication() {
	m.clearedapplication = true
}

// ApplicationCleared reports if the "application" edge to the Application entity was cleared.
func (m *TagMutation) ApplicationCleared() bool {
	return m.clearedapplication
}

// ApplicationID returns the "application" edge ID in the mutation.
func (m *TagMutation) ApplicationID() (id int, exists bool) {
	if m.application != nil {
		return *m.application, true
	}
	return
}

// ApplicationIDs returns the "application" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ApplicationID instead. It exists only for internal usage by the builders.
func (m *TagMutation) ApplicationIDs() (ids []int) {
	if id := m.application; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetApplication resets all changes to the "application" edge.
func (m *TagMutation) ResetApplication() {
	m.application = nil
	m.clearedapplication = false
}

// Where appends a list predicates to the TagMutation builder.
func (m *TagMutation) Where(ps ...predicate.Tag) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TagMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TagMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Tag, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TagMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TagMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Tag).
func (m *TagMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TagMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, tag.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TagMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case tag.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TagMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case tag.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Tag field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TagMutation) SetField(name string, value ent.Value) error {
	switch name {
	case tag.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Tag field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TagMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TagMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TagMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Tag numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TagMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TagMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TagMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Tag nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TagMutation) ResetField(name string) error {
	switch name {
	case tag.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Tag field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TagMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.application != nil {
		edges = append(edges, tag.EdgeApplication)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TagMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case tag.EdgeApplication:
		if id := m.application; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TagMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TagMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TagMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedapplication {
		edges = append(edges, tag.EdgeApplication)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TagMutation) EdgeCleared(name string) bool {
	switch name {
	case tag.EdgeApplication:
		return m.clearedapplication
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TagMutation) ClearEdge(name string) error {
	switch name {
	case tag.EdgeApplication:
		m.ClearApplication()
		return nil
	}
	return fmt.Errorf("unknown Tag unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TagMutation) ResetEdge(name string) error {
	switch name {
	case tag.EdgeApplication:
		m.ResetApplication()
		return nil
	}
	return fmt.Errorf("unknown Tag edge %s", name)
}
