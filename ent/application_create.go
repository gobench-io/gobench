// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gobench-io/gobench/v2/ent/application"
	"github.com/gobench-io/gobench/v2/ent/group"
	"github.com/gobench-io/gobench/v2/ent/tag"
)

// ApplicationCreate is the builder for creating a Application entity.
type ApplicationCreate struct {
	config
	mutation *ApplicationMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (ac *ApplicationCreate) SetName(s string) *ApplicationCreate {
	ac.mutation.SetName(s)
	return ac
}

// SetStatus sets the "status" field.
func (ac *ApplicationCreate) SetStatus(s string) *ApplicationCreate {
	ac.mutation.SetStatus(s)
	return ac
}

// SetCreatedAt sets the "created_at" field.
func (ac *ApplicationCreate) SetCreatedAt(t time.Time) *ApplicationCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ac *ApplicationCreate) SetNillableCreatedAt(t *time.Time) *ApplicationCreate {
	if t != nil {
		ac.SetCreatedAt(*t)
	}
	return ac
}

// SetStartedAt sets the "started_at" field.
func (ac *ApplicationCreate) SetStartedAt(t time.Time) *ApplicationCreate {
	ac.mutation.SetStartedAt(t)
	return ac
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (ac *ApplicationCreate) SetNillableStartedAt(t *time.Time) *ApplicationCreate {
	if t != nil {
		ac.SetStartedAt(*t)
	}
	return ac
}

// SetUpdatedAt sets the "updated_at" field.
func (ac *ApplicationCreate) SetUpdatedAt(t time.Time) *ApplicationCreate {
	ac.mutation.SetUpdatedAt(t)
	return ac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ac *ApplicationCreate) SetNillableUpdatedAt(t *time.Time) *ApplicationCreate {
	if t != nil {
		ac.SetUpdatedAt(*t)
	}
	return ac
}

// SetScenario sets the "scenario" field.
func (ac *ApplicationCreate) SetScenario(s string) *ApplicationCreate {
	ac.mutation.SetScenario(s)
	return ac
}

// SetGomod sets the "gomod" field.
func (ac *ApplicationCreate) SetGomod(s string) *ApplicationCreate {
	ac.mutation.SetGomod(s)
	return ac
}

// SetNillableGomod sets the "gomod" field if the given value is not nil.
func (ac *ApplicationCreate) SetNillableGomod(s *string) *ApplicationCreate {
	if s != nil {
		ac.SetGomod(*s)
	}
	return ac
}

// SetGosum sets the "gosum" field.
func (ac *ApplicationCreate) SetGosum(s string) *ApplicationCreate {
	ac.mutation.SetGosum(s)
	return ac
}

// SetNillableGosum sets the "gosum" field if the given value is not nil.
func (ac *ApplicationCreate) SetNillableGosum(s *string) *ApplicationCreate {
	if s != nil {
		ac.SetGosum(*s)
	}
	return ac
}

// SetVu sets the "vu" field.
func (ac *ApplicationCreate) SetVu(i int) *ApplicationCreate {
	ac.mutation.SetVu(i)
	return ac
}

// SetNillableVu sets the "vu" field if the given value is not nil.
func (ac *ApplicationCreate) SetNillableVu(i *int) *ApplicationCreate {
	if i != nil {
		ac.SetVu(*i)
	}
	return ac
}

// AddGroupIDs adds the "groups" edge to the Group entity by IDs.
func (ac *ApplicationCreate) AddGroupIDs(ids ...int) *ApplicationCreate {
	ac.mutation.AddGroupIDs(ids...)
	return ac
}

// AddGroups adds the "groups" edges to the Group entity.
func (ac *ApplicationCreate) AddGroups(g ...*Group) *ApplicationCreate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ac.AddGroupIDs(ids...)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (ac *ApplicationCreate) AddTagIDs(ids ...int) *ApplicationCreate {
	ac.mutation.AddTagIDs(ids...)
	return ac
}

// AddTags adds the "tags" edges to the Tag entity.
func (ac *ApplicationCreate) AddTags(t ...*Tag) *ApplicationCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ac.AddTagIDs(ids...)
}

// Mutation returns the ApplicationMutation object of the builder.
func (ac *ApplicationCreate) Mutation() *ApplicationMutation {
	return ac.mutation
}

// Save creates the Application in the database.
func (ac *ApplicationCreate) Save(ctx context.Context) (*Application, error) {
	ac.defaults()
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *ApplicationCreate) SaveX(ctx context.Context) *Application {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *ApplicationCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *ApplicationCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *ApplicationCreate) defaults() {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		v := application.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		v := application.DefaultUpdatedAt()
		ac.mutation.SetUpdatedAt(v)
	}
	if _, ok := ac.mutation.Gomod(); !ok {
		v := application.DefaultGomod
		ac.mutation.SetGomod(v)
	}
	if _, ok := ac.mutation.Gosum(); !ok {
		v := application.DefaultGosum
		ac.mutation.SetGosum(v)
	}
	if _, ok := ac.mutation.Vu(); !ok {
		v := application.DefaultVu
		ac.mutation.SetVu(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *ApplicationCreate) check() error {
	if _, ok := ac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Application.name"`)}
	}
	if _, ok := ac.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Application.status"`)}
	}
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Application.created_at"`)}
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Application.updated_at"`)}
	}
	if _, ok := ac.mutation.Scenario(); !ok {
		return &ValidationError{Name: "scenario", err: errors.New(`ent: missing required field "Application.scenario"`)}
	}
	if _, ok := ac.mutation.Gomod(); !ok {
		return &ValidationError{Name: "gomod", err: errors.New(`ent: missing required field "Application.gomod"`)}
	}
	if _, ok := ac.mutation.Gosum(); !ok {
		return &ValidationError{Name: "gosum", err: errors.New(`ent: missing required field "Application.gosum"`)}
	}
	if _, ok := ac.mutation.Vu(); !ok {
		return &ValidationError{Name: "vu", err: errors.New(`ent: missing required field "Application.vu"`)}
	}
	if v, ok := ac.mutation.Vu(); ok {
		if err := application.VuValidator(v); err != nil {
			return &ValidationError{Name: "vu", err: fmt.Errorf(`ent: validator failed for field "Application.vu": %w`, err)}
		}
	}
	return nil
}

func (ac *ApplicationCreate) sqlSave(ctx context.Context) (*Application, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *ApplicationCreate) createSpec() (*Application, *sqlgraph.CreateSpec) {
	var (
		_node = &Application{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(application.Table, sqlgraph.NewFieldSpec(application.FieldID, field.TypeInt))
	)
	if value, ok := ac.mutation.Name(); ok {
		_spec.SetField(application.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ac.mutation.Status(); ok {
		_spec.SetField(application.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.SetField(application.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.StartedAt(); ok {
		_spec.SetField(application.FieldStartedAt, field.TypeTime, value)
		_node.StartedAt = value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.SetField(application.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ac.mutation.Scenario(); ok {
		_spec.SetField(application.FieldScenario, field.TypeString, value)
		_node.Scenario = value
	}
	if value, ok := ac.mutation.Gomod(); ok {
		_spec.SetField(application.FieldGomod, field.TypeString, value)
		_node.Gomod = value
	}
	if value, ok := ac.mutation.Gosum(); ok {
		_spec.SetField(application.FieldGosum, field.TypeString, value)
		_node.Gosum = value
	}
	if value, ok := ac.mutation.Vu(); ok {
		_spec.SetField(application.FieldVu, field.TypeInt, value)
		_node.Vu = value
	}
	if nodes := ac.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   application.GroupsTable,
			Columns: []string{application.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   application.TagsTable,
			Columns: []string{application.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ApplicationCreateBulk is the builder for creating many Application entities in bulk.
type ApplicationCreateBulk struct {
	config
	builders []*ApplicationCreate
}

// Save creates the Application entities in the database.
func (acb *ApplicationCreateBulk) Save(ctx context.Context) ([]*Application, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Application, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ApplicationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *ApplicationCreateBulk) SaveX(ctx context.Context) []*Application {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *ApplicationCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *ApplicationCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
