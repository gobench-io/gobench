// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/gobench-io/gobench/v2/ent/gauge"
	"github.com/gobench-io/gobench/v2/ent/metric"
)

// Gauge is the model entity for the Gauge schema.
type Gauge struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Time holds the value of the "time" field.
	Time int64 `json:"time"`
	// Value holds the value of the "value" field.
	Value int64 `json:"value"`
	// WID holds the value of the "wID" field.
	WID string `json:"wId"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GaugeQuery when eager-loading is set.
	Edges         GaugeEdges `json:"edges"`
	metric_gauges *int
	selectValues  sql.SelectValues
}

// GaugeEdges holds the relations/edges for other nodes in the graph.
type GaugeEdges struct {
	// Metric holds the value of the metric edge.
	Metric *Metric `json:"metric,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// MetricOrErr returns the Metric value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GaugeEdges) MetricOrErr() (*Metric, error) {
	if e.loadedTypes[0] {
		if e.Metric == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: metric.Label}
		}
		return e.Metric, nil
	}
	return nil, &NotLoadedError{edge: "metric"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Gauge) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case gauge.FieldID, gauge.FieldTime, gauge.FieldValue:
			values[i] = new(sql.NullInt64)
		case gauge.FieldWID:
			values[i] = new(sql.NullString)
		case gauge.ForeignKeys[0]: // metric_gauges
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Gauge fields.
func (ga *Gauge) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case gauge.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ga.ID = int(value.Int64)
		case gauge.FieldTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field time", values[i])
			} else if value.Valid {
				ga.Time = value.Int64
			}
		case gauge.FieldValue:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				ga.Value = value.Int64
			}
		case gauge.FieldWID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field wID", values[i])
			} else if value.Valid {
				ga.WID = value.String
			}
		case gauge.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field metric_gauges", value)
			} else if value.Valid {
				ga.metric_gauges = new(int)
				*ga.metric_gauges = int(value.Int64)
			}
		default:
			ga.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the Gauge.
// This includes values selected through modifiers, order, etc.
func (ga *Gauge) GetValue(name string) (ent.Value, error) {
	return ga.selectValues.Get(name)
}

// QueryMetric queries the "metric" edge of the Gauge entity.
func (ga *Gauge) QueryMetric() *MetricQuery {
	return NewGaugeClient(ga.config).QueryMetric(ga)
}

// Update returns a builder for updating this Gauge.
// Note that you need to call Gauge.Unwrap() before calling this method if this Gauge
// was returned from a transaction, and the transaction was committed or rolled back.
func (ga *Gauge) Update() *GaugeUpdateOne {
	return NewGaugeClient(ga.config).UpdateOne(ga)
}

// Unwrap unwraps the Gauge entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ga *Gauge) Unwrap() *Gauge {
	_tx, ok := ga.config.driver.(*txDriver)
	if !ok {
		panic("ent: Gauge is not a transactional entity")
	}
	ga.config.driver = _tx.drv
	return ga
}

// String implements the fmt.Stringer.
func (ga *Gauge) String() string {
	var builder strings.Builder
	builder.WriteString("Gauge(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ga.ID))
	builder.WriteString("time=")
	builder.WriteString(fmt.Sprintf("%v", ga.Time))
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(fmt.Sprintf("%v", ga.Value))
	builder.WriteString(", ")
	builder.WriteString("wID=")
	builder.WriteString(ga.WID)
	builder.WriteByte(')')
	return builder.String()
}

// Gauges is a parsable slice of Gauge.
type Gauges []*Gauge
