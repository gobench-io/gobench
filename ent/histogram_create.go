// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gobench-io/gobench/v2/ent/histogram"
	"github.com/gobench-io/gobench/v2/ent/metric"
)

// HistogramCreate is the builder for creating a Histogram entity.
type HistogramCreate struct {
	config
	mutation *HistogramMutation
	hooks    []Hook
}

// SetTime sets the "time" field.
func (hc *HistogramCreate) SetTime(i int64) *HistogramCreate {
	hc.mutation.SetTime(i)
	return hc
}

// SetCount sets the "count" field.
func (hc *HistogramCreate) SetCount(i int64) *HistogramCreate {
	hc.mutation.SetCount(i)
	return hc
}

// SetMin sets the "min" field.
func (hc *HistogramCreate) SetMin(i int64) *HistogramCreate {
	hc.mutation.SetMin(i)
	return hc
}

// SetMax sets the "max" field.
func (hc *HistogramCreate) SetMax(i int64) *HistogramCreate {
	hc.mutation.SetMax(i)
	return hc
}

// SetMean sets the "mean" field.
func (hc *HistogramCreate) SetMean(f float64) *HistogramCreate {
	hc.mutation.SetMean(f)
	return hc
}

// SetStddev sets the "stddev" field.
func (hc *HistogramCreate) SetStddev(f float64) *HistogramCreate {
	hc.mutation.SetStddev(f)
	return hc
}

// SetMedian sets the "median" field.
func (hc *HistogramCreate) SetMedian(f float64) *HistogramCreate {
	hc.mutation.SetMedian(f)
	return hc
}

// SetP75 sets the "p75" field.
func (hc *HistogramCreate) SetP75(f float64) *HistogramCreate {
	hc.mutation.SetP75(f)
	return hc
}

// SetP95 sets the "p95" field.
func (hc *HistogramCreate) SetP95(f float64) *HistogramCreate {
	hc.mutation.SetP95(f)
	return hc
}

// SetP99 sets the "p99" field.
func (hc *HistogramCreate) SetP99(f float64) *HistogramCreate {
	hc.mutation.SetP99(f)
	return hc
}

// SetP999 sets the "p999" field.
func (hc *HistogramCreate) SetP999(f float64) *HistogramCreate {
	hc.mutation.SetP999(f)
	return hc
}

// SetWID sets the "wID" field.
func (hc *HistogramCreate) SetWID(s string) *HistogramCreate {
	hc.mutation.SetWID(s)
	return hc
}

// SetMetricID sets the "metric" edge to the Metric entity by ID.
func (hc *HistogramCreate) SetMetricID(id int) *HistogramCreate {
	hc.mutation.SetMetricID(id)
	return hc
}

// SetNillableMetricID sets the "metric" edge to the Metric entity by ID if the given value is not nil.
func (hc *HistogramCreate) SetNillableMetricID(id *int) *HistogramCreate {
	if id != nil {
		hc = hc.SetMetricID(*id)
	}
	return hc
}

// SetMetric sets the "metric" edge to the Metric entity.
func (hc *HistogramCreate) SetMetric(m *Metric) *HistogramCreate {
	return hc.SetMetricID(m.ID)
}

// Mutation returns the HistogramMutation object of the builder.
func (hc *HistogramCreate) Mutation() *HistogramMutation {
	return hc.mutation
}

// Save creates the Histogram in the database.
func (hc *HistogramCreate) Save(ctx context.Context) (*Histogram, error) {
	return withHooks(ctx, hc.sqlSave, hc.mutation, hc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (hc *HistogramCreate) SaveX(ctx context.Context) *Histogram {
	v, err := hc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hc *HistogramCreate) Exec(ctx context.Context) error {
	_, err := hc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hc *HistogramCreate) ExecX(ctx context.Context) {
	if err := hc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hc *HistogramCreate) check() error {
	if _, ok := hc.mutation.Time(); !ok {
		return &ValidationError{Name: "time", err: errors.New(`ent: missing required field "Histogram.time"`)}
	}
	if _, ok := hc.mutation.Count(); !ok {
		return &ValidationError{Name: "count", err: errors.New(`ent: missing required field "Histogram.count"`)}
	}
	if _, ok := hc.mutation.Min(); !ok {
		return &ValidationError{Name: "min", err: errors.New(`ent: missing required field "Histogram.min"`)}
	}
	if _, ok := hc.mutation.Max(); !ok {
		return &ValidationError{Name: "max", err: errors.New(`ent: missing required field "Histogram.max"`)}
	}
	if _, ok := hc.mutation.Mean(); !ok {
		return &ValidationError{Name: "mean", err: errors.New(`ent: missing required field "Histogram.mean"`)}
	}
	if _, ok := hc.mutation.Stddev(); !ok {
		return &ValidationError{Name: "stddev", err: errors.New(`ent: missing required field "Histogram.stddev"`)}
	}
	if _, ok := hc.mutation.Median(); !ok {
		return &ValidationError{Name: "median", err: errors.New(`ent: missing required field "Histogram.median"`)}
	}
	if _, ok := hc.mutation.P75(); !ok {
		return &ValidationError{Name: "p75", err: errors.New(`ent: missing required field "Histogram.p75"`)}
	}
	if _, ok := hc.mutation.P95(); !ok {
		return &ValidationError{Name: "p95", err: errors.New(`ent: missing required field "Histogram.p95"`)}
	}
	if _, ok := hc.mutation.P99(); !ok {
		return &ValidationError{Name: "p99", err: errors.New(`ent: missing required field "Histogram.p99"`)}
	}
	if _, ok := hc.mutation.P999(); !ok {
		return &ValidationError{Name: "p999", err: errors.New(`ent: missing required field "Histogram.p999"`)}
	}
	if _, ok := hc.mutation.WID(); !ok {
		return &ValidationError{Name: "wID", err: errors.New(`ent: missing required field "Histogram.wID"`)}
	}
	return nil
}

func (hc *HistogramCreate) sqlSave(ctx context.Context) (*Histogram, error) {
	if err := hc.check(); err != nil {
		return nil, err
	}
	_node, _spec := hc.createSpec()
	if err := sqlgraph.CreateNode(ctx, hc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	hc.mutation.id = &_node.ID
	hc.mutation.done = true
	return _node, nil
}

func (hc *HistogramCreate) createSpec() (*Histogram, *sqlgraph.CreateSpec) {
	var (
		_node = &Histogram{config: hc.config}
		_spec = sqlgraph.NewCreateSpec(histogram.Table, sqlgraph.NewFieldSpec(histogram.FieldID, field.TypeInt))
	)
	if value, ok := hc.mutation.Time(); ok {
		_spec.SetField(histogram.FieldTime, field.TypeInt64, value)
		_node.Time = value
	}
	if value, ok := hc.mutation.Count(); ok {
		_spec.SetField(histogram.FieldCount, field.TypeInt64, value)
		_node.Count = value
	}
	if value, ok := hc.mutation.Min(); ok {
		_spec.SetField(histogram.FieldMin, field.TypeInt64, value)
		_node.Min = value
	}
	if value, ok := hc.mutation.Max(); ok {
		_spec.SetField(histogram.FieldMax, field.TypeInt64, value)
		_node.Max = value
	}
	if value, ok := hc.mutation.Mean(); ok {
		_spec.SetField(histogram.FieldMean, field.TypeFloat64, value)
		_node.Mean = value
	}
	if value, ok := hc.mutation.Stddev(); ok {
		_spec.SetField(histogram.FieldStddev, field.TypeFloat64, value)
		_node.Stddev = value
	}
	if value, ok := hc.mutation.Median(); ok {
		_spec.SetField(histogram.FieldMedian, field.TypeFloat64, value)
		_node.Median = value
	}
	if value, ok := hc.mutation.P75(); ok {
		_spec.SetField(histogram.FieldP75, field.TypeFloat64, value)
		_node.P75 = value
	}
	if value, ok := hc.mutation.P95(); ok {
		_spec.SetField(histogram.FieldP95, field.TypeFloat64, value)
		_node.P95 = value
	}
	if value, ok := hc.mutation.P99(); ok {
		_spec.SetField(histogram.FieldP99, field.TypeFloat64, value)
		_node.P99 = value
	}
	if value, ok := hc.mutation.P999(); ok {
		_spec.SetField(histogram.FieldP999, field.TypeFloat64, value)
		_node.P999 = value
	}
	if value, ok := hc.mutation.WID(); ok {
		_spec.SetField(histogram.FieldWID, field.TypeString, value)
		_node.WID = value
	}
	if nodes := hc.mutation.MetricIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   histogram.MetricTable,
			Columns: []string{histogram.MetricColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(metric.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.metric_histograms = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// HistogramCreateBulk is the builder for creating many Histogram entities in bulk.
type HistogramCreateBulk struct {
	config
	builders []*HistogramCreate
}

// Save creates the Histogram entities in the database.
func (hcb *HistogramCreateBulk) Save(ctx context.Context) ([]*Histogram, error) {
	specs := make([]*sqlgraph.CreateSpec, len(hcb.builders))
	nodes := make([]*Histogram, len(hcb.builders))
	mutators := make([]Mutator, len(hcb.builders))
	for i := range hcb.builders {
		func(i int, root context.Context) {
			builder := hcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HistogramMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hcb *HistogramCreateBulk) SaveX(ctx context.Context) []*Histogram {
	v, err := hcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hcb *HistogramCreateBulk) Exec(ctx context.Context) error {
	_, err := hcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hcb *HistogramCreateBulk) ExecX(ctx context.Context) {
	if err := hcb.Exec(ctx); err != nil {
		panic(err)
	}
}
