// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gobench-io/gobench/v2/ent/graph"
	"github.com/gobench-io/gobench/v2/ent/group"
	"github.com/gobench-io/gobench/v2/ent/metric"
	"github.com/gobench-io/gobench/v2/ent/predicate"
)

// GraphUpdate is the builder for updating Graph entities.
type GraphUpdate struct {
	config
	hooks    []Hook
	mutation *GraphMutation
}

// Where appends a list predicates to the GraphUpdate builder.
func (gu *GraphUpdate) Where(ps ...predicate.Graph) *GraphUpdate {
	gu.mutation.Where(ps...)
	return gu
}

// SetUnit sets the "unit" field.
func (gu *GraphUpdate) SetUnit(s string) *GraphUpdate {
	gu.mutation.SetUnit(s)
	return gu
}

// SetGroupID sets the "group" edge to the Group entity by ID.
func (gu *GraphUpdate) SetGroupID(id int) *GraphUpdate {
	gu.mutation.SetGroupID(id)
	return gu
}

// SetNillableGroupID sets the "group" edge to the Group entity by ID if the given value is not nil.
func (gu *GraphUpdate) SetNillableGroupID(id *int) *GraphUpdate {
	if id != nil {
		gu = gu.SetGroupID(*id)
	}
	return gu
}

// SetGroup sets the "group" edge to the Group entity.
func (gu *GraphUpdate) SetGroup(g *Group) *GraphUpdate {
	return gu.SetGroupID(g.ID)
}

// AddMetricIDs adds the "metrics" edge to the Metric entity by IDs.
func (gu *GraphUpdate) AddMetricIDs(ids ...int) *GraphUpdate {
	gu.mutation.AddMetricIDs(ids...)
	return gu
}

// AddMetrics adds the "metrics" edges to the Metric entity.
func (gu *GraphUpdate) AddMetrics(m ...*Metric) *GraphUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return gu.AddMetricIDs(ids...)
}

// Mutation returns the GraphMutation object of the builder.
func (gu *GraphUpdate) Mutation() *GraphMutation {
	return gu.mutation
}

// ClearGroup clears the "group" edge to the Group entity.
func (gu *GraphUpdate) ClearGroup() *GraphUpdate {
	gu.mutation.ClearGroup()
	return gu
}

// ClearMetrics clears all "metrics" edges to the Metric entity.
func (gu *GraphUpdate) ClearMetrics() *GraphUpdate {
	gu.mutation.ClearMetrics()
	return gu
}

// RemoveMetricIDs removes the "metrics" edge to Metric entities by IDs.
func (gu *GraphUpdate) RemoveMetricIDs(ids ...int) *GraphUpdate {
	gu.mutation.RemoveMetricIDs(ids...)
	return gu
}

// RemoveMetrics removes "metrics" edges to Metric entities.
func (gu *GraphUpdate) RemoveMetrics(m ...*Metric) *GraphUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return gu.RemoveMetricIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gu *GraphUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, gu.sqlSave, gu.mutation, gu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gu *GraphUpdate) SaveX(ctx context.Context) int {
	affected, err := gu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gu *GraphUpdate) Exec(ctx context.Context) error {
	_, err := gu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gu *GraphUpdate) ExecX(ctx context.Context) {
	if err := gu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gu *GraphUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(graph.Table, graph.Columns, sqlgraph.NewFieldSpec(graph.FieldID, field.TypeInt))
	if ps := gu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gu.mutation.Unit(); ok {
		_spec.SetField(graph.FieldUnit, field.TypeString, value)
	}
	if gu.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   graph.GroupTable,
			Columns: []string{graph.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   graph.GroupTable,
			Columns: []string{graph.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.MetricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   graph.MetricsTable,
			Columns: []string{graph.MetricsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(metric.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedMetricsIDs(); len(nodes) > 0 && !gu.mutation.MetricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   graph.MetricsTable,
			Columns: []string{graph.MetricsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(metric.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.MetricsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   graph.MetricsTable,
			Columns: []string{graph.MetricsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(metric.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{graph.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gu.mutation.done = true
	return n, nil
}

// GraphUpdateOne is the builder for updating a single Graph entity.
type GraphUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GraphMutation
}

// SetUnit sets the "unit" field.
func (guo *GraphUpdateOne) SetUnit(s string) *GraphUpdateOne {
	guo.mutation.SetUnit(s)
	return guo
}

// SetGroupID sets the "group" edge to the Group entity by ID.
func (guo *GraphUpdateOne) SetGroupID(id int) *GraphUpdateOne {
	guo.mutation.SetGroupID(id)
	return guo
}

// SetNillableGroupID sets the "group" edge to the Group entity by ID if the given value is not nil.
func (guo *GraphUpdateOne) SetNillableGroupID(id *int) *GraphUpdateOne {
	if id != nil {
		guo = guo.SetGroupID(*id)
	}
	return guo
}

// SetGroup sets the "group" edge to the Group entity.
func (guo *GraphUpdateOne) SetGroup(g *Group) *GraphUpdateOne {
	return guo.SetGroupID(g.ID)
}

// AddMetricIDs adds the "metrics" edge to the Metric entity by IDs.
func (guo *GraphUpdateOne) AddMetricIDs(ids ...int) *GraphUpdateOne {
	guo.mutation.AddMetricIDs(ids...)
	return guo
}

// AddMetrics adds the "metrics" edges to the Metric entity.
func (guo *GraphUpdateOne) AddMetrics(m ...*Metric) *GraphUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return guo.AddMetricIDs(ids...)
}

// Mutation returns the GraphMutation object of the builder.
func (guo *GraphUpdateOne) Mutation() *GraphMutation {
	return guo.mutation
}

// ClearGroup clears the "group" edge to the Group entity.
func (guo *GraphUpdateOne) ClearGroup() *GraphUpdateOne {
	guo.mutation.ClearGroup()
	return guo
}

// ClearMetrics clears all "metrics" edges to the Metric entity.
func (guo *GraphUpdateOne) ClearMetrics() *GraphUpdateOne {
	guo.mutation.ClearMetrics()
	return guo
}

// RemoveMetricIDs removes the "metrics" edge to Metric entities by IDs.
func (guo *GraphUpdateOne) RemoveMetricIDs(ids ...int) *GraphUpdateOne {
	guo.mutation.RemoveMetricIDs(ids...)
	return guo
}

// RemoveMetrics removes "metrics" edges to Metric entities.
func (guo *GraphUpdateOne) RemoveMetrics(m ...*Metric) *GraphUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return guo.RemoveMetricIDs(ids...)
}

// Where appends a list predicates to the GraphUpdate builder.
func (guo *GraphUpdateOne) Where(ps ...predicate.Graph) *GraphUpdateOne {
	guo.mutation.Where(ps...)
	return guo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (guo *GraphUpdateOne) Select(field string, fields ...string) *GraphUpdateOne {
	guo.fields = append([]string{field}, fields...)
	return guo
}

// Save executes the query and returns the updated Graph entity.
func (guo *GraphUpdateOne) Save(ctx context.Context) (*Graph, error) {
	return withHooks(ctx, guo.sqlSave, guo.mutation, guo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (guo *GraphUpdateOne) SaveX(ctx context.Context) *Graph {
	node, err := guo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (guo *GraphUpdateOne) Exec(ctx context.Context) error {
	_, err := guo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guo *GraphUpdateOne) ExecX(ctx context.Context) {
	if err := guo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (guo *GraphUpdateOne) sqlSave(ctx context.Context) (_node *Graph, err error) {
	_spec := sqlgraph.NewUpdateSpec(graph.Table, graph.Columns, sqlgraph.NewFieldSpec(graph.FieldID, field.TypeInt))
	id, ok := guo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Graph.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := guo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, graph.FieldID)
		for _, f := range fields {
			if !graph.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != graph.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := guo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := guo.mutation.Unit(); ok {
		_spec.SetField(graph.FieldUnit, field.TypeString, value)
	}
	if guo.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   graph.GroupTable,
			Columns: []string{graph.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   graph.GroupTable,
			Columns: []string{graph.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.MetricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   graph.MetricsTable,
			Columns: []string{graph.MetricsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(metric.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedMetricsIDs(); len(nodes) > 0 && !guo.mutation.MetricsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   graph.MetricsTable,
			Columns: []string{graph.MetricsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(metric.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.MetricsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   graph.MetricsTable,
			Columns: []string{graph.MetricsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(metric.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Graph{config: guo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, guo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{graph.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	guo.mutation.done = true
	return _node, nil
}
