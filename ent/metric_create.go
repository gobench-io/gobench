// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/gobench-io/gobench/ent/counter"
	"github.com/gobench-io/gobench/ent/gauge"
	"github.com/gobench-io/gobench/ent/graph"
	"github.com/gobench-io/gobench/ent/histogram"
	"github.com/gobench-io/gobench/ent/metric"
)

// MetricCreate is the builder for creating a Metric entity.
type MetricCreate struct {
	config
	mutation *MetricMutation
	hooks    []Hook
}

// SetTitle sets the title field.
func (mc *MetricCreate) SetTitle(s string) *MetricCreate {
	mc.mutation.SetTitle(s)
	return mc
}

// SetType sets the type field.
func (mc *MetricCreate) SetType(s string) *MetricCreate {
	mc.mutation.SetType(s)
	return mc
}

// SetGraphID sets the graph edge to Graph by id.
func (mc *MetricCreate) SetGraphID(id int) *MetricCreate {
	mc.mutation.SetGraphID(id)
	return mc
}

// SetNillableGraphID sets the graph edge to Graph by id if the given value is not nil.
func (mc *MetricCreate) SetNillableGraphID(id *int) *MetricCreate {
	if id != nil {
		mc = mc.SetGraphID(*id)
	}
	return mc
}

// SetGraph sets the graph edge to Graph.
func (mc *MetricCreate) SetGraph(g *Graph) *MetricCreate {
	return mc.SetGraphID(g.ID)
}

// AddHistogramIDs adds the histograms edge to Histogram by ids.
func (mc *MetricCreate) AddHistogramIDs(ids ...int) *MetricCreate {
	mc.mutation.AddHistogramIDs(ids...)
	return mc
}

// AddHistograms adds the histograms edges to Histogram.
func (mc *MetricCreate) AddHistograms(h ...*Histogram) *MetricCreate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return mc.AddHistogramIDs(ids...)
}

// AddCounterIDs adds the counters edge to Counter by ids.
func (mc *MetricCreate) AddCounterIDs(ids ...int) *MetricCreate {
	mc.mutation.AddCounterIDs(ids...)
	return mc
}

// AddCounters adds the counters edges to Counter.
func (mc *MetricCreate) AddCounters(c ...*Counter) *MetricCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return mc.AddCounterIDs(ids...)
}

// AddGaugeIDs adds the gauges edge to Gauge by ids.
func (mc *MetricCreate) AddGaugeIDs(ids ...int) *MetricCreate {
	mc.mutation.AddGaugeIDs(ids...)
	return mc
}

// AddGauges adds the gauges edges to Gauge.
func (mc *MetricCreate) AddGauges(g ...*Gauge) *MetricCreate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return mc.AddGaugeIDs(ids...)
}

// Save creates the Metric in the database.
func (mc *MetricCreate) Save(ctx context.Context) (*Metric, error) {
	if _, ok := mc.mutation.Title(); !ok {
		return nil, errors.New("ent: missing required field \"title\"")
	}
	if _, ok := mc.mutation.GetType(); !ok {
		return nil, errors.New("ent: missing required field \"type\"")
	}
	var (
		err  error
		node *Metric
	)
	if len(mc.hooks) == 0 {
		node, err = mc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MetricMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mc.mutation = mutation
			node, err = mc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mc.hooks) - 1; i >= 0; i-- {
			mut = mc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MetricCreate) SaveX(ctx context.Context) *Metric {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (mc *MetricCreate) sqlSave(ctx context.Context) (*Metric, error) {
	var (
		m     = &Metric{config: mc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: metric.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: metric.FieldID,
			},
		}
	)
	if value, ok := mc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: metric.FieldTitle,
		})
		m.Title = value
	}
	if value, ok := mc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: metric.FieldType,
		})
		m.Type = value
	}
	if nodes := mc.mutation.GraphIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   metric.GraphTable,
			Columns: []string{metric.GraphColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: graph.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.HistogramsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   metric.HistogramsTable,
			Columns: []string{metric.HistogramsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: histogram.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.CountersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   metric.CountersTable,
			Columns: []string{metric.CountersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: counter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.GaugesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   metric.GaugesTable,
			Columns: []string{metric.GaugesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: gauge.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	m.ID = int(id)
	return m, nil
}
