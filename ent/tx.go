// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"sync"

	"github.com/facebookincubator/ent/dialect"
)

// Tx is a transactional client that is created by calling Client.Tx().
type Tx struct {
	config
	// Application is the client for interacting with the Application builders.
	Application *ApplicationClient
	// Counter is the client for interacting with the Counter builders.
	Counter *CounterClient
	// Gauge is the client for interacting with the Gauge builders.
	Gauge *GaugeClient
	// Graph is the client for interacting with the Graph builders.
	Graph *GraphClient
	// Group is the client for interacting with the Group builders.
	Group *GroupClient
	// Histogram is the client for interacting with the Histogram builders.
	Histogram *HistogramClient
	// Metric is the client for interacting with the Metric builders.
	Metric *MetricClient

	// lazily loaded.
	client     *Client
	clientOnce sync.Once

	// completion callbacks.
	mu         sync.Mutex
	onCommit   []func(error)
	onRollback []func(error)
}

// Commit commits the transaction.
func (tx *Tx) Commit() error {
	err := tx.config.driver.(*txDriver).tx.Commit()
	tx.mu.Lock()
	defer tx.mu.Unlock()
	for _, f := range tx.onCommit {
		f(err)
	}
	return err
}

// OnCommit adds a function to call on commit.
func (tx *Tx) OnCommit(f func(error)) {
	tx.mu.Lock()
	defer tx.mu.Unlock()
	tx.onCommit = append(tx.onCommit, f)
}

// Rollback rollbacks the transaction.
func (tx *Tx) Rollback() error {
	err := tx.config.driver.(*txDriver).tx.Rollback()
	tx.mu.Lock()
	defer tx.mu.Unlock()
	for _, f := range tx.onRollback {
		f(err)
	}
	return err
}

// OnRollback adds a function to call on rollback.
func (tx *Tx) OnRollback(f func(error)) {
	tx.mu.Lock()
	defer tx.mu.Unlock()
	tx.onRollback = append(tx.onRollback, f)
}

// Client returns a Client that binds to current transaction.
func (tx *Tx) Client() *Client {
	tx.clientOnce.Do(func() {
		tx.client = &Client{config: tx.config}
		tx.client.init()
	})
	return tx.client
}

func (tx *Tx) init() {
	tx.Application = NewApplicationClient(tx.config)
	tx.Counter = NewCounterClient(tx.config)
	tx.Gauge = NewGaugeClient(tx.config)
	tx.Graph = NewGraphClient(tx.config)
	tx.Group = NewGroupClient(tx.config)
	tx.Histogram = NewHistogramClient(tx.config)
	tx.Metric = NewMetricClient(tx.config)
}

// txDriver wraps the given dialect.Tx with a nop dialect.Driver implementation.
// The idea is to support transactions without adding any extra code to the builders.
// When a builder calls to driver.Tx(), it gets the same dialect.Tx instance.
// Commit and Rollback are nop for the internal builders and the user must call one
// of them in order to commit or rollback the transaction.
//
// If a closed transaction is embedded in one of the generated entities, and the entity
// applies a query, for example: Application.QueryXXX(), the query will be executed
// through the driver which created this transaction.
//
// Note that txDriver is not goroutine safe.
type txDriver struct {
	// the driver we started the transaction from.
	drv dialect.Driver
	// tx is the underlying transaction.
	tx dialect.Tx
}

// newTx creates a new transactional driver.
func newTx(ctx context.Context, drv dialect.Driver) (*txDriver, error) {
	tx, err := drv.Tx(ctx)
	if err != nil {
		return nil, err
	}
	return &txDriver{tx: tx, drv: drv}, nil
}

// Tx returns the transaction wrapper (txDriver) to avoid Commit or Rollback calls
// from the internal builders. Should be called only by the internal builders.
func (tx *txDriver) Tx(context.Context) (dialect.Tx, error) { return tx, nil }

// Dialect returns the dialect of the driver we started the transaction from.
func (tx *txDriver) Dialect() string { return tx.drv.Dialect() }

// Close is a nop close.
func (*txDriver) Close() error { return nil }

// Commit is a nop commit for the internal builders.
// User must call `Tx.Commit` in order to commit the transaction.
func (*txDriver) Commit() error { return nil }

// Rollback is a nop rollback for the internal builders.
// User must call `Tx.Rollback` in order to rollback the transaction.
func (*txDriver) Rollback() error { return nil }

// Exec calls tx.Exec.
func (tx *txDriver) Exec(ctx context.Context, query string, args, v interface{}) error {
	return tx.tx.Exec(ctx, query, args, v)
}

// Query calls tx.Query.
func (tx *txDriver) Query(ctx context.Context, query string, args, v interface{}) error {
	return tx.tx.Query(ctx, query, args, v)
}

var _ dialect.Driver = (*txDriver)(nil)
