// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gobench-io/gobench/v2/ent/gauge"
	"github.com/gobench-io/gobench/v2/ent/metric"
	"github.com/gobench-io/gobench/v2/ent/predicate"
)

// GaugeUpdate is the builder for updating Gauge entities.
type GaugeUpdate struct {
	config
	hooks    []Hook
	mutation *GaugeMutation
}

// Where appends a list predicates to the GaugeUpdate builder.
func (gu *GaugeUpdate) Where(ps ...predicate.Gauge) *GaugeUpdate {
	gu.mutation.Where(ps...)
	return gu
}

// SetTime sets the "time" field.
func (gu *GaugeUpdate) SetTime(i int64) *GaugeUpdate {
	gu.mutation.ResetTime()
	gu.mutation.SetTime(i)
	return gu
}

// AddTime adds i to the "time" field.
func (gu *GaugeUpdate) AddTime(i int64) *GaugeUpdate {
	gu.mutation.AddTime(i)
	return gu
}

// SetValue sets the "value" field.
func (gu *GaugeUpdate) SetValue(i int64) *GaugeUpdate {
	gu.mutation.ResetValue()
	gu.mutation.SetValue(i)
	return gu
}

// AddValue adds i to the "value" field.
func (gu *GaugeUpdate) AddValue(i int64) *GaugeUpdate {
	gu.mutation.AddValue(i)
	return gu
}

// SetWID sets the "wID" field.
func (gu *GaugeUpdate) SetWID(s string) *GaugeUpdate {
	gu.mutation.SetWID(s)
	return gu
}

// SetMetricID sets the "metric" edge to the Metric entity by ID.
func (gu *GaugeUpdate) SetMetricID(id int) *GaugeUpdate {
	gu.mutation.SetMetricID(id)
	return gu
}

// SetNillableMetricID sets the "metric" edge to the Metric entity by ID if the given value is not nil.
func (gu *GaugeUpdate) SetNillableMetricID(id *int) *GaugeUpdate {
	if id != nil {
		gu = gu.SetMetricID(*id)
	}
	return gu
}

// SetMetric sets the "metric" edge to the Metric entity.
func (gu *GaugeUpdate) SetMetric(m *Metric) *GaugeUpdate {
	return gu.SetMetricID(m.ID)
}

// Mutation returns the GaugeMutation object of the builder.
func (gu *GaugeUpdate) Mutation() *GaugeMutation {
	return gu.mutation
}

// ClearMetric clears the "metric" edge to the Metric entity.
func (gu *GaugeUpdate) ClearMetric() *GaugeUpdate {
	gu.mutation.ClearMetric()
	return gu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gu *GaugeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, gu.sqlSave, gu.mutation, gu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gu *GaugeUpdate) SaveX(ctx context.Context) int {
	affected, err := gu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gu *GaugeUpdate) Exec(ctx context.Context) error {
	_, err := gu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gu *GaugeUpdate) ExecX(ctx context.Context) {
	if err := gu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gu *GaugeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(gauge.Table, gauge.Columns, sqlgraph.NewFieldSpec(gauge.FieldID, field.TypeInt))
	if ps := gu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gu.mutation.Time(); ok {
		_spec.SetField(gauge.FieldTime, field.TypeInt64, value)
	}
	if value, ok := gu.mutation.AddedTime(); ok {
		_spec.AddField(gauge.FieldTime, field.TypeInt64, value)
	}
	if value, ok := gu.mutation.Value(); ok {
		_spec.SetField(gauge.FieldValue, field.TypeInt64, value)
	}
	if value, ok := gu.mutation.AddedValue(); ok {
		_spec.AddField(gauge.FieldValue, field.TypeInt64, value)
	}
	if value, ok := gu.mutation.WID(); ok {
		_spec.SetField(gauge.FieldWID, field.TypeString, value)
	}
	if gu.mutation.MetricCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gauge.MetricTable,
			Columns: []string{gauge.MetricColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(metric.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.MetricIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gauge.MetricTable,
			Columns: []string{gauge.MetricColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(metric.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gauge.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gu.mutation.done = true
	return n, nil
}

// GaugeUpdateOne is the builder for updating a single Gauge entity.
type GaugeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GaugeMutation
}

// SetTime sets the "time" field.
func (guo *GaugeUpdateOne) SetTime(i int64) *GaugeUpdateOne {
	guo.mutation.ResetTime()
	guo.mutation.SetTime(i)
	return guo
}

// AddTime adds i to the "time" field.
func (guo *GaugeUpdateOne) AddTime(i int64) *GaugeUpdateOne {
	guo.mutation.AddTime(i)
	return guo
}

// SetValue sets the "value" field.
func (guo *GaugeUpdateOne) SetValue(i int64) *GaugeUpdateOne {
	guo.mutation.ResetValue()
	guo.mutation.SetValue(i)
	return guo
}

// AddValue adds i to the "value" field.
func (guo *GaugeUpdateOne) AddValue(i int64) *GaugeUpdateOne {
	guo.mutation.AddValue(i)
	return guo
}

// SetWID sets the "wID" field.
func (guo *GaugeUpdateOne) SetWID(s string) *GaugeUpdateOne {
	guo.mutation.SetWID(s)
	return guo
}

// SetMetricID sets the "metric" edge to the Metric entity by ID.
func (guo *GaugeUpdateOne) SetMetricID(id int) *GaugeUpdateOne {
	guo.mutation.SetMetricID(id)
	return guo
}

// SetNillableMetricID sets the "metric" edge to the Metric entity by ID if the given value is not nil.
func (guo *GaugeUpdateOne) SetNillableMetricID(id *int) *GaugeUpdateOne {
	if id != nil {
		guo = guo.SetMetricID(*id)
	}
	return guo
}

// SetMetric sets the "metric" edge to the Metric entity.
func (guo *GaugeUpdateOne) SetMetric(m *Metric) *GaugeUpdateOne {
	return guo.SetMetricID(m.ID)
}

// Mutation returns the GaugeMutation object of the builder.
func (guo *GaugeUpdateOne) Mutation() *GaugeMutation {
	return guo.mutation
}

// ClearMetric clears the "metric" edge to the Metric entity.
func (guo *GaugeUpdateOne) ClearMetric() *GaugeUpdateOne {
	guo.mutation.ClearMetric()
	return guo
}

// Where appends a list predicates to the GaugeUpdate builder.
func (guo *GaugeUpdateOne) Where(ps ...predicate.Gauge) *GaugeUpdateOne {
	guo.mutation.Where(ps...)
	return guo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (guo *GaugeUpdateOne) Select(field string, fields ...string) *GaugeUpdateOne {
	guo.fields = append([]string{field}, fields...)
	return guo
}

// Save executes the query and returns the updated Gauge entity.
func (guo *GaugeUpdateOne) Save(ctx context.Context) (*Gauge, error) {
	return withHooks(ctx, guo.sqlSave, guo.mutation, guo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (guo *GaugeUpdateOne) SaveX(ctx context.Context) *Gauge {
	node, err := guo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (guo *GaugeUpdateOne) Exec(ctx context.Context) error {
	_, err := guo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guo *GaugeUpdateOne) ExecX(ctx context.Context) {
	if err := guo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (guo *GaugeUpdateOne) sqlSave(ctx context.Context) (_node *Gauge, err error) {
	_spec := sqlgraph.NewUpdateSpec(gauge.Table, gauge.Columns, sqlgraph.NewFieldSpec(gauge.FieldID, field.TypeInt))
	id, ok := guo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Gauge.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := guo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, gauge.FieldID)
		for _, f := range fields {
			if !gauge.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != gauge.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := guo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := guo.mutation.Time(); ok {
		_spec.SetField(gauge.FieldTime, field.TypeInt64, value)
	}
	if value, ok := guo.mutation.AddedTime(); ok {
		_spec.AddField(gauge.FieldTime, field.TypeInt64, value)
	}
	if value, ok := guo.mutation.Value(); ok {
		_spec.SetField(gauge.FieldValue, field.TypeInt64, value)
	}
	if value, ok := guo.mutation.AddedValue(); ok {
		_spec.AddField(gauge.FieldValue, field.TypeInt64, value)
	}
	if value, ok := guo.mutation.WID(); ok {
		_spec.SetField(gauge.FieldWID, field.TypeString, value)
	}
	if guo.mutation.MetricCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gauge.MetricTable,
			Columns: []string{gauge.MetricColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(metric.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.MetricIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gauge.MetricTable,
			Columns: []string{gauge.MetricColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(metric.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Gauge{config: guo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, guo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gauge.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	guo.mutation.done = true
	return _node, nil
}
