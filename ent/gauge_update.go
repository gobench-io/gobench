// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/gobench-io/gobench/v2/ent/gauge"
	"github.com/gobench-io/gobench/v2/ent/metric"
	"github.com/gobench-io/gobench/v2/ent/predicate"
)

// GaugeUpdate is the builder for updating Gauge entities.
type GaugeUpdate struct {
	config
	hooks      []Hook
	mutation   *GaugeMutation
	predicates []predicate.Gauge
}

// Where adds a new predicate for the builder.
func (gu *GaugeUpdate) Where(ps ...predicate.Gauge) *GaugeUpdate {
	gu.predicates = append(gu.predicates, ps...)
	return gu
}

// SetTime sets the time field.
func (gu *GaugeUpdate) SetTime(i int64) *GaugeUpdate {
	gu.mutation.ResetTime()
	gu.mutation.SetTime(i)
	return gu
}

// AddTime adds i to time.
func (gu *GaugeUpdate) AddTime(i int64) *GaugeUpdate {
	gu.mutation.AddTime(i)
	return gu
}

// SetValue sets the value field.
func (gu *GaugeUpdate) SetValue(i int64) *GaugeUpdate {
	gu.mutation.ResetValue()
	gu.mutation.SetValue(i)
	return gu
}

// AddValue adds i to value.
func (gu *GaugeUpdate) AddValue(i int64) *GaugeUpdate {
	gu.mutation.AddValue(i)
	return gu
}

// SetWID sets the wID field.
func (gu *GaugeUpdate) SetWID(s string) *GaugeUpdate {
	gu.mutation.SetWID(s)
	return gu
}

// SetMetricID sets the metric edge to Metric by id.
func (gu *GaugeUpdate) SetMetricID(id int) *GaugeUpdate {
	gu.mutation.SetMetricID(id)
	return gu
}

// SetNillableMetricID sets the metric edge to Metric by id if the given value is not nil.
func (gu *GaugeUpdate) SetNillableMetricID(id *int) *GaugeUpdate {
	if id != nil {
		gu = gu.SetMetricID(*id)
	}
	return gu
}

// SetMetric sets the metric edge to Metric.
func (gu *GaugeUpdate) SetMetric(m *Metric) *GaugeUpdate {
	return gu.SetMetricID(m.ID)
}

// Mutation returns the GaugeMutation object of the builder.
func (gu *GaugeUpdate) Mutation() *GaugeMutation {
	return gu.mutation
}

// ClearMetric clears the "metric" edge to type Metric.
func (gu *GaugeUpdate) ClearMetric() *GaugeUpdate {
	gu.mutation.ClearMetric()
	return gu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (gu *GaugeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(gu.hooks) == 0 {
		affected, err = gu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GaugeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gu.mutation = mutation
			affected, err = gu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(gu.hooks) - 1; i >= 0; i-- {
			mut = gu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (gu *GaugeUpdate) SaveX(ctx context.Context) int {
	affected, err := gu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gu *GaugeUpdate) Exec(ctx context.Context) error {
	_, err := gu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gu *GaugeUpdate) ExecX(ctx context.Context) {
	if err := gu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gu *GaugeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   gauge.Table,
			Columns: gauge.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: gauge.FieldID,
			},
		},
	}
	if ps := gu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gu.mutation.Time(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: gauge.FieldTime,
		})
	}
	if value, ok := gu.mutation.AddedTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: gauge.FieldTime,
		})
	}
	if value, ok := gu.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: gauge.FieldValue,
		})
	}
	if value, ok := gu.mutation.AddedValue(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: gauge.FieldValue,
		})
	}
	if value, ok := gu.mutation.WID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: gauge.FieldWID,
		})
	}
	if gu.mutation.MetricCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gauge.MetricTable,
			Columns: []string{gauge.MetricColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metric.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.MetricIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gauge.MetricTable,
			Columns: []string{gauge.MetricColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metric.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gauge.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// GaugeUpdateOne is the builder for updating a single Gauge entity.
type GaugeUpdateOne struct {
	config
	hooks    []Hook
	mutation *GaugeMutation
}

// SetTime sets the time field.
func (guo *GaugeUpdateOne) SetTime(i int64) *GaugeUpdateOne {
	guo.mutation.ResetTime()
	guo.mutation.SetTime(i)
	return guo
}

// AddTime adds i to time.
func (guo *GaugeUpdateOne) AddTime(i int64) *GaugeUpdateOne {
	guo.mutation.AddTime(i)
	return guo
}

// SetValue sets the value field.
func (guo *GaugeUpdateOne) SetValue(i int64) *GaugeUpdateOne {
	guo.mutation.ResetValue()
	guo.mutation.SetValue(i)
	return guo
}

// AddValue adds i to value.
func (guo *GaugeUpdateOne) AddValue(i int64) *GaugeUpdateOne {
	guo.mutation.AddValue(i)
	return guo
}

// SetWID sets the wID field.
func (guo *GaugeUpdateOne) SetWID(s string) *GaugeUpdateOne {
	guo.mutation.SetWID(s)
	return guo
}

// SetMetricID sets the metric edge to Metric by id.
func (guo *GaugeUpdateOne) SetMetricID(id int) *GaugeUpdateOne {
	guo.mutation.SetMetricID(id)
	return guo
}

// SetNillableMetricID sets the metric edge to Metric by id if the given value is not nil.
func (guo *GaugeUpdateOne) SetNillableMetricID(id *int) *GaugeUpdateOne {
	if id != nil {
		guo = guo.SetMetricID(*id)
	}
	return guo
}

// SetMetric sets the metric edge to Metric.
func (guo *GaugeUpdateOne) SetMetric(m *Metric) *GaugeUpdateOne {
	return guo.SetMetricID(m.ID)
}

// Mutation returns the GaugeMutation object of the builder.
func (guo *GaugeUpdateOne) Mutation() *GaugeMutation {
	return guo.mutation
}

// ClearMetric clears the "metric" edge to type Metric.
func (guo *GaugeUpdateOne) ClearMetric() *GaugeUpdateOne {
	guo.mutation.ClearMetric()
	return guo
}

// Save executes the query and returns the updated entity.
func (guo *GaugeUpdateOne) Save(ctx context.Context) (*Gauge, error) {
	var (
		err  error
		node *Gauge
	)
	if len(guo.hooks) == 0 {
		node, err = guo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GaugeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			guo.mutation = mutation
			node, err = guo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(guo.hooks) - 1; i >= 0; i-- {
			mut = guo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, guo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (guo *GaugeUpdateOne) SaveX(ctx context.Context) *Gauge {
	node, err := guo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (guo *GaugeUpdateOne) Exec(ctx context.Context) error {
	_, err := guo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guo *GaugeUpdateOne) ExecX(ctx context.Context) {
	if err := guo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (guo *GaugeUpdateOne) sqlSave(ctx context.Context) (_node *Gauge, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   gauge.Table,
			Columns: gauge.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: gauge.FieldID,
			},
		},
	}
	id, ok := guo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Gauge.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := guo.mutation.Time(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: gauge.FieldTime,
		})
	}
	if value, ok := guo.mutation.AddedTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: gauge.FieldTime,
		})
	}
	if value, ok := guo.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: gauge.FieldValue,
		})
	}
	if value, ok := guo.mutation.AddedValue(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: gauge.FieldValue,
		})
	}
	if value, ok := guo.mutation.WID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: gauge.FieldWID,
		})
	}
	if guo.mutation.MetricCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gauge.MetricTable,
			Columns: []string{gauge.MetricColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metric.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.MetricIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gauge.MetricTable,
			Columns: []string{gauge.MetricColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: metric.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Gauge{config: guo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, guo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gauge.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
