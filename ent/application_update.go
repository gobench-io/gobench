// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gobench-io/gobench/v2/ent/application"
	"github.com/gobench-io/gobench/v2/ent/group"
	"github.com/gobench-io/gobench/v2/ent/predicate"
	"github.com/gobench-io/gobench/v2/ent/tag"
)

// ApplicationUpdate is the builder for updating Application entities.
type ApplicationUpdate struct {
	config
	hooks    []Hook
	mutation *ApplicationMutation
}

// Where appends a list predicates to the ApplicationUpdate builder.
func (au *ApplicationUpdate) Where(ps ...predicate.Application) *ApplicationUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetName sets the "name" field.
func (au *ApplicationUpdate) SetName(s string) *ApplicationUpdate {
	au.mutation.SetName(s)
	return au
}

// SetStatus sets the "status" field.
func (au *ApplicationUpdate) SetStatus(s string) *ApplicationUpdate {
	au.mutation.SetStatus(s)
	return au
}

// SetCreatedAt sets the "created_at" field.
func (au *ApplicationUpdate) SetCreatedAt(t time.Time) *ApplicationUpdate {
	au.mutation.SetCreatedAt(t)
	return au
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (au *ApplicationUpdate) SetNillableCreatedAt(t *time.Time) *ApplicationUpdate {
	if t != nil {
		au.SetCreatedAt(*t)
	}
	return au
}

// SetStartedAt sets the "started_at" field.
func (au *ApplicationUpdate) SetStartedAt(t time.Time) *ApplicationUpdate {
	au.mutation.SetStartedAt(t)
	return au
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (au *ApplicationUpdate) SetNillableStartedAt(t *time.Time) *ApplicationUpdate {
	if t != nil {
		au.SetStartedAt(*t)
	}
	return au
}

// ClearStartedAt clears the value of the "started_at" field.
func (au *ApplicationUpdate) ClearStartedAt() *ApplicationUpdate {
	au.mutation.ClearStartedAt()
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *ApplicationUpdate) SetUpdatedAt(t time.Time) *ApplicationUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetScenario sets the "scenario" field.
func (au *ApplicationUpdate) SetScenario(s string) *ApplicationUpdate {
	au.mutation.SetScenario(s)
	return au
}

// SetGomod sets the "gomod" field.
func (au *ApplicationUpdate) SetGomod(s string) *ApplicationUpdate {
	au.mutation.SetGomod(s)
	return au
}

// SetNillableGomod sets the "gomod" field if the given value is not nil.
func (au *ApplicationUpdate) SetNillableGomod(s *string) *ApplicationUpdate {
	if s != nil {
		au.SetGomod(*s)
	}
	return au
}

// SetGosum sets the "gosum" field.
func (au *ApplicationUpdate) SetGosum(s string) *ApplicationUpdate {
	au.mutation.SetGosum(s)
	return au
}

// SetNillableGosum sets the "gosum" field if the given value is not nil.
func (au *ApplicationUpdate) SetNillableGosum(s *string) *ApplicationUpdate {
	if s != nil {
		au.SetGosum(*s)
	}
	return au
}

// SetVu sets the "vu" field.
func (au *ApplicationUpdate) SetVu(i int) *ApplicationUpdate {
	au.mutation.ResetVu()
	au.mutation.SetVu(i)
	return au
}

// SetNillableVu sets the "vu" field if the given value is not nil.
func (au *ApplicationUpdate) SetNillableVu(i *int) *ApplicationUpdate {
	if i != nil {
		au.SetVu(*i)
	}
	return au
}

// AddVu adds i to the "vu" field.
func (au *ApplicationUpdate) AddVu(i int) *ApplicationUpdate {
	au.mutation.AddVu(i)
	return au
}

// AddGroupIDs adds the "groups" edge to the Group entity by IDs.
func (au *ApplicationUpdate) AddGroupIDs(ids ...int) *ApplicationUpdate {
	au.mutation.AddGroupIDs(ids...)
	return au
}

// AddGroups adds the "groups" edges to the Group entity.
func (au *ApplicationUpdate) AddGroups(g ...*Group) *ApplicationUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return au.AddGroupIDs(ids...)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (au *ApplicationUpdate) AddTagIDs(ids ...int) *ApplicationUpdate {
	au.mutation.AddTagIDs(ids...)
	return au
}

// AddTags adds the "tags" edges to the Tag entity.
func (au *ApplicationUpdate) AddTags(t ...*Tag) *ApplicationUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return au.AddTagIDs(ids...)
}

// Mutation returns the ApplicationMutation object of the builder.
func (au *ApplicationUpdate) Mutation() *ApplicationMutation {
	return au.mutation
}

// ClearGroups clears all "groups" edges to the Group entity.
func (au *ApplicationUpdate) ClearGroups() *ApplicationUpdate {
	au.mutation.ClearGroups()
	return au
}

// RemoveGroupIDs removes the "groups" edge to Group entities by IDs.
func (au *ApplicationUpdate) RemoveGroupIDs(ids ...int) *ApplicationUpdate {
	au.mutation.RemoveGroupIDs(ids...)
	return au
}

// RemoveGroups removes "groups" edges to Group entities.
func (au *ApplicationUpdate) RemoveGroups(g ...*Group) *ApplicationUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return au.RemoveGroupIDs(ids...)
}

// ClearTags clears all "tags" edges to the Tag entity.
func (au *ApplicationUpdate) ClearTags() *ApplicationUpdate {
	au.mutation.ClearTags()
	return au
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (au *ApplicationUpdate) RemoveTagIDs(ids ...int) *ApplicationUpdate {
	au.mutation.RemoveTagIDs(ids...)
	return au
}

// RemoveTags removes "tags" edges to Tag entities.
func (au *ApplicationUpdate) RemoveTags(t ...*Tag) *ApplicationUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return au.RemoveTagIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *ApplicationUpdate) Save(ctx context.Context) (int, error) {
	au.defaults()
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *ApplicationUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *ApplicationUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *ApplicationUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *ApplicationUpdate) defaults() {
	if _, ok := au.mutation.UpdatedAt(); !ok {
		v := application.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *ApplicationUpdate) check() error {
	if v, ok := au.mutation.Vu(); ok {
		if err := application.VuValidator(v); err != nil {
			return &ValidationError{Name: "vu", err: fmt.Errorf(`ent: validator failed for field "Application.vu": %w`, err)}
		}
	}
	return nil
}

func (au *ApplicationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(application.Table, application.Columns, sqlgraph.NewFieldSpec(application.FieldID, field.TypeInt))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Name(); ok {
		_spec.SetField(application.FieldName, field.TypeString, value)
	}
	if value, ok := au.mutation.Status(); ok {
		_spec.SetField(application.FieldStatus, field.TypeString, value)
	}
	if value, ok := au.mutation.CreatedAt(); ok {
		_spec.SetField(application.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := au.mutation.StartedAt(); ok {
		_spec.SetField(application.FieldStartedAt, field.TypeTime, value)
	}
	if au.mutation.StartedAtCleared() {
		_spec.ClearField(application.FieldStartedAt, field.TypeTime)
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.SetField(application.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := au.mutation.Scenario(); ok {
		_spec.SetField(application.FieldScenario, field.TypeString, value)
	}
	if value, ok := au.mutation.Gomod(); ok {
		_spec.SetField(application.FieldGomod, field.TypeString, value)
	}
	if value, ok := au.mutation.Gosum(); ok {
		_spec.SetField(application.FieldGosum, field.TypeString, value)
	}
	if value, ok := au.mutation.Vu(); ok {
		_spec.SetField(application.FieldVu, field.TypeInt, value)
	}
	if value, ok := au.mutation.AddedVu(); ok {
		_spec.AddField(application.FieldVu, field.TypeInt, value)
	}
	if au.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   application.GroupsTable,
			Columns: []string{application.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedGroupsIDs(); len(nodes) > 0 && !au.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   application.GroupsTable,
			Columns: []string{application.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   application.GroupsTable,
			Columns: []string{application.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   application.TagsTable,
			Columns: []string{application.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedTagsIDs(); len(nodes) > 0 && !au.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   application.TagsTable,
			Columns: []string{application.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   application.TagsTable,
			Columns: []string{application.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{application.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// ApplicationUpdateOne is the builder for updating a single Application entity.
type ApplicationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ApplicationMutation
}

// SetName sets the "name" field.
func (auo *ApplicationUpdateOne) SetName(s string) *ApplicationUpdateOne {
	auo.mutation.SetName(s)
	return auo
}

// SetStatus sets the "status" field.
func (auo *ApplicationUpdateOne) SetStatus(s string) *ApplicationUpdateOne {
	auo.mutation.SetStatus(s)
	return auo
}

// SetCreatedAt sets the "created_at" field.
func (auo *ApplicationUpdateOne) SetCreatedAt(t time.Time) *ApplicationUpdateOne {
	auo.mutation.SetCreatedAt(t)
	return auo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (auo *ApplicationUpdateOne) SetNillableCreatedAt(t *time.Time) *ApplicationUpdateOne {
	if t != nil {
		auo.SetCreatedAt(*t)
	}
	return auo
}

// SetStartedAt sets the "started_at" field.
func (auo *ApplicationUpdateOne) SetStartedAt(t time.Time) *ApplicationUpdateOne {
	auo.mutation.SetStartedAt(t)
	return auo
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (auo *ApplicationUpdateOne) SetNillableStartedAt(t *time.Time) *ApplicationUpdateOne {
	if t != nil {
		auo.SetStartedAt(*t)
	}
	return auo
}

// ClearStartedAt clears the value of the "started_at" field.
func (auo *ApplicationUpdateOne) ClearStartedAt() *ApplicationUpdateOne {
	auo.mutation.ClearStartedAt()
	return auo
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *ApplicationUpdateOne) SetUpdatedAt(t time.Time) *ApplicationUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetScenario sets the "scenario" field.
func (auo *ApplicationUpdateOne) SetScenario(s string) *ApplicationUpdateOne {
	auo.mutation.SetScenario(s)
	return auo
}

// SetGomod sets the "gomod" field.
func (auo *ApplicationUpdateOne) SetGomod(s string) *ApplicationUpdateOne {
	auo.mutation.SetGomod(s)
	return auo
}

// SetNillableGomod sets the "gomod" field if the given value is not nil.
func (auo *ApplicationUpdateOne) SetNillableGomod(s *string) *ApplicationUpdateOne {
	if s != nil {
		auo.SetGomod(*s)
	}
	return auo
}

// SetGosum sets the "gosum" field.
func (auo *ApplicationUpdateOne) SetGosum(s string) *ApplicationUpdateOne {
	auo.mutation.SetGosum(s)
	return auo
}

// SetNillableGosum sets the "gosum" field if the given value is not nil.
func (auo *ApplicationUpdateOne) SetNillableGosum(s *string) *ApplicationUpdateOne {
	if s != nil {
		auo.SetGosum(*s)
	}
	return auo
}

// SetVu sets the "vu" field.
func (auo *ApplicationUpdateOne) SetVu(i int) *ApplicationUpdateOne {
	auo.mutation.ResetVu()
	auo.mutation.SetVu(i)
	return auo
}

// SetNillableVu sets the "vu" field if the given value is not nil.
func (auo *ApplicationUpdateOne) SetNillableVu(i *int) *ApplicationUpdateOne {
	if i != nil {
		auo.SetVu(*i)
	}
	return auo
}

// AddVu adds i to the "vu" field.
func (auo *ApplicationUpdateOne) AddVu(i int) *ApplicationUpdateOne {
	auo.mutation.AddVu(i)
	return auo
}

// AddGroupIDs adds the "groups" edge to the Group entity by IDs.
func (auo *ApplicationUpdateOne) AddGroupIDs(ids ...int) *ApplicationUpdateOne {
	auo.mutation.AddGroupIDs(ids...)
	return auo
}

// AddGroups adds the "groups" edges to the Group entity.
func (auo *ApplicationUpdateOne) AddGroups(g ...*Group) *ApplicationUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return auo.AddGroupIDs(ids...)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (auo *ApplicationUpdateOne) AddTagIDs(ids ...int) *ApplicationUpdateOne {
	auo.mutation.AddTagIDs(ids...)
	return auo
}

// AddTags adds the "tags" edges to the Tag entity.
func (auo *ApplicationUpdateOne) AddTags(t ...*Tag) *ApplicationUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return auo.AddTagIDs(ids...)
}

// Mutation returns the ApplicationMutation object of the builder.
func (auo *ApplicationUpdateOne) Mutation() *ApplicationMutation {
	return auo.mutation
}

// ClearGroups clears all "groups" edges to the Group entity.
func (auo *ApplicationUpdateOne) ClearGroups() *ApplicationUpdateOne {
	auo.mutation.ClearGroups()
	return auo
}

// RemoveGroupIDs removes the "groups" edge to Group entities by IDs.
func (auo *ApplicationUpdateOne) RemoveGroupIDs(ids ...int) *ApplicationUpdateOne {
	auo.mutation.RemoveGroupIDs(ids...)
	return auo
}

// RemoveGroups removes "groups" edges to Group entities.
func (auo *ApplicationUpdateOne) RemoveGroups(g ...*Group) *ApplicationUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return auo.RemoveGroupIDs(ids...)
}

// ClearTags clears all "tags" edges to the Tag entity.
func (auo *ApplicationUpdateOne) ClearTags() *ApplicationUpdateOne {
	auo.mutation.ClearTags()
	return auo
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (auo *ApplicationUpdateOne) RemoveTagIDs(ids ...int) *ApplicationUpdateOne {
	auo.mutation.RemoveTagIDs(ids...)
	return auo
}

// RemoveTags removes "tags" edges to Tag entities.
func (auo *ApplicationUpdateOne) RemoveTags(t ...*Tag) *ApplicationUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return auo.RemoveTagIDs(ids...)
}

// Where appends a list predicates to the ApplicationUpdate builder.
func (auo *ApplicationUpdateOne) Where(ps ...predicate.Application) *ApplicationUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *ApplicationUpdateOne) Select(field string, fields ...string) *ApplicationUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Application entity.
func (auo *ApplicationUpdateOne) Save(ctx context.Context) (*Application, error) {
	auo.defaults()
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *ApplicationUpdateOne) SaveX(ctx context.Context) *Application {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *ApplicationUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *ApplicationUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *ApplicationUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdatedAt(); !ok {
		v := application.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *ApplicationUpdateOne) check() error {
	if v, ok := auo.mutation.Vu(); ok {
		if err := application.VuValidator(v); err != nil {
			return &ValidationError{Name: "vu", err: fmt.Errorf(`ent: validator failed for field "Application.vu": %w`, err)}
		}
	}
	return nil
}

func (auo *ApplicationUpdateOne) sqlSave(ctx context.Context) (_node *Application, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(application.Table, application.Columns, sqlgraph.NewFieldSpec(application.FieldID, field.TypeInt))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Application.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, application.FieldID)
		for _, f := range fields {
			if !application.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != application.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Name(); ok {
		_spec.SetField(application.FieldName, field.TypeString, value)
	}
	if value, ok := auo.mutation.Status(); ok {
		_spec.SetField(application.FieldStatus, field.TypeString, value)
	}
	if value, ok := auo.mutation.CreatedAt(); ok {
		_spec.SetField(application.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := auo.mutation.StartedAt(); ok {
		_spec.SetField(application.FieldStartedAt, field.TypeTime, value)
	}
	if auo.mutation.StartedAtCleared() {
		_spec.ClearField(application.FieldStartedAt, field.TypeTime)
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.SetField(application.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := auo.mutation.Scenario(); ok {
		_spec.SetField(application.FieldScenario, field.TypeString, value)
	}
	if value, ok := auo.mutation.Gomod(); ok {
		_spec.SetField(application.FieldGomod, field.TypeString, value)
	}
	if value, ok := auo.mutation.Gosum(); ok {
		_spec.SetField(application.FieldGosum, field.TypeString, value)
	}
	if value, ok := auo.mutation.Vu(); ok {
		_spec.SetField(application.FieldVu, field.TypeInt, value)
	}
	if value, ok := auo.mutation.AddedVu(); ok {
		_spec.AddField(application.FieldVu, field.TypeInt, value)
	}
	if auo.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   application.GroupsTable,
			Columns: []string{application.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedGroupsIDs(); len(nodes) > 0 && !auo.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   application.GroupsTable,
			Columns: []string{application.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   application.GroupsTable,
			Columns: []string{application.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   application.TagsTable,
			Columns: []string{application.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedTagsIDs(); len(nodes) > 0 && !auo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   application.TagsTable,
			Columns: []string{application.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   application.TagsTable,
			Columns: []string{application.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Application{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{application.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
