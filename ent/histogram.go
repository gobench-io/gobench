// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/gobench-io/gobench/v2/ent/histogram"
	"github.com/gobench-io/gobench/v2/ent/metric"
)

// Histogram is the model entity for the Histogram schema.
type Histogram struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Time holds the value of the "time" field.
	Time int64 `json:"time"`
	// Count holds the value of the "count" field.
	Count int64 `json:"count"`
	// Min holds the value of the "min" field.
	Min int64 `json:"min"`
	// Max holds the value of the "max" field.
	Max int64 `json:"max"`
	// Mean holds the value of the "mean" field.
	Mean float64 `json:"mean"`
	// Stddev holds the value of the "stddev" field.
	Stddev float64 `json:"stddev"`
	// Median holds the value of the "median" field.
	Median float64 `json:"median"`
	// P75 holds the value of the "p75" field.
	P75 float64 `json:"p75"`
	// P95 holds the value of the "p95" field.
	P95 float64 `json:"p95"`
	// P99 holds the value of the "p99" field.
	P99 float64 `json:"p99"`
	// P999 holds the value of the "p999" field.
	P999 float64 `json:"p999"`
	// WID holds the value of the "wID" field.
	WID string `json:"wId"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HistogramQuery when eager-loading is set.
	Edges             HistogramEdges `json:"edges"`
	metric_histograms *int
	selectValues      sql.SelectValues
}

// HistogramEdges holds the relations/edges for other nodes in the graph.
type HistogramEdges struct {
	// Metric holds the value of the metric edge.
	Metric *Metric `json:"metric,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// MetricOrErr returns the Metric value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HistogramEdges) MetricOrErr() (*Metric, error) {
	if e.loadedTypes[0] {
		if e.Metric == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: metric.Label}
		}
		return e.Metric, nil
	}
	return nil, &NotLoadedError{edge: "metric"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Histogram) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case histogram.FieldMean, histogram.FieldStddev, histogram.FieldMedian, histogram.FieldP75, histogram.FieldP95, histogram.FieldP99, histogram.FieldP999:
			values[i] = new(sql.NullFloat64)
		case histogram.FieldID, histogram.FieldTime, histogram.FieldCount, histogram.FieldMin, histogram.FieldMax:
			values[i] = new(sql.NullInt64)
		case histogram.FieldWID:
			values[i] = new(sql.NullString)
		case histogram.ForeignKeys[0]: // metric_histograms
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Histogram fields.
func (h *Histogram) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case histogram.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			h.ID = int(value.Int64)
		case histogram.FieldTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field time", values[i])
			} else if value.Valid {
				h.Time = value.Int64
			}
		case histogram.FieldCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field count", values[i])
			} else if value.Valid {
				h.Count = value.Int64
			}
		case histogram.FieldMin:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field min", values[i])
			} else if value.Valid {
				h.Min = value.Int64
			}
		case histogram.FieldMax:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field max", values[i])
			} else if value.Valid {
				h.Max = value.Int64
			}
		case histogram.FieldMean:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field mean", values[i])
			} else if value.Valid {
				h.Mean = value.Float64
			}
		case histogram.FieldStddev:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field stddev", values[i])
			} else if value.Valid {
				h.Stddev = value.Float64
			}
		case histogram.FieldMedian:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field median", values[i])
			} else if value.Valid {
				h.Median = value.Float64
			}
		case histogram.FieldP75:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field p75", values[i])
			} else if value.Valid {
				h.P75 = value.Float64
			}
		case histogram.FieldP95:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field p95", values[i])
			} else if value.Valid {
				h.P95 = value.Float64
			}
		case histogram.FieldP99:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field p99", values[i])
			} else if value.Valid {
				h.P99 = value.Float64
			}
		case histogram.FieldP999:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field p999", values[i])
			} else if value.Valid {
				h.P999 = value.Float64
			}
		case histogram.FieldWID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field wID", values[i])
			} else if value.Valid {
				h.WID = value.String
			}
		case histogram.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field metric_histograms", value)
			} else if value.Valid {
				h.metric_histograms = new(int)
				*h.metric_histograms = int(value.Int64)
			}
		default:
			h.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Histogram.
// This includes values selected through modifiers, order, etc.
func (h *Histogram) Value(name string) (ent.Value, error) {
	return h.selectValues.Get(name)
}

// QueryMetric queries the "metric" edge of the Histogram entity.
func (h *Histogram) QueryMetric() *MetricQuery {
	return NewHistogramClient(h.config).QueryMetric(h)
}

// Update returns a builder for updating this Histogram.
// Note that you need to call Histogram.Unwrap() before calling this method if this Histogram
// was returned from a transaction, and the transaction was committed or rolled back.
func (h *Histogram) Update() *HistogramUpdateOne {
	return NewHistogramClient(h.config).UpdateOne(h)
}

// Unwrap unwraps the Histogram entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (h *Histogram) Unwrap() *Histogram {
	_tx, ok := h.config.driver.(*txDriver)
	if !ok {
		panic("ent: Histogram is not a transactional entity")
	}
	h.config.driver = _tx.drv
	return h
}

// String implements the fmt.Stringer.
func (h *Histogram) String() string {
	var builder strings.Builder
	builder.WriteString("Histogram(")
	builder.WriteString(fmt.Sprintf("id=%v, ", h.ID))
	builder.WriteString("time=")
	builder.WriteString(fmt.Sprintf("%v", h.Time))
	builder.WriteString(", ")
	builder.WriteString("count=")
	builder.WriteString(fmt.Sprintf("%v", h.Count))
	builder.WriteString(", ")
	builder.WriteString("min=")
	builder.WriteString(fmt.Sprintf("%v", h.Min))
	builder.WriteString(", ")
	builder.WriteString("max=")
	builder.WriteString(fmt.Sprintf("%v", h.Max))
	builder.WriteString(", ")
	builder.WriteString("mean=")
	builder.WriteString(fmt.Sprintf("%v", h.Mean))
	builder.WriteString(", ")
	builder.WriteString("stddev=")
	builder.WriteString(fmt.Sprintf("%v", h.Stddev))
	builder.WriteString(", ")
	builder.WriteString("median=")
	builder.WriteString(fmt.Sprintf("%v", h.Median))
	builder.WriteString(", ")
	builder.WriteString("p75=")
	builder.WriteString(fmt.Sprintf("%v", h.P75))
	builder.WriteString(", ")
	builder.WriteString("p95=")
	builder.WriteString(fmt.Sprintf("%v", h.P95))
	builder.WriteString(", ")
	builder.WriteString("p99=")
	builder.WriteString(fmt.Sprintf("%v", h.P99))
	builder.WriteString(", ")
	builder.WriteString("p999=")
	builder.WriteString(fmt.Sprintf("%v", h.P999))
	builder.WriteString(", ")
	builder.WriteString("wID=")
	builder.WriteString(h.WID)
	builder.WriteByte(')')
	return builder.String()
}

// Histograms is a parsable slice of Histogram.
type Histograms []*Histogram
