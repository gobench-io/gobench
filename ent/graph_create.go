// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gobench-io/gobench/v2/ent/graph"
	"github.com/gobench-io/gobench/v2/ent/group"
	"github.com/gobench-io/gobench/v2/ent/metric"
)

// GraphCreate is the builder for creating a Graph entity.
type GraphCreate struct {
	config
	mutation *GraphMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (gc *GraphCreate) SetTitle(s string) *GraphCreate {
	gc.mutation.SetTitle(s)
	return gc
}

// SetUnit sets the "unit" field.
func (gc *GraphCreate) SetUnit(s string) *GraphCreate {
	gc.mutation.SetUnit(s)
	return gc
}

// SetGroupID sets the "group" edge to the Group entity by ID.
func (gc *GraphCreate) SetGroupID(id int) *GraphCreate {
	gc.mutation.SetGroupID(id)
	return gc
}

// SetNillableGroupID sets the "group" edge to the Group entity by ID if the given value is not nil.
func (gc *GraphCreate) SetNillableGroupID(id *int) *GraphCreate {
	if id != nil {
		gc = gc.SetGroupID(*id)
	}
	return gc
}

// SetGroup sets the "group" edge to the Group entity.
func (gc *GraphCreate) SetGroup(g *Group) *GraphCreate {
	return gc.SetGroupID(g.ID)
}

// AddMetricIDs adds the "metrics" edge to the Metric entity by IDs.
func (gc *GraphCreate) AddMetricIDs(ids ...int) *GraphCreate {
	gc.mutation.AddMetricIDs(ids...)
	return gc
}

// AddMetrics adds the "metrics" edges to the Metric entity.
func (gc *GraphCreate) AddMetrics(m ...*Metric) *GraphCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return gc.AddMetricIDs(ids...)
}

// Mutation returns the GraphMutation object of the builder.
func (gc *GraphCreate) Mutation() *GraphMutation {
	return gc.mutation
}

// Save creates the Graph in the database.
func (gc *GraphCreate) Save(ctx context.Context) (*Graph, error) {
	return withHooks(ctx, gc.sqlSave, gc.mutation, gc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gc *GraphCreate) SaveX(ctx context.Context) *Graph {
	v, err := gc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gc *GraphCreate) Exec(ctx context.Context) error {
	_, err := gc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gc *GraphCreate) ExecX(ctx context.Context) {
	if err := gc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gc *GraphCreate) check() error {
	if _, ok := gc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Graph.title"`)}
	}
	if _, ok := gc.mutation.Unit(); !ok {
		return &ValidationError{Name: "unit", err: errors.New(`ent: missing required field "Graph.unit"`)}
	}
	return nil
}

func (gc *GraphCreate) sqlSave(ctx context.Context) (*Graph, error) {
	if err := gc.check(); err != nil {
		return nil, err
	}
	_node, _spec := gc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	gc.mutation.id = &_node.ID
	gc.mutation.done = true
	return _node, nil
}

func (gc *GraphCreate) createSpec() (*Graph, *sqlgraph.CreateSpec) {
	var (
		_node = &Graph{config: gc.config}
		_spec = sqlgraph.NewCreateSpec(graph.Table, sqlgraph.NewFieldSpec(graph.FieldID, field.TypeInt))
	)
	if value, ok := gc.mutation.Title(); ok {
		_spec.SetField(graph.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := gc.mutation.Unit(); ok {
		_spec.SetField(graph.FieldUnit, field.TypeString, value)
		_node.Unit = value
	}
	if nodes := gc.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   graph.GroupTable,
			Columns: []string{graph.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.group_graphs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gc.mutation.MetricsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   graph.MetricsTable,
			Columns: []string{graph.MetricsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(metric.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// GraphCreateBulk is the builder for creating many Graph entities in bulk.
type GraphCreateBulk struct {
	config
	builders []*GraphCreate
}

// Save creates the Graph entities in the database.
func (gcb *GraphCreateBulk) Save(ctx context.Context) ([]*Graph, error) {
	specs := make([]*sqlgraph.CreateSpec, len(gcb.builders))
	nodes := make([]*Graph, len(gcb.builders))
	mutators := make([]Mutator, len(gcb.builders))
	for i := range gcb.builders {
		func(i int, root context.Context) {
			builder := gcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GraphMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gcb *GraphCreateBulk) SaveX(ctx context.Context) []*Graph {
	v, err := gcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gcb *GraphCreateBulk) Exec(ctx context.Context) error {
	_, err := gcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcb *GraphCreateBulk) ExecX(ctx context.Context) {
	if err := gcb.Exec(ctx); err != nil {
		panic(err)
	}
}
