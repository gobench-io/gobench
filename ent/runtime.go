// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/gobench-io/gobench/v2/ent/application"
	"github.com/gobench-io/gobench/v2/ent/schema"
	"github.com/gobench-io/gobench/v2/ent/tag"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	applicationFields := schema.Application{}.Fields()
	_ = applicationFields
	// applicationDescCreatedAt is the schema descriptor for created_at field.
	applicationDescCreatedAt := applicationFields[2].Descriptor()
	// application.DefaultCreatedAt holds the default value on creation for the created_at field.
	application.DefaultCreatedAt = applicationDescCreatedAt.Default.(func() time.Time)
	// applicationDescUpdatedAt is the schema descriptor for updated_at field.
	applicationDescUpdatedAt := applicationFields[4].Descriptor()
	// application.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	application.DefaultUpdatedAt = applicationDescUpdatedAt.Default.(func() time.Time)
	// application.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	application.UpdateDefaultUpdatedAt = applicationDescUpdatedAt.UpdateDefault.(func() time.Time)
	// applicationDescGomod is the schema descriptor for gomod field.
	applicationDescGomod := applicationFields[6].Descriptor()
	// application.DefaultGomod holds the default value on creation for the gomod field.
	application.DefaultGomod = applicationDescGomod.Default.(string)
	// applicationDescGosum is the schema descriptor for gosum field.
	applicationDescGosum := applicationFields[7].Descriptor()
	// application.DefaultGosum holds the default value on creation for the gosum field.
	application.DefaultGosum = applicationDescGosum.Default.(string)
	// applicationDescVu is the schema descriptor for vu field.
	applicationDescVu := applicationFields[8].Descriptor()
	// application.DefaultVu holds the default value on creation for the vu field.
	application.DefaultVu = applicationDescVu.Default.(int)
	// application.VuValidator is a validator for the "vu" field. It is called by the builders before save.
	application.VuValidator = applicationDescVu.Validators[0].(func(int) error)
	tagFields := schema.Tag{}.Fields()
	_ = tagFields
	// tagDescName is the schema descriptor for name field.
	tagDescName := tagFields[0].Descriptor()
	// tag.NameValidator is a validator for the "name" field. It is called by the builders before save.
	tag.NameValidator = func() func(string) error {
		validators := tagDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
}
