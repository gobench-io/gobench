// Code generated by ent, DO NOT EDIT.

package histogram

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the histogram type in the database.
	Label = "histogram"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTime holds the string denoting the time field in the database.
	FieldTime = "time"
	// FieldCount holds the string denoting the count field in the database.
	FieldCount = "count"
	// FieldMin holds the string denoting the min field in the database.
	FieldMin = "min"
	// FieldMax holds the string denoting the max field in the database.
	FieldMax = "max"
	// FieldMean holds the string denoting the mean field in the database.
	FieldMean = "mean"
	// FieldStddev holds the string denoting the stddev field in the database.
	FieldStddev = "stddev"
	// FieldMedian holds the string denoting the median field in the database.
	FieldMedian = "median"
	// FieldP75 holds the string denoting the p75 field in the database.
	FieldP75 = "p75"
	// FieldP95 holds the string denoting the p95 field in the database.
	FieldP95 = "p95"
	// FieldP99 holds the string denoting the p99 field in the database.
	FieldP99 = "p99"
	// FieldP999 holds the string denoting the p999 field in the database.
	FieldP999 = "p999"
	// FieldWID holds the string denoting the wid field in the database.
	FieldWID = "w_id"
	// EdgeMetric holds the string denoting the metric edge name in mutations.
	EdgeMetric = "metric"
	// Table holds the table name of the histogram in the database.
	Table = "histograms"
	// MetricTable is the table that holds the metric relation/edge.
	MetricTable = "histograms"
	// MetricInverseTable is the table name for the Metric entity.
	// It exists in this package in order to avoid circular dependency with the "metric" package.
	MetricInverseTable = "metrics"
	// MetricColumn is the table column denoting the metric relation/edge.
	MetricColumn = "metric_histograms"
)

// Columns holds all SQL columns for histogram fields.
var Columns = []string{
	FieldID,
	FieldTime,
	FieldCount,
	FieldMin,
	FieldMax,
	FieldMean,
	FieldStddev,
	FieldMedian,
	FieldP75,
	FieldP95,
	FieldP99,
	FieldP999,
	FieldWID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "histograms"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"metric_histograms",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Histogram queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTime orders the results by the time field.
func ByTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTime, opts...).ToFunc()
}

// ByCount orders the results by the count field.
func ByCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCount, opts...).ToFunc()
}

// ByMin orders the results by the min field.
func ByMin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMin, opts...).ToFunc()
}

// ByMax orders the results by the max field.
func ByMax(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMax, opts...).ToFunc()
}

// ByMean orders the results by the mean field.
func ByMean(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMean, opts...).ToFunc()
}

// ByStddev orders the results by the stddev field.
func ByStddev(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStddev, opts...).ToFunc()
}

// ByMedian orders the results by the median field.
func ByMedian(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMedian, opts...).ToFunc()
}

// ByP75 orders the results by the p75 field.
func ByP75(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldP75, opts...).ToFunc()
}

// ByP95 orders the results by the p95 field.
func ByP95(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldP95, opts...).ToFunc()
}

// ByP99 orders the results by the p99 field.
func ByP99(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldP99, opts...).ToFunc()
}

// ByP999 orders the results by the p999 field.
func ByP999(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldP999, opts...).ToFunc()
}

// ByWID orders the results by the wID field.
func ByWID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWID, opts...).ToFunc()
}

// ByMetricField orders the results by metric field.
func ByMetricField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMetricStep(), sql.OrderByField(field, opts...))
	}
}
func newMetricStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MetricInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, MetricTable, MetricColumn),
	)
}
