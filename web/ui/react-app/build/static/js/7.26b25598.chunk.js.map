{"version":3,"sources":["views/App/Metric.js"],"names":["ApexChartComponent","lazy","Metric","series","metrics","unit","timeRange","useState","data","fetchMetricData","appData","useContext","AppContext","appStatus","get","timestamp","isRealtime","includes","useEffect","length","getMetricData","then","res","useInterval","getMetricDataInterval","INTERVAL","METRIC_TYPE","HISTOGRAM","makeHistogramSeriesData","isArray","map","d","name","title","chartData","makeChartDataByTimeRange","fallback","height"],"mappings":"mKAaMA,EAAqBC,gBAAK,kBAAM,sDA8CvBC,UAzCA,SAAC,GAAkC,IAqB5CC,EArBYC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UAAgB,EACfC,mBAAS,IADM,mBACxCC,EADwC,KAClCC,EADkC,KAEzCC,EAAUC,qBAAWC,KACrBC,EAAYC,cAAIJ,EAAS,SAAU,IACnCK,EAAYD,cAAIJ,EAAS,YAAa,IACtCM,GAAc,CAAC,WAAY,UAAUC,SAASJ,GAEpDK,qBAAU,WACJd,EAAQe,OAAS,GACnBC,YAAchB,EAASE,EAAWS,EAAWC,GAAYK,MAAK,SAAAC,GAC5Db,EAAgBa,QAGnB,CAAClB,IACJmB,aAAY,WACVC,YAAsBpB,EAASI,GAC5Ba,MAAK,SAAAC,GACJb,EAAgBa,QAEnBN,EAAaS,IAAW,MACRX,cAAIN,EAAM,WAAY,MAEtBkB,IAAYC,UAC7BxB,EAAM,YAAOyB,YAAwBd,cAAIN,EAAM,qBAAsB,MAEjEqB,kBAAQrB,KACVL,EAASK,EAAKsB,KAAI,SAAAC,GAAC,OAAIjB,cAAIiB,EAAG,YAAa,CACzCC,KAAMD,EAAEE,MACRzB,KAAM,SAIZ,IAAM0B,EAAYlB,EAAamB,YAAyBhC,EAAQG,GAAaH,EAC7E,OAAO,kBAAC,WAAD,CAAUiC,SApCG,gDAqClB,kBAACpC,EAAD,CACEqC,OAAO,MACPlC,OAAQ+B,EACR7B,KAAMA","file":"static/js/7.26b25598.chunk.js","sourcesContent":["import React, { lazy, useEffect, useState, Suspense, useContext } from 'react';\nimport { get, isArray } from 'lodash';\nimport {\n  useInterval,\n  getMetricData,\n  getMetricDataInterval,\n  makeChartDataByTimeRange,\n  makeHistogramSeriesData,\n  INTERVAL,\n  METRIC_TYPE,\n} from '../../realtimeHelpers';\nimport { AppContext } from '../../context';\n\nconst ApexChartComponent = lazy(() => import('./ApexChart'));\n\nconst loading = () => <p>Loading chart...</p>;\n\n\nconst Metric = ({ metrics, unit, timeRange }) => {\n  const [data, fetchMetricData] = useState([]);\n  const appData = useContext(AppContext);\n  const appStatus = get(appData, 'status', '');\n  const timestamp = get(appData, 'timestamp', '');\n  const isRealtime = !['finished', 'cancel'].includes(appStatus);\n\n  useEffect(() => {\n    if (metrics.length > 0) {\n      getMetricData(metrics, timeRange, timestamp, isRealtime).then(res => {\n        fetchMetricData(res);\n      });\n    }\n  }, [metrics]);\n  useInterval(() => {\n    getMetricDataInterval(metrics, data)\n      .then(res => {\n        fetchMetricData(res);\n      });\n  }, isRealtime ? INTERVAL : null);\n  const metricType = get(data, '[0].type', '');\n  let series;\n  if (metricType === METRIC_TYPE.HISTOGRAM) {\n    series = [...makeHistogramSeriesData(get(data, '[0].chartData.data', []))];\n  } else {\n    if (isArray(data)) {\n      series = data.map(d => get(d, 'chartData', {\n        name: d.title,\n        data: []\n      }));\n    }\n  }\n  const chartData = isRealtime ? makeChartDataByTimeRange(series, timeRange) : series;\n  return <Suspense fallback={loading()}>\n    <ApexChartComponent\n      height=\"220\"\n      series={chartData}\n      unit={unit}/>\n  </Suspense>;\n};\n\nexport default Metric;\n"],"sourceRoot":""}