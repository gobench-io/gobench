{"version":3,"sources":["views/App/Graph.js"],"names":["MetricComponent","lazy","Graph","graph","timestamp","useState","metrics","fetchMetrics","TIME_RANGE","timeRange","setTimeRange","appData","useContext","AppContext","appStatus","get","useEffect","id","GoBenchAPI","getMetrics","then","res","isRealtime","includes","className","title","onClick","fallback","unit"],"mappings":"mKAMMA,EAAkBC,gBAAK,kBAAM,gCA+EpBC,UA3ED,SAAC,GAA+B,IAAD,IAA5BC,aAA4B,MAApB,GAAoB,EAAhBC,EAAgB,EAAhBA,UAAgB,EACXC,mBAAS,IADE,mBACpCC,EADoC,KAC3BC,EAD2B,OAETF,mBAASG,IAAW,OAFX,mBAEpCC,EAFoC,KAEzBC,EAFyB,KAGrCC,EAAUC,qBAAWC,KACrBC,EAAYC,cAAIJ,EAAS,SAAU,IACzCK,qBAAU,WACJb,GAASA,EAAMc,IACjBC,IAAWC,WAAWhB,EAAMc,IAAIG,MAAK,SAAAC,GACnC,OAAOd,EAAac,QAGvB,CAAClB,IACJ,IAAMmB,GAAc,CAAC,WAAY,UAAUC,SAAST,GAEpD,OACE,yBAAKU,UAAU,SACb,yBAAKA,UAAU,gBACb,wBAAIC,MAAOtB,EAAMc,IAAM,GACnBO,UAAU,eAAeT,cAAIZ,EAAO,QAAS,IADjD,KACwDY,cAAIZ,EAAO,OAAQ,IAD3E,KAGEmB,GACA,yBAAKE,UAAU,iBACb,wBAAIA,UAAU,2BACZ,wBAAIA,UAAU,qBACZ,4BACEA,UAAWf,IAAcD,IAAW,MAAQ,SAAW,GACvDkB,QAAS,kBAAMhB,EAAaF,IAAW,SAFzC,OAKF,wBAAIgB,UAAU,qBACZ,4BACEA,UAAWf,IAAcD,IAAW,OAAS,SAAW,GACxDkB,QAAS,kBAAMhB,EAAaF,IAAW,UAFzC,QAKF,wBAAIgB,UAAU,qBACZ,4BACEA,UAAWf,IAAcD,IAAW,OAAS,SAAW,GACxDkB,QAAS,kBAAMhB,EAAaF,IAAW,UAFzC,QAKF,wBAAIgB,UAAU,qBACZ,4BACEA,UAAWf,IAAcD,IAAW,MAAQ,SAAW,GACvDkB,QAAS,kBAAMhB,EAAaF,IAAW,SAFzC,OAKF,wBAAIgB,UAAU,qBACZ,4BACEA,UAAWf,IAAcD,IAAW,OAAS,SAAW,GACxDkB,QAAS,kBAAMhB,EAAaF,IAAW,UAFzC,QAKF,wBAAIgB,UAAU,qBACZ,4BACEA,UAAWf,IAAcD,IAAW,OAAS,SAAW,GACxDkB,QAAS,kBAAMhB,EAAaF,IAAW,UAFzC,WASV,kBAAC,WAAD,CAAUmB,SAjEM,gDAkEd,kBAAC3B,EAAD,CACES,UAAWA,EACXN,MAAOA,EACPG,QAASA,EACTF,UAAWA,EACXwB,KAAMb,cAAIZ,EAAO,OAAQ","file":"static/js/5.9d3f9eca.chunk.js","sourcesContent":["import React, { useEffect, useState, lazy, Suspense, useContext } from 'react';\nimport { get } from 'lodash';\nimport GoBenchAPI from '../../api/gobench';\nimport { TIME_RANGE } from '../../realtimeHelpers';\nimport { AppContext } from '../../context';\n\nconst MetricComponent = lazy(() => import('./Metric'));\n\nconst loading = () => <p>Loading graph...</p>;\n\nconst Graph = ({ graph = {}, timestamp }) => {\n  const [metrics, fetchMetrics] = useState([]);\n  const [timeRange, setTimeRange] = useState(TIME_RANGE['1h']);\n  const appData = useContext(AppContext);\n  const appStatus = get(appData, 'status', '');\n  useEffect(() => {\n    if (graph && graph.id) {\n      GoBenchAPI.getMetrics(graph.id).then(res => {\n        return fetchMetrics(res);\n      })\n    }\n  }, [graph]);\n  const isRealtime = !['finished', 'cancel'].includes(appStatus);\n\n  return (\n    <div className=\"graph\">\n      <div className=\"graph-header\">\n        <h5 title={graph.id || ''}\n            className=\"graph-title\">{get(graph, 'title', '')} ({get(graph, 'unit', '')})</h5>\n        {\n          isRealtime &&\n          <div className=\"options-group\">\n            <ul className=\"time-range-options-list\">\n              <li className=\"time-range-option\">\n                <button\n                  className={timeRange === TIME_RANGE['5m'] ? 'active' : ''}\n                  onClick={() => setTimeRange(TIME_RANGE['5m'])}>5m\n                </button>\n              </li>\n              <li className=\"time-range-option\">\n                <button\n                  className={timeRange === TIME_RANGE['15m'] ? 'active' : ''}\n                  onClick={() => setTimeRange(TIME_RANGE['15m'])}>15m\n                </button>\n              </li>\n              <li className=\"time-range-option\">\n                <button\n                  className={timeRange === TIME_RANGE['30m'] ? 'active' : ''}\n                  onClick={() => setTimeRange(TIME_RANGE['30m'])}>30m\n                </button>\n              </li>\n              <li className=\"time-range-option\">\n                <button\n                  className={timeRange === TIME_RANGE['1h'] ? 'active' : ''}\n                  onClick={() => setTimeRange(TIME_RANGE['1h'])}>1h\n                </button>\n              </li>\n              <li className=\"time-range-option\">\n                <button\n                  className={timeRange === TIME_RANGE['12h'] ? 'active' : ''}\n                  onClick={() => setTimeRange(TIME_RANGE['12h'])}>12h\n                </button>\n              </li>\n              <li className=\"time-range-option\">\n                <button\n                  className={timeRange === TIME_RANGE['24h'] ? 'active' : ''}\n                  onClick={() => setTimeRange(TIME_RANGE['24h'])}>24h\n                </button>\n              </li>\n            </ul>\n          </div>\n        }\n      </div>\n      <Suspense fallback={loading()}>\n        <MetricComponent\n          timeRange={timeRange}\n          graph={graph}\n          metrics={metrics}\n          timestamp={timestamp}\n          unit={get(graph, 'unit', '')}/>\n      </Suspense>\n    </div>\n  );\n};\n\nexport default Graph;\n"],"sourceRoot":""}