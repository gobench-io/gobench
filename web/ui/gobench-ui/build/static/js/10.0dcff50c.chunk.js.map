{"version":3,"sources":["utils/status.js","pages/application/index.js"],"names":["statusColors","running","init","finished","cancel","pending","provisioning","error","info","formatTag","str","length","split","map","text","index","color","colorFull","colors","Search","Input","withRouter","connect","application","dispatch","list","loading","total","history","useHistory","useState","fetching","setFetching","current","pageSize","showTotal","range","pagination","setPagination","columns","title","dataIndex","key","sorter","a","b","name","render","item","id","to","toUpperCase","x","moment","utc","format","startedAt","started_at","updated","updated_at","start","includes","status","diff","duration","style","float","marginLeft","type","onClick","clone","onConfirm","okText","cancelText","danger","destroy","className","backgroundColor","useEffect","payload","offset","limit","onSearch","keyword","data","icon","marginRight","push","placeholder","enterButton","value","dataSource","onChange","filters","extra","ellipsis"],"mappings":"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","file":"static/js/10.0dcff50c.chunk.js","sourcesContent":["export const statusColors = {\n  running: '#73d13d',\n  init: '#ffcc00',\n  finished: '#1890ff',\n  cancel: '#bfbfbf',\n  pending: '#faad14',\n  provisioning: '#00bcd4',\n  error: '#f5222d',\n  info: 'default'\n}\nexport const formatTag = (str) => {\n  if (!str || str.length === 0) {\n    return []\n  }\n  const tags = str.split(',').map((text, index) => ({\n    color: colorFull(index),\n    index,\n    text\n  }))\n  return tags\n}\nexport const colorFull = (index) => {\n  const colors = [\n    '#ff4d4f',\n    '#cf1322',\n    '#a8071a',\n    '#fa541c',\n    '#ff7a45',\n    '#ad2102',\n    '#ffa940',\n    '#fa8c16',\n    '#ad4e00',\n    '#ffc53d',\n    '#faad14',\n    '#d48806',\n    '#d4b106',\n    '#d3f261',\n    '#bae637',\n    '#a0d911',\n    '#7cb305',\n    '#5b8c00',\n    '#73d13d',\n    '#52c41a',\n    '#389e0d',\n    '#237804',\n    '#135200',\n    '#5cdbd3',\n    '#13c2c2',\n    '#1890ff',\n    '#597ef7',\n    '#b37feb',\n    '#ff85c0',\n    '#722ed1',\n    '#eb2f96',\n    '#595959'\n  ]\n  if (!index) {\n    return colors[0]\n  }\n\n  if (index >= colors.length) {\n    index = index % colors.length\n  }\n\n  return colors[index]\n}\n","import React, { useState, useEffect } from 'react'\nimport { Helmet } from 'react-helmet'\nimport { Table, Tag, Input, Button, Popconfirm, Tooltip } from 'antd'\nimport { connect } from 'react-redux'\nimport { withRouter, Link, useHistory } from 'react-router-dom'\nimport { statusColors, formatTag } from 'utils/status'\nimport { RetweetOutlined } from '@ant-design/icons'\nimport moment from 'moment'\nimport './style.scss'\n\nconst { Search } = Input\nconst mapStateToProps = ({ application, dispatch }) => {\n  const { list, loading, total } = application\n  return { list, loading, total, dispatch }\n}\n\nconst DefaultPage = ({ list, loading, total, dispatch }) => {\n  const history = useHistory()\n  const [fetching, setFetching] = useState(false)\n  const [pagination, setPagination] = useState({\n    current: 1,\n    pageSize: 10,\n    total: 0,\n    showTotal: (total, range) => `${range[0]}-${range[1]} of ${total} scenarios`\n  })\n  const columns = [\n    {\n      title: 'ID',\n      dataIndex: 'id',\n      key: 'id',\n      sorter: (a, b) => a.name.length - b.name.length\n    },\n    {\n      title: 'Status',\n      dataIndex: 'status',\n      key: 'status',\n      sorter: (a, b) => a.name.length - b.name.length,\n      render: (text, item) => (\n        <>\n          <Link key={item.id} to={`/applications/${item.id}`}>\n            <Tag color={statusColors[text]} key={item.id}>\n              {text.toUpperCase()}\n            </Tag>\n          </Link>\n        </>\n      )\n    },\n    {\n      title: 'Name',\n      dataIndex: 'name',\n      key: 'name',\n      sorter: (a, b) => a.name.length - b.name.length,\n      render: (text, item) => <Link key={item.id} to={`/applications/${item.id}`}>{text}</Link>\n    },\n    {\n      title: 'Tags',\n      dataIndex: 'tags',\n      key: 'tags',\n      render: (text) => {\n        return (\n          <>\n            {formatTag(text).map(x => (\n              <Tag color={x.color} key={x.index}>\n                {x.text}\n              </Tag>\n\n            ))}\n          </>\n        )\n      }\n    },\n    {\n      title: 'Started at',\n      dataIndex: 'started_at',\n      key: 'started_at',\n      sorter: (a, b) => a.name.length - b.name.length,\n      render: x => {\n        return moment(x).utc().format()\n      }\n    },\n    {\n      title: 'Duration',\n      dataIndex: 'duration',\n      key: 'duration',\n      render: (x, item) => {\n        const { started_at: startedAt, updated_at: updated } = item\n        const start = moment(startedAt).utc()\n        if (['provisioning', 'pending', 'error'].includes(item.status)) {\n          return <span />\n        }\n        if (['finished', 'cancel'].includes(item.status)) {\n          const end = moment(updated).utc()\n          const diff = end.diff(start)\n          const duration = moment.utc(diff).format('HH:mm:ss.SSS')\n          return <span>{duration}</span>\n        }\n        const diff = moment.utc().diff(start)\n        const duration = moment.utc(diff).format('HH:mm:ss.SSS')\n        return <span>{duration}</span>\n      }\n    },\n    {\n      title: 'Action',\n      dataIndex: 'action',\n      key: 'action',\n      render: (x, application) => {\n        return (\n          <div style={{ float: 'right' }} key={application.id}>\n            <Button\n              style={{ marginLeft: 5 }}\n              type='default'\n              onClick={() => clone(application)}\n            >\n              Clone\n            </Button>\n            {['running', 'pending'].includes(application.status) && (\n              <Popconfirm\n                title={`Are you sure cancel application ${application.name}?`}\n                onConfirm={() => cancel(application.id)}\n                okText='Yes'\n                cancelText='No'\n              >\n                <Button\n                  type='dashed'\n                  style={{ marginLeft: 5 }}\n                  danger\n                >\n                  Cancel\n                </Button>\n              </Popconfirm>\n            )}\n            {['finished', 'pending', 'error', 'cancel'].includes(application.status) && (\n              <Popconfirm\n                title={`Are you sure delete application ${application.name}?`}\n                onConfirm={() => destroy(application.id)}\n                okText='Yes'\n                cancelText='No'\n              >\n                <Button\n                  type='primary'\n                  className='delete-button'\n                  style={{ marginLeft: 5, color: 'white', backgroundColor: '#f5222d!important' }}\n                  danger\n                >\n                  Delete\n                </Button>\n              </Popconfirm>\n            )}\n          </div>\n        )\n      }\n    }\n  ]\n  useEffect(() => {\n    if (!fetching) {\n      dispatch({\n        type: 'application/LIST',\n        payload: { offset: (pagination.current - 1) * pagination.pageSize, limit: pagination.pageSize }\n      })\n      setFetching(true)\n    }\n  }, [list, total])\n  useEffect(() => {\n    if (total > 0 && total !== pagination.total) {\n      setPagination({ ...pagination, total })\n    }\n  }, [total])\n  const onTableChange = (pagination, filters, sorter, extra) => {\n    setPagination(pagination)\n    dispatch({\n      type: 'application/LIST',\n      payload: { offset: (pagination.current - 1) * pagination.pageSize, limit: pagination.pageSize, pagination, filters, sorter }\n    })\n  }\n  const onSearch = (keyword) => {\n    dispatch({\n      type: 'application/LIST',\n      payload: { offset: 0, limit: pagination.pageSize, keyword }\n    })\n  }\n  const clone = (data) => {\n    dispatch({\n      type: 'application/CLONE',\n      payload: { data }\n    })\n  }\n  const cancel = (id) => {\n    dispatch({\n      type: 'application/CANCEL',\n      payload: { id }\n    })\n  }\n  const destroy = (id) => {\n    dispatch({\n      type: 'application/DELETE',\n      payload: { id }\n    })\n  }\n  return (\n    <>\n      <div className='application'>\n        <Helmet title='Applications' />\n\n        <div className='card'>\n          <div className='card-header row'>\n            <div className='col-md-6'>\n              <div className='cui__utils__heading mb-0'>\n                <h2>Benchmark Application</h2>\n              </div>\n              <div className='text-muted'>A distributed benchmark tool with Golang</div>\n            </div>\n            <div className='col-md-6'>\n              <div className='text-right'>\n                <Tooltip title='Refresh'>\n                  <Button\n                    icon={<RetweetOutlined />}\n                    style={{ marginRight: 5 }}\n                    onClick={onSearch}\n                  />\n                </Tooltip>\n                <Button type='primary' onClick={() => history.push('/applications/create')}>Create Application</Button>\n              </div>\n            </div>\n          </div>\n          <div className='card-body'>\n            <div className='application-header'>\n              <div className='search-bar row'>\n                <div className='col-md-6 col-xs-12' />\n                <div className='col-md-6 col-xs-12'>\n                  <Search\n                    placeholder='input application name or tags'\n                    enterButton='Search'\n                    onSearch={value => onSearch(value)}\n                  />\n                </div>\n              </div>\n            </div>\n            <Table\n              dataSource={list}\n              pagination={pagination}\n              loading={loading}\n              columns={columns}\n              onChange={onTableChange}\n              ellipsis\n            />\n          </div>\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default withRouter(connect(mapStateToProps)(DefaultPage))\n"],"sourceRoot":""}