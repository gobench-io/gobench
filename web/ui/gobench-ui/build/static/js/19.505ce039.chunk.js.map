{"version":3,"sources":["pages/application/chart/graph.js"],"names":["Metric","lazy","withRouter","connect","application","dispatch","detail","graphMetrics","graph","timestamp","useState","TIME_RANGE","timeRange","setTimeRange","appStatus","get","isRealtime","includes","useEffect","every","x","graphId","id","type","payload","className","title","onClick","fallback","unit"],"mappings":"qLAMMA,EAASC,gBAAK,kBAAM,kCAkGXC,sBAAWC,aAhGF,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,SAEtC,MAAO,CACLC,OAF+BF,EAAzBE,OAGNC,aAH+BH,EAAjBG,aAIdF,cA2FsBF,EAtFN,SAAC,GAA0D,IAAxDG,EAAuD,EAAvDA,OAAQE,EAA+C,EAA/CA,MAAOD,EAAwC,EAAxCA,aAAcE,EAA0B,EAA1BA,UAAWJ,EAAe,EAAfA,SAC7D,EAAkCK,mBAASC,IAAW,OAAtD,mBAAOC,EAAP,KAAkBC,EAAlB,KACMC,EAAYC,cAAIT,EAAQ,SAAU,IAClCU,GAAc,CAAC,WAAY,UAAUC,SAASH,GAWpD,OAVAI,qBAAU,WACJV,GACED,EAAaY,OAAM,SAAAC,GAAC,OAAIA,EAAEC,UAAYb,EAAMc,OAC9CjB,EAAS,CACPkB,KAAM,4BACNC,QAAS,CAAEF,GAAId,EAAMc,QAI1B,CAACd,EAAMc,KAER,oCACE,yBAAKG,UAAU,SACb,yBAAKA,UAAU,gBACb,wBACEC,MAAOlB,EAAMc,IAAM,GACnBG,UAAU,eACVV,cAAIP,EAAO,QAAS,IAHtB,KAG6BO,cAAIP,EAAO,OAAQ,IAHhD,KAMEQ,GACE,yBAAKS,UAAU,iBACb,wBAAIA,UAAU,2BACZ,wBAAIA,UAAU,qBACZ,4BACEA,UAAWb,IAAcD,IAAW,MAAQ,SAAW,GACvDgB,QAAS,kBAAMd,EAAaF,IAAW,SAFzC,OAMF,wBAAIc,UAAU,qBACZ,4BACEA,UAAWb,IAAcD,IAAW,OAAS,SAAW,GACxDgB,QAAS,kBAAMd,EAAaF,IAAW,UAFzC,QAMF,wBAAIc,UAAU,qBACZ,4BACEA,UAAWb,IAAcD,IAAW,OAAS,SAAW,GACxDgB,QAAS,kBAAMd,EAAaF,IAAW,UAFzC,QAMF,wBAAIc,UAAU,qBACZ,4BACEA,UAAWb,IAAcD,IAAW,MAAQ,SAAW,GACvDgB,QAAS,kBAAMd,EAAaF,IAAW,SAFzC,OAMF,wBAAIc,UAAU,qBACZ,4BACEA,UAAWb,IAAcD,IAAW,OAAS,SAAW,GACxDgB,QAAS,kBAAMd,EAAaF,IAAW,UAFzC,QAMF,wBAAIc,UAAU,qBACZ,4BACEA,UAAWb,IAAcD,IAAW,OAAS,SAAW,GACxDgB,QAAS,kBAAMd,EAAaF,IAAW,UAFzC,WAUZ,kBAAC,WAAD,CAAUiB,SA1EI,gDA2EZ,kBAAC5B,EAAD,CACEY,UAAWA,EACXJ,MAAOA,EACPC,UAAWA,EACXoB,KAAMd,cAAIP,EAAO,OAAQ","file":"static/js/19.505ce039.chunk.js","sourcesContent":["import React, { lazy, useEffect, useState, Suspense } from 'react'\nimport { connect } from 'react-redux'\nimport { withRouter } from 'react-router-dom'\nimport { get } from 'lodash'\nimport { TIME_RANGE } from 'constant'\n\nconst Metric = lazy(() => import('./metric'))\n\nconst mapStateToProps = ({ application, dispatch }) => {\n  const { detail, graphMetrics } = application\n  return {\n    detail,\n    graphMetrics,\n    dispatch\n  }\n}\n\nconst loading = () => <p>Loading graph...</p>\nconst DefaultPage = ({ detail, graph, graphMetrics, timestamp, dispatch }) => {\n  const [timeRange, setTimeRange] = useState(TIME_RANGE['1h'])\n  const appStatus = get(detail, 'status', '')\n  const isRealtime = !['finished', 'cancel'].includes(appStatus)\n  useEffect(() => {\n    if (graph) {\n      if (graphMetrics.every(x => x.graphId !== graph.id)) {\n        dispatch({\n          type: 'application/GRAPH_METRICS',\n          payload: { id: graph.id }\n        })\n      }\n    }\n  }, [graph.id])\n  return (\n    <>\n      <div className='graph'>\n        <div className='graph-header'>\n          <h5\n            title={graph.id || ''}\n            className='graph-title'\n          >{get(graph, 'title', '')} ({get(graph, 'unit', '')})\n          </h5>\n          {\n            isRealtime &&\n              <div className='options-group'>\n                <ul className='time-range-options-list'>\n                  <li className='time-range-option'>\n                    <button\n                      className={timeRange === TIME_RANGE['5m'] ? 'active' : ''}\n                      onClick={() => setTimeRange(TIME_RANGE['5m'])}\n                    >5m\n                    </button>\n                  </li>\n                  <li className='time-range-option'>\n                    <button\n                      className={timeRange === TIME_RANGE['15m'] ? 'active' : ''}\n                      onClick={() => setTimeRange(TIME_RANGE['15m'])}\n                    >15m\n                    </button>\n                  </li>\n                  <li className='time-range-option'>\n                    <button\n                      className={timeRange === TIME_RANGE['30m'] ? 'active' : ''}\n                      onClick={() => setTimeRange(TIME_RANGE['30m'])}\n                    >30m\n                    </button>\n                  </li>\n                  <li className='time-range-option'>\n                    <button\n                      className={timeRange === TIME_RANGE['1h'] ? 'active' : ''}\n                      onClick={() => setTimeRange(TIME_RANGE['1h'])}\n                    >1h\n                    </button>\n                  </li>\n                  <li className='time-range-option'>\n                    <button\n                      className={timeRange === TIME_RANGE['12h'] ? 'active' : ''}\n                      onClick={() => setTimeRange(TIME_RANGE['12h'])}\n                    >12h\n                    </button>\n                  </li>\n                  <li className='time-range-option'>\n                    <button\n                      className={timeRange === TIME_RANGE['24h'] ? 'active' : ''}\n                      onClick={() => setTimeRange(TIME_RANGE['24h'])}\n                    >24h\n                    </button>\n                  </li>\n                </ul>\n              </div>\n          }\n        </div>\n        <Suspense fallback={loading()}>\n          <Metric\n            timeRange={timeRange}\n            graph={graph}\n            timestamp={timestamp}\n            unit={get(graph, 'unit', '')}\n          />\n        </Suspense>\n      </div>\n    </>\n  )\n}\n\nexport default withRouter(connect(mapStateToProps)(DefaultPage))\n"],"sourceRoot":""}