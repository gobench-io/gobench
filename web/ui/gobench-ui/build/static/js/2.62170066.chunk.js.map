{"version":3,"sources":["../node_modules/prismjs/components/prism-clike.js","../node_modules/prismjs/components/prism-go.js","../../src/index.js","../node_modules/prismjs/components/prism-core.js"],"names":["Prism","languages","clike","pattern","lookbehind","greedy","inside","go","extend","React","isWindows","global","test","navigator","isMacLike","className","Editor","state","capture","_recordCurrentState","input","value","selectionStart","selectionEnd","_getLines","text","_recordChange","overwrite","stack","offset","count","extras","Math","timestamp","Date","last","re","previous","current","record","_updateInput","_applyEdits","_undoEdit","_redoEdit","_handleKeyDown","tabSize","insertSpaces","ignoreTabKey","onKeyDown","e","tabCharacter","linesBeforeCaret","startLine","endLine","nextValue","i","line","startLineText","updatedSelection","hasSelection","textBeforeCaret","matches","indent","chars","_handleChange","_history","this","style","padding","highlight","textareaId","textareaClassName","autoFocus","disabled","form","maxLength","minLength","name","placeholder","readOnly","required","onClick","onFocus","onBlur","onKeyUp","preClassName","rest","contentStyle","paddingTop","paddingRight","paddingBottom","paddingLeft","highlighted","styles","ref","c","id","onChange","autoCapitalize","autoComplete","autoCorrect","spellCheck","data-gramm","aria-hidden","dangerouslySetInnerHTML","__html","children","type","cssText","history","session","Component","defaultProps","container","position","textAlign","boxSizing","overflow","textarea","top","left","height","width","resize","color","MozOsxFontSmoothing","WebkitFontSmoothing","WebkitTextFillColor","pointerEvents","editor","margin","border","background","display","fontFamily","fontSize","fontStyle","fontVariantLigatures","fontWeight","letterSpacing","lineHeight","textIndent","textRendering","textTransform","whiteSpace","wordBreak","overflowWrap","_self","lang","uniqueId","plainTextGrammar","_","manual","disableWorkerMessageHandler","util","encode","tokens","Token","content","alias","Array","isArray","map","replace","o","Object","prototype","toString","call","slice","objId","obj","defineProperty","clone","deepClone","visited","key","hasOwnProperty","forEach","v","getLanguage","element","parentElement","match","toLowerCase","currentScript","document","Error","err","src","exec","scripts","getElementsByTagName","isActive","defaultActivation","no","classList","contains","plain","plaintext","txt","redef","insertBefore","before","insert","root","grammar","ret","token","newToken","old","DFS","callback","property","propertyType","plugins","highlightAll","async","highlightAllUnder","env","selector","hooks","run","elements","apply","querySelectorAll","highlightElement","language","parent","nodeName","code","textContent","insertHighlightedCode","highlightedCode","innerHTML","hasAttribute","setAttribute","Worker","worker","filename","onmessage","evt","data","postMessage","JSON","stringify","immediateClose","tokenize","tokenList","LinkedList","addAfter","head","matchGrammar","startNode","startPos","rematch","patterns","j","length","cause","patternObj","flags","RegExp","source","currentNode","next","pos","tail","reach","str","removeCount","matchPattern","from","index","to","p","k","matchStr","after","removeFrom","prev","removeRange","wrapped","nestedRematch","list","array","node","push","toArray","all","add","callbacks","matchedStr","lastIndex","lookbehindLength","newNode","s","tag","classes","attributes","aliases","join","addEventListener","message","parse","close","script","highlightAutomaticallyCallback","readyState","defer","window","requestAnimationFrame","setTimeout","WorkerGlobalScope","self","module","exports"],"mappings":"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","file":"static/js/2.62170066.chunk.js","sourcesContent":["Prism.languages.clike = {\n\t'comment': [\n\t\t{\n\t\t\tpattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true\n\t\t},\n\t\t{\n\t\t\tpattern: /(^|[^\\\\:])\\/\\/.*/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true\n\t\t}\n\t],\n\t'string': {\n\t\tpattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n\t\tgreedy: true\n\t},\n\t'class-name': {\n\t\tpattern: /(\\b(?:class|interface|extends|implements|trait|instanceof|new)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,\n\t\tlookbehind: true,\n\t\tinside: {\n\t\t\t'punctuation': /[.\\\\]/\n\t\t}\n\t},\n\t'keyword': /\\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\\b/,\n\t'boolean': /\\b(?:true|false)\\b/,\n\t'function': /\\b\\w+(?=\\()/,\n\t'number': /\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n\t'operator': /[<>]=?|[!=]=?=?|--?|\\+\\+?|&&?|\\|\\|?|[?*/~^%]/,\n\t'punctuation': /[{}[\\];(),.:]/\n};\n","Prism.languages.go = Prism.languages.extend('clike', {\n\t'string': {\n\t\tpattern: /([\"'`])(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n\t\tgreedy: true\n\t},\n\t'keyword': /\\b(?:break|case|chan|const|continue|default|defer|else|fallthrough|for|func|go(?:to)?|if|import|interface|map|package|range|return|select|struct|switch|type|var)\\b/,\n\t'boolean': /\\b(?:_|iota|nil|true|false)\\b/,\n\t'number': /(?:\\b0x[a-f\\d]+|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[-+]?\\d+)?)i?/i,\n\t'operator': /[*\\/%^!=]=?|\\+[=+]?|-[=-]?|\\|[=|]?|&(?:=|&|\\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\\.\\.\\./,\n\t'builtin': /\\b(?:bool|byte|complex(?:64|128)|error|float(?:32|64)|rune|string|u?int(?:8|16|32|64)?|uintptr|append|cap|close|complex|copy|delete|imag|len|make|new|panic|print(?:ln)?|real|recover)\\b/\n});\ndelete Prism.languages.go['class-name'];\n","/* @flow */\n/* global global */\n\nimport * as React from 'react';\n\ntype Props = React.ElementConfig<'div'> & {\n  // Props for the component\n  value: string,\n  onValueChange: (value: string) => mixed,\n  highlight: (value: string) => string | React.Node,\n  tabSize: number,\n  insertSpaces: boolean,\n  ignoreTabKey: boolean,\n  padding: number | string,\n  style?: {},\n\n  // Props for the textarea\n  textareaId?: string,\n  textareaClassName?: string,\n  autoFocus?: boolean,\n  disabled?: boolean,\n  form?: string,\n  maxLength?: number,\n  minLength?: number,\n  name?: string,\n  placeholder?: string,\n  readOnly?: boolean,\n  required?: boolean,\n  onClick?: (e: MouseEvent) => mixed,\n  onFocus?: (e: FocusEvent) => mixed,\n  onBlur?: (e: FocusEvent) => mixed,\n  onKeyUp?: (e: KeyboardEvent) => mixed,\n  onKeyDown?: (e: KeyboardEvent) => mixed,\n\n  // Props for the hightlighted code’s pre element\n  preClassName?: string,\n};\n\ntype State = {\n  capture: boolean,\n};\n\ntype Record = {\n  value: string,\n  selectionStart: number,\n  selectionEnd: number,\n};\n\ntype History = {\n  stack: Array<Record & { timestamp: number }>,\n  offset: number,\n};\n\nconst KEYCODE_ENTER = 13;\nconst KEYCODE_TAB = 9;\nconst KEYCODE_BACKSPACE = 8;\nconst KEYCODE_Y = 89;\nconst KEYCODE_Z = 90;\nconst KEYCODE_M = 77;\nconst KEYCODE_PARENS = 57;\nconst KEYCODE_BRACKETS = 219;\nconst KEYCODE_QUOTE = 222;\nconst KEYCODE_BACK_QUOTE = 192;\nconst KEYCODE_ESCAPE = 27;\n\nconst HISTORY_LIMIT = 100;\nconst HISTORY_TIME_GAP = 3000;\n\nconst isWindows = 'navigator' in global && /Win/i.test(navigator.platform);\nconst isMacLike =\n  'navigator' in global && /(Mac|iPhone|iPod|iPad)/i.test(navigator.platform);\n\nconst className = 'npm__react-simple-code-editor__textarea';\n\nconst cssText = /* CSS */ `\n/**\n * Reset the text fill color so that placeholder is visible\n */\n.${className}:empty {\n  -webkit-text-fill-color: inherit !important;\n}\n\n/**\n * Hack to apply on some CSS on IE10 and IE11\n */\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  /**\n    * IE doesn't support '-webkit-text-fill-color'\n    * So we use 'color: transparent' to make the text transparent on IE\n    * Unlike other browsers, it doesn't affect caret color in IE\n    */\n  .${className} {\n    color: transparent !important;\n  }\n\n  .${className}::selection {\n    background-color: #accef7 !important;\n    color: transparent !important;\n  }\n}\n`;\n\nexport default class Editor extends React.Component<Props, State> {\n  static defaultProps = {\n    tabSize: 2,\n    insertSpaces: true,\n    ignoreTabKey: false,\n    padding: 0,\n  };\n\n  state = {\n    capture: true,\n  };\n\n  componentDidMount() {\n    this._recordCurrentState();\n  }\n\n  _recordCurrentState = () => {\n    const input = this._input;\n\n    if (!input) return;\n\n    // Save current state of the input\n    const { value, selectionStart, selectionEnd } = input;\n\n    this._recordChange({\n      value,\n      selectionStart,\n      selectionEnd,\n    });\n  };\n\n  _getLines = (text: string, position: number) =>\n    text.substring(0, position).split('\\n');\n\n  _recordChange = (record: Record, overwrite?: boolean = false) => {\n    const { stack, offset } = this._history;\n\n    if (stack.length && offset > -1) {\n      // When something updates, drop the redo operations\n      this._history.stack = stack.slice(0, offset + 1);\n\n      // Limit the number of operations to 100\n      const count = this._history.stack.length;\n\n      if (count > HISTORY_LIMIT) {\n        const extras = count - HISTORY_LIMIT;\n\n        this._history.stack = stack.slice(extras, count);\n        this._history.offset = Math.max(this._history.offset - extras, 0);\n      }\n    }\n\n    const timestamp = Date.now();\n\n    if (overwrite) {\n      const last = this._history.stack[this._history.offset];\n\n      if (last && timestamp - last.timestamp < HISTORY_TIME_GAP) {\n        // A previous entry exists and was in short interval\n\n        // Match the last word in the line\n        const re = /[^a-z0-9]([a-z0-9]+)$/i;\n\n        // Get the previous line\n        const previous = this._getLines(last.value, last.selectionStart)\n          .pop()\n          .match(re);\n\n        // Get the current line\n        const current = this._getLines(record.value, record.selectionStart)\n          .pop()\n          .match(re);\n\n        if (previous && current && current[1].startsWith(previous[1])) {\n          // The last word of the previous line and current line match\n          // Overwrite previous entry so that undo will remove whole word\n          this._history.stack[this._history.offset] = { ...record, timestamp };\n\n          return;\n        }\n      }\n    }\n\n    // Add the new operation to the stack\n    this._history.stack.push({ ...record, timestamp });\n    this._history.offset++;\n  };\n\n  _updateInput = (record: Record) => {\n    const input = this._input;\n\n    if (!input) return;\n\n    // Update values and selection state\n    input.value = record.value;\n    input.selectionStart = record.selectionStart;\n    input.selectionEnd = record.selectionEnd;\n\n    this.props.onValueChange(record.value);\n  };\n\n  _applyEdits = (record: Record) => {\n    // Save last selection state\n    const input = this._input;\n    const last = this._history.stack[this._history.offset];\n\n    if (last && input) {\n      this._history.stack[this._history.offset] = {\n        ...last,\n        selectionStart: input.selectionStart,\n        selectionEnd: input.selectionEnd,\n      };\n    }\n\n    // Save the changes\n    this._recordChange(record);\n    this._updateInput(record);\n  };\n\n  _undoEdit = () => {\n    const { stack, offset } = this._history;\n\n    // Get the previous edit\n    const record = stack[offset - 1];\n\n    if (record) {\n      // Apply the changes and update the offset\n      this._updateInput(record);\n      this._history.offset = Math.max(offset - 1, 0);\n    }\n  };\n\n  _redoEdit = () => {\n    const { stack, offset } = this._history;\n\n    // Get the next edit\n    const record = stack[offset + 1];\n\n    if (record) {\n      // Apply the changes and update the offset\n      this._updateInput(record);\n      this._history.offset = Math.min(offset + 1, stack.length - 1);\n    }\n  };\n\n  _handleKeyDown = (e: *) => {\n    const { tabSize, insertSpaces, ignoreTabKey, onKeyDown } = this.props;\n\n    if (onKeyDown) {\n      onKeyDown(e);\n\n      if (e.defaultPrevented) {\n        return;\n      }\n    }\n\n    if (e.keyCode === KEYCODE_ESCAPE) {\n      e.target.blur();\n    }\n\n    const { value, selectionStart, selectionEnd } = e.target;\n\n    const tabCharacter = (insertSpaces ? ' ' : '\\t').repeat(tabSize);\n\n    if (e.keyCode === KEYCODE_TAB && !ignoreTabKey && this.state.capture) {\n      // Prevent focus change\n      e.preventDefault();\n\n      if (e.shiftKey) {\n        // Unindent selected lines\n        const linesBeforeCaret = this._getLines(value, selectionStart);\n        const startLine = linesBeforeCaret.length - 1;\n        const endLine = this._getLines(value, selectionEnd).length - 1;\n        const nextValue = value\n          .split('\\n')\n          .map((line, i) => {\n            if (\n              i >= startLine &&\n              i <= endLine &&\n              line.startsWith(tabCharacter)\n            ) {\n              return line.substring(tabCharacter.length);\n            }\n\n            return line;\n          })\n          .join('\\n');\n\n        if (value !== nextValue) {\n          const startLineText = linesBeforeCaret[startLine];\n\n          this._applyEdits({\n            value: nextValue,\n            // Move the start cursor if first line in selection was modified\n            // It was modified only if it started with a tab\n            selectionStart: startLineText.startsWith(tabCharacter)\n              ? selectionStart - tabCharacter.length\n              : selectionStart,\n            // Move the end cursor by total number of characters removed\n            selectionEnd: selectionEnd - (value.length - nextValue.length),\n          });\n        }\n      } else if (selectionStart !== selectionEnd) {\n        // Indent selected lines\n        const linesBeforeCaret = this._getLines(value, selectionStart);\n        const startLine = linesBeforeCaret.length - 1;\n        const endLine = this._getLines(value, selectionEnd).length - 1;\n        const startLineText = linesBeforeCaret[startLine];\n\n        this._applyEdits({\n          value: value\n            .split('\\n')\n            .map((line, i) => {\n              if (i >= startLine && i <= endLine) {\n                return tabCharacter + line;\n              }\n\n              return line;\n            })\n            .join('\\n'),\n          // Move the start cursor by number of characters added in first line of selection\n          // Don't move it if it there was no text before cursor\n          selectionStart: /\\S/.test(startLineText)\n            ? selectionStart + tabCharacter.length\n            : selectionStart,\n          // Move the end cursor by total number of characters added\n          selectionEnd:\n            selectionEnd + tabCharacter.length * (endLine - startLine + 1),\n        });\n      } else {\n        const updatedSelection = selectionStart + tabCharacter.length;\n\n        this._applyEdits({\n          // Insert tab character at caret\n          value:\n            value.substring(0, selectionStart) +\n            tabCharacter +\n            value.substring(selectionEnd),\n          // Update caret position\n          selectionStart: updatedSelection,\n          selectionEnd: updatedSelection,\n        });\n      }\n    } else if (e.keyCode === KEYCODE_BACKSPACE) {\n      const hasSelection = selectionStart !== selectionEnd;\n      const textBeforeCaret = value.substring(0, selectionStart);\n\n      if (textBeforeCaret.endsWith(tabCharacter) && !hasSelection) {\n        // Prevent default delete behaviour\n        e.preventDefault();\n\n        const updatedSelection = selectionStart - tabCharacter.length;\n\n        this._applyEdits({\n          // Remove tab character at caret\n          value:\n            value.substring(0, selectionStart - tabCharacter.length) +\n            value.substring(selectionEnd),\n          // Update caret position\n          selectionStart: updatedSelection,\n          selectionEnd: updatedSelection,\n        });\n      }\n    } else if (e.keyCode === KEYCODE_ENTER) {\n      // Ignore selections\n      if (selectionStart === selectionEnd) {\n        // Get the current line\n        const line = this._getLines(value, selectionStart).pop();\n        const matches = line.match(/^\\s+/);\n\n        if (matches && matches[0]) {\n          e.preventDefault();\n\n          // Preserve indentation on inserting a new line\n          const indent = '\\n' + matches[0];\n          const updatedSelection = selectionStart + indent.length;\n\n          this._applyEdits({\n            // Insert indentation character at caret\n            value:\n              value.substring(0, selectionStart) +\n              indent +\n              value.substring(selectionEnd),\n            // Update caret position\n            selectionStart: updatedSelection,\n            selectionEnd: updatedSelection,\n          });\n        }\n      }\n    } else if (\n      e.keyCode === KEYCODE_PARENS ||\n      e.keyCode === KEYCODE_BRACKETS ||\n      e.keyCode === KEYCODE_QUOTE ||\n      e.keyCode === KEYCODE_BACK_QUOTE\n    ) {\n      let chars;\n\n      if (e.keyCode === KEYCODE_PARENS && e.shiftKey) {\n        chars = ['(', ')'];\n      } else if (e.keyCode === KEYCODE_BRACKETS) {\n        if (e.shiftKey) {\n          chars = ['{', '}'];\n        } else {\n          chars = ['[', ']'];\n        }\n      } else if (e.keyCode === KEYCODE_QUOTE) {\n        if (e.shiftKey) {\n          chars = ['\"', '\"'];\n        } else {\n          chars = [\"'\", \"'\"];\n        }\n      } else if (e.keyCode === KEYCODE_BACK_QUOTE && !e.shiftKey) {\n        chars = ['`', '`'];\n      }\n\n      // If text is selected, wrap them in the characters\n      if (selectionStart !== selectionEnd && chars) {\n        e.preventDefault();\n\n        this._applyEdits({\n          value:\n            value.substring(0, selectionStart) +\n            chars[0] +\n            value.substring(selectionStart, selectionEnd) +\n            chars[1] +\n            value.substring(selectionEnd),\n          // Update caret position\n          selectionStart,\n          selectionEnd: selectionEnd + 2,\n        });\n      }\n    } else if (\n      (isMacLike\n        ? // Trigger undo with ⌘+Z on Mac\n          e.metaKey && e.keyCode === KEYCODE_Z\n        : // Trigger undo with Ctrl+Z on other platforms\n          e.ctrlKey && e.keyCode === KEYCODE_Z) &&\n      !e.shiftKey &&\n      !e.altKey\n    ) {\n      e.preventDefault();\n\n      this._undoEdit();\n    } else if (\n      (isMacLike\n        ? // Trigger redo with ⌘+Shift+Z on Mac\n          e.metaKey && e.keyCode === KEYCODE_Z && e.shiftKey\n        : isWindows\n          ? // Trigger redo with Ctrl+Y on Windows\n            e.ctrlKey && e.keyCode === KEYCODE_Y\n          : // Trigger redo with Ctrl+Shift+Z on other platforms\n            e.ctrlKey && e.keyCode === KEYCODE_Z && e.shiftKey) &&\n      !e.altKey\n    ) {\n      e.preventDefault();\n\n      this._redoEdit();\n    } else if (\n      e.keyCode === KEYCODE_M &&\n      e.ctrlKey &&\n      (isMacLike ? e.shiftKey : true)\n    ) {\n      e.preventDefault();\n\n      // Toggle capturing tab key so users can focus away\n      this.setState(state => ({\n        capture: !state.capture,\n      }));\n    }\n  };\n\n  _handleChange = (e: *) => {\n    const { value, selectionStart, selectionEnd } = e.target;\n\n    this._recordChange(\n      {\n        value,\n        selectionStart,\n        selectionEnd,\n      },\n      true\n    );\n\n    this.props.onValueChange(value);\n  };\n\n  _history: History = {\n    stack: [],\n    offset: -1,\n  };\n\n  _input: ?HTMLTextAreaElement;\n\n  get session() {\n    return {\n      history: this._history,\n    };\n  }\n\n  set session(session: { history: History }) {\n    this._history = session.history;\n  }\n\n  render() {\n    const {\n      value,\n      style,\n      padding,\n      highlight,\n      textareaId,\n      textareaClassName,\n      autoFocus,\n      disabled,\n      form,\n      maxLength,\n      minLength,\n      name,\n      placeholder,\n      readOnly,\n      required,\n      onClick,\n      onFocus,\n      onBlur,\n      onKeyUp,\n      /* eslint-disable no-unused-vars */\n      onKeyDown,\n      onValueChange,\n      tabSize,\n      insertSpaces,\n      ignoreTabKey,\n      /* eslint-enable no-unused-vars */\n      preClassName,\n      ...rest\n    } = this.props;\n\n    const contentStyle = {\n      paddingTop: padding,\n      paddingRight: padding,\n      paddingBottom: padding,\n      paddingLeft: padding,\n    };\n\n    const highlighted = highlight(value);\n\n    return (\n      <div {...rest} style={{ ...styles.container, ...style }}>\n        <textarea\n          ref={c => (this._input = c)}\n          style={{\n            ...styles.editor,\n            ...styles.textarea,\n            ...contentStyle,\n          }}\n          className={\n            className + (textareaClassName ? ` ${textareaClassName}` : '')\n          }\n          id={textareaId}\n          value={value}\n          onChange={this._handleChange}\n          onKeyDown={this._handleKeyDown}\n          onClick={onClick}\n          onKeyUp={onKeyUp}\n          onFocus={onFocus}\n          onBlur={onBlur}\n          disabled={disabled}\n          form={form}\n          maxLength={maxLength}\n          minLength={minLength}\n          name={name}\n          placeholder={placeholder}\n          readOnly={readOnly}\n          required={required}\n          autoFocus={autoFocus}\n          autoCapitalize=\"off\"\n          autoComplete=\"off\"\n          autoCorrect=\"off\"\n          spellCheck={false}\n          data-gramm={false}\n        />\n        <pre\n          className={preClassName}\n          aria-hidden=\"true\"\n          style={{ ...styles.editor, ...styles.highlight, ...contentStyle }}\n          {...(typeof highlighted === 'string'\n            ? { dangerouslySetInnerHTML: { __html: highlighted + '<br />' } }\n            : { children: highlighted })}\n        />\n        {/* eslint-disable-next-line react/no-danger */}\n        <style type=\"text/css\" dangerouslySetInnerHTML={{ __html: cssText }} />\n      </div>\n    );\n  }\n}\n\nconst styles = {\n  container: {\n    position: 'relative',\n    textAlign: 'left',\n    boxSizing: 'border-box',\n    padding: 0,\n    overflow: 'hidden',\n  },\n  textarea: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    height: '100%',\n    width: '100%',\n    resize: 'none',\n    color: 'inherit',\n    overflow: 'hidden',\n    MozOsxFontSmoothing: 'grayscale',\n    WebkitFontSmoothing: 'antialiased',\n    WebkitTextFillColor: 'transparent',\n  },\n  highlight: {\n    position: 'relative',\n    pointerEvents: 'none',\n  },\n  editor: {\n    margin: 0,\n    border: 0,\n    background: 'none',\n    boxSizing: 'inherit',\n    display: 'inherit',\n    fontFamily: 'inherit',\n    fontSize: 'inherit',\n    fontStyle: 'inherit',\n    fontVariantLigatures: 'inherit',\n    fontWeight: 'inherit',\n    letterSpacing: 'inherit',\n    lineHeight: 'inherit',\n    tabSize: 'inherit',\n    textIndent: 'inherit',\n    textRendering: 'inherit',\n    textTransform: 'inherit',\n    whiteSpace: 'pre-wrap',\n    wordBreak: 'keep-all',\n    overflowWrap: 'break-word',\n  },\n};\n","/// <reference lib=\"WebWorker\"/>\n\nvar _self = (typeof window !== 'undefined')\n\t? window   // if in browser\n\t: (\n\t\t(typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope)\n\t\t\t? self // if in worker\n\t\t\t: {}   // if in node js\n\t);\n\n/**\n * Prism: Lightweight, robust, elegant syntax highlighting\n *\n * @license MIT <https://opensource.org/licenses/MIT>\n * @author Lea Verou <https://lea.verou.me>\n * @namespace\n * @public\n */\nvar Prism = (function (_self) {\n\n\t// Private helper vars\n\tvar lang = /\\blang(?:uage)?-([\\w-]+)\\b/i;\n\tvar uniqueId = 0;\n\n\t// The grammar object for plaintext\n\tvar plainTextGrammar = {};\n\n\n\tvar _ = {\n\t\t/**\n\t\t * By default, Prism will attempt to highlight all code elements (by calling {@link Prism.highlightAll}) on the\n\t\t * current page after the page finished loading. This might be a problem if e.g. you wanted to asynchronously load\n\t\t * additional languages or plugins yourself.\n\t\t *\n\t\t * By setting this value to `true`, Prism will not automatically highlight all code elements on the page.\n\t\t *\n\t\t * You obviously have to change this value before the automatic highlighting started. To do this, you can add an\n\t\t * empty Prism object into the global scope before loading the Prism script like this:\n\t\t *\n\t\t * ```js\n\t\t * window.Prism = window.Prism || {};\n\t\t * Prism.manual = true;\n\t\t * // add a new <script> to load Prism's script\n\t\t * ```\n\t\t *\n\t\t * @default false\n\t\t * @type {boolean}\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\tmanual: _self.Prism && _self.Prism.manual,\n\t\tdisableWorkerMessageHandler: _self.Prism && _self.Prism.disableWorkerMessageHandler,\n\n\t\t/**\n\t\t * A namespace for utility methods.\n\t\t *\n\t\t * All function in this namespace that are not explicitly marked as _public_ are for __internal use only__ and may\n\t\t * change or disappear at any time.\n\t\t *\n\t\t * @namespace\n\t\t * @memberof Prism\n\t\t */\n\t\tutil: {\n\t\t\tencode: function encode(tokens) {\n\t\t\t\tif (tokens instanceof Token) {\n\t\t\t\t\treturn new Token(tokens.type, encode(tokens.content), tokens.alias);\n\t\t\t\t} else if (Array.isArray(tokens)) {\n\t\t\t\t\treturn tokens.map(encode);\n\t\t\t\t} else {\n\t\t\t\t\treturn tokens.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\\u00a0/g, ' ');\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns the name of the type of the given value.\n\t\t\t *\n\t\t\t * @param {any} o\n\t\t\t * @returns {string}\n\t\t\t * @example\n\t\t\t * type(null)      === 'Null'\n\t\t\t * type(undefined) === 'Undefined'\n\t\t\t * type(123)       === 'Number'\n\t\t\t * type('foo')     === 'String'\n\t\t\t * type(true)      === 'Boolean'\n\t\t\t * type([1, 2])    === 'Array'\n\t\t\t * type({})        === 'Object'\n\t\t\t * type(String)    === 'Function'\n\t\t\t * type(/abc+/)    === 'RegExp'\n\t\t\t */\n\t\t\ttype: function (o) {\n\t\t\t\treturn Object.prototype.toString.call(o).slice(8, -1);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns a unique number for the given object. Later calls will still return the same number.\n\t\t\t *\n\t\t\t * @param {Object} obj\n\t\t\t * @returns {number}\n\t\t\t */\n\t\t\tobjId: function (obj) {\n\t\t\t\tif (!obj['__id']) {\n\t\t\t\t\tObject.defineProperty(obj, '__id', { value: ++uniqueId });\n\t\t\t\t}\n\t\t\t\treturn obj['__id'];\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Creates a deep clone of the given object.\n\t\t\t *\n\t\t\t * The main intended use of this function is to clone language definitions.\n\t\t\t *\n\t\t\t * @param {T} o\n\t\t\t * @param {Record<number, any>} [visited]\n\t\t\t * @returns {T}\n\t\t\t * @template T\n\t\t\t */\n\t\t\tclone: function deepClone(o, visited) {\n\t\t\t\tvisited = visited || {};\n\n\t\t\t\tvar clone; var id;\n\t\t\t\tswitch (_.util.type(o)) {\n\t\t\t\t\tcase 'Object':\n\t\t\t\t\t\tid = _.util.objId(o);\n\t\t\t\t\t\tif (visited[id]) {\n\t\t\t\t\t\t\treturn visited[id];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tclone = /** @type {Record<string, any>} */ ({});\n\t\t\t\t\t\tvisited[id] = clone;\n\n\t\t\t\t\t\tfor (var key in o) {\n\t\t\t\t\t\t\tif (o.hasOwnProperty(key)) {\n\t\t\t\t\t\t\t\tclone[key] = deepClone(o[key], visited);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn /** @type {any} */ (clone);\n\n\t\t\t\t\tcase 'Array':\n\t\t\t\t\t\tid = _.util.objId(o);\n\t\t\t\t\t\tif (visited[id]) {\n\t\t\t\t\t\t\treturn visited[id];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tclone = [];\n\t\t\t\t\t\tvisited[id] = clone;\n\n\t\t\t\t\t\t(/** @type {Array} */(/** @type {any} */(o))).forEach(function (v, i) {\n\t\t\t\t\t\t\tclone[i] = deepClone(v, visited);\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\treturn /** @type {any} */ (clone);\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn o;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns the Prism language of the given element set by a `language-xxxx` or `lang-xxxx` class.\n\t\t\t *\n\t\t\t * If no language is set for the element or the element is `null` or `undefined`, `none` will be returned.\n\t\t\t *\n\t\t\t * @param {Element} element\n\t\t\t * @returns {string}\n\t\t\t */\n\t\t\tgetLanguage: function (element) {\n\t\t\t\twhile (element && !lang.test(element.className)) {\n\t\t\t\t\telement = element.parentElement;\n\t\t\t\t}\n\t\t\t\tif (element) {\n\t\t\t\t\treturn (element.className.match(lang) || [, 'none'])[1].toLowerCase();\n\t\t\t\t}\n\t\t\t\treturn 'none';\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns the script element that is currently executing.\n\t\t\t *\n\t\t\t * This does __not__ work for line script element.\n\t\t\t *\n\t\t\t * @returns {HTMLScriptElement | null}\n\t\t\t */\n\t\t\tcurrentScript: function () {\n\t\t\t\tif (typeof document === 'undefined') {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tif ('currentScript' in document && 1 < 2 /* hack to trip TS' flow analysis */) {\n\t\t\t\t\treturn /** @type {any} */ (document.currentScript);\n\t\t\t\t}\n\n\t\t\t\t// IE11 workaround\n\t\t\t\t// we'll get the src of the current script by parsing IE11's error stack trace\n\t\t\t\t// this will not work for inline scripts\n\n\t\t\t\ttry {\n\t\t\t\t\tthrow new Error();\n\t\t\t\t} catch (err) {\n\t\t\t\t\t// Get file src url from stack. Specifically works with the format of stack traces in IE.\n\t\t\t\t\t// A stack will look like this:\n\t\t\t\t\t//\n\t\t\t\t\t// Error\n\t\t\t\t\t//    at _.util.currentScript (http://localhost/components/prism-core.js:119:5)\n\t\t\t\t\t//    at Global code (http://localhost/components/prism-core.js:606:1)\n\n\t\t\t\t\tvar src = (/at [^(\\r\\n]*\\((.*):.+:.+\\)$/i.exec(err.stack) || [])[1];\n\t\t\t\t\tif (src) {\n\t\t\t\t\t\tvar scripts = document.getElementsByTagName('script');\n\t\t\t\t\t\tfor (var i in scripts) {\n\t\t\t\t\t\t\tif (scripts[i].src == src) {\n\t\t\t\t\t\t\t\treturn scripts[i];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns whether a given class is active for `element`.\n\t\t\t *\n\t\t\t * The class can be activated if `element` or one of its ancestors has the given class and it can be deactivated\n\t\t\t * if `element` or one of its ancestors has the negated version of the given class. The _negated version_ of the\n\t\t\t * given class is just the given class with a `no-` prefix.\n\t\t\t *\n\t\t\t * Whether the class is active is determined by the closest ancestor of `element` (where `element` itself is\n\t\t\t * closest ancestor) that has the given class or the negated version of it. If neither `element` nor any of its\n\t\t\t * ancestors have the given class or the negated version of it, then the default activation will be returned.\n\t\t\t *\n\t\t\t * In the paradoxical situation where the closest ancestor contains __both__ the given class and the negated\n\t\t\t * version of it, the class is considered active.\n\t\t\t *\n\t\t\t * @param {Element} element\n\t\t\t * @param {string} className\n\t\t\t * @param {boolean} [defaultActivation=false]\n\t\t\t * @returns {boolean}\n\t\t\t */\n\t\t\tisActive: function (element, className, defaultActivation) {\n\t\t\t\tvar no = 'no-' + className;\n\n\t\t\t\twhile (element) {\n\t\t\t\t\tvar classList = element.classList;\n\t\t\t\t\tif (classList.contains(className)) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tif (classList.contains(no)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\telement = element.parentElement;\n\t\t\t\t}\n\t\t\t\treturn !!defaultActivation;\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * This namespace contains all currently loaded languages and the some helper functions to create and modify languages.\n\t\t *\n\t\t * @namespace\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\tlanguages: {\n\t\t\t/**\n\t\t\t * The grammar for plain, unformatted text.\n\t\t\t */\n\t\t\tplain: plainTextGrammar,\n\t\t\tplaintext: plainTextGrammar,\n\t\t\ttext: plainTextGrammar,\n\t\t\ttxt: plainTextGrammar,\n\n\t\t\t/**\n\t\t\t * Creates a deep copy of the language with the given id and appends the given tokens.\n\t\t\t *\n\t\t\t * If a token in `redef` also appears in the copied language, then the existing token in the copied language\n\t\t\t * will be overwritten at its original position.\n\t\t\t *\n\t\t\t * ## Best practices\n\t\t\t *\n\t\t\t * Since the position of overwriting tokens (token in `redef` that overwrite tokens in the copied language)\n\t\t\t * doesn't matter, they can technically be in any order. However, this can be confusing to others that trying to\n\t\t\t * understand the language definition because, normally, the order of tokens matters in Prism grammars.\n\t\t\t *\n\t\t\t * Therefore, it is encouraged to order overwriting tokens according to the positions of the overwritten tokens.\n\t\t\t * Furthermore, all non-overwriting tokens should be placed after the overwriting ones.\n\t\t\t *\n\t\t\t * @param {string} id The id of the language to extend. This has to be a key in `Prism.languages`.\n\t\t\t * @param {Grammar} redef The new tokens to append.\n\t\t\t * @returns {Grammar} The new language created.\n\t\t\t * @public\n\t\t\t * @example\n\t\t\t * Prism.languages['css-with-colors'] = Prism.languages.extend('css', {\n\t\t\t *     // Prism.languages.css already has a 'comment' token, so this token will overwrite CSS' 'comment' token\n\t\t\t *     // at its original position\n\t\t\t *     'comment': { ... },\n\t\t\t *     // CSS doesn't have a 'color' token, so this token will be appended\n\t\t\t *     'color': /\\b(?:red|green|blue)\\b/\n\t\t\t * });\n\t\t\t */\n\t\t\textend: function (id, redef) {\n\t\t\t\tvar lang = _.util.clone(_.languages[id]);\n\n\t\t\t\tfor (var key in redef) {\n\t\t\t\t\tlang[key] = redef[key];\n\t\t\t\t}\n\n\t\t\t\treturn lang;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Inserts tokens _before_ another token in a language definition or any other grammar.\n\t\t\t *\n\t\t\t * ## Usage\n\t\t\t *\n\t\t\t * This helper method makes it easy to modify existing languages. For example, the CSS language definition\n\t\t\t * not only defines CSS highlighting for CSS documents, but also needs to define highlighting for CSS embedded\n\t\t\t * in HTML through `<style>` elements. To do this, it needs to modify `Prism.languages.markup` and add the\n\t\t\t * appropriate tokens. However, `Prism.languages.markup` is a regular JavaScript object literal, so if you do\n\t\t\t * this:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * Prism.languages.markup.style = {\n\t\t\t *     // token\n\t\t\t * };\n\t\t\t * ```\n\t\t\t *\n\t\t\t * then the `style` token will be added (and processed) at the end. `insertBefore` allows you to insert tokens\n\t\t\t * before existing tokens. For the CSS example above, you would use it like this:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * Prism.languages.insertBefore('markup', 'cdata', {\n\t\t\t *     'style': {\n\t\t\t *         // token\n\t\t\t *     }\n\t\t\t * });\n\t\t\t * ```\n\t\t\t *\n\t\t\t * ## Special cases\n\t\t\t *\n\t\t\t * If the grammars of `inside` and `insert` have tokens with the same name, the tokens in `inside`'s grammar\n\t\t\t * will be ignored.\n\t\t\t *\n\t\t\t * This behavior can be used to insert tokens after `before`:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * Prism.languages.insertBefore('markup', 'comment', {\n\t\t\t *     'comment': Prism.languages.markup.comment,\n\t\t\t *     // tokens after 'comment'\n\t\t\t * });\n\t\t\t * ```\n\t\t\t *\n\t\t\t * ## Limitations\n\t\t\t *\n\t\t\t * The main problem `insertBefore` has to solve is iteration order. Since ES2015, the iteration order for object\n\t\t\t * properties is guaranteed to be the insertion order (except for integer keys) but some browsers behave\n\t\t\t * differently when keys are deleted and re-inserted. So `insertBefore` can't be implemented by temporarily\n\t\t\t * deleting properties which is necessary to insert at arbitrary positions.\n\t\t\t *\n\t\t\t * To solve this problem, `insertBefore` doesn't actually insert the given tokens into the target object.\n\t\t\t * Instead, it will create a new object and replace all references to the target object with the new one. This\n\t\t\t * can be done without temporarily deleting properties, so the iteration order is well-defined.\n\t\t\t *\n\t\t\t * However, only references that can be reached from `Prism.languages` or `insert` will be replaced. I.e. if\n\t\t\t * you hold the target object in a variable, then the value of the variable will not change.\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * var oldMarkup = Prism.languages.markup;\n\t\t\t * var newMarkup = Prism.languages.insertBefore('markup', 'comment', { ... });\n\t\t\t *\n\t\t\t * assert(oldMarkup !== Prism.languages.markup);\n\t\t\t * assert(newMarkup === Prism.languages.markup);\n\t\t\t * ```\n\t\t\t *\n\t\t\t * @param {string} inside The property of `root` (e.g. a language id in `Prism.languages`) that contains the\n\t\t\t * object to be modified.\n\t\t\t * @param {string} before The key to insert before.\n\t\t\t * @param {Grammar} insert An object containing the key-value pairs to be inserted.\n\t\t\t * @param {Object<string, any>} [root] The object containing `inside`, i.e. the object that contains the\n\t\t\t * object to be modified.\n\t\t\t *\n\t\t\t * Defaults to `Prism.languages`.\n\t\t\t * @returns {Grammar} The new grammar object.\n\t\t\t * @public\n\t\t\t */\n\t\t\tinsertBefore: function (inside, before, insert, root) {\n\t\t\t\troot = root || /** @type {any} */ (_.languages);\n\t\t\t\tvar grammar = root[inside];\n\t\t\t\t/** @type {Grammar} */\n\t\t\t\tvar ret = {};\n\n\t\t\t\tfor (var token in grammar) {\n\t\t\t\t\tif (grammar.hasOwnProperty(token)) {\n\n\t\t\t\t\t\tif (token == before) {\n\t\t\t\t\t\t\tfor (var newToken in insert) {\n\t\t\t\t\t\t\t\tif (insert.hasOwnProperty(newToken)) {\n\t\t\t\t\t\t\t\t\tret[newToken] = insert[newToken];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Do not insert token which also occur in insert. See #1525\n\t\t\t\t\t\tif (!insert.hasOwnProperty(token)) {\n\t\t\t\t\t\t\tret[token] = grammar[token];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar old = root[inside];\n\t\t\t\troot[inside] = ret;\n\n\t\t\t\t// Update references in other language definitions\n\t\t\t\t_.languages.DFS(_.languages, function (key, value) {\n\t\t\t\t\tif (value === old && key != inside) {\n\t\t\t\t\t\tthis[key] = ret;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\treturn ret;\n\t\t\t},\n\n\t\t\t// Traverse a language definition with Depth First Search\n\t\t\tDFS: function DFS(o, callback, type, visited) {\n\t\t\t\tvisited = visited || {};\n\n\t\t\t\tvar objId = _.util.objId;\n\n\t\t\t\tfor (var i in o) {\n\t\t\t\t\tif (o.hasOwnProperty(i)) {\n\t\t\t\t\t\tcallback.call(o, i, o[i], type || i);\n\n\t\t\t\t\t\tvar property = o[i];\n\t\t\t\t\t\tvar propertyType = _.util.type(property);\n\n\t\t\t\t\t\tif (propertyType === 'Object' && !visited[objId(property)]) {\n\t\t\t\t\t\t\tvisited[objId(property)] = true;\n\t\t\t\t\t\t\tDFS(property, callback, null, visited);\n\t\t\t\t\t\t} else if (propertyType === 'Array' && !visited[objId(property)]) {\n\t\t\t\t\t\t\tvisited[objId(property)] = true;\n\t\t\t\t\t\t\tDFS(property, callback, i, visited);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tplugins: {},\n\n\t\t/**\n\t\t * This is the most high-level function in Prism’s API.\n\t\t * It fetches all the elements that have a `.language-xxxx` class and then calls {@link Prism.highlightElement} on\n\t\t * each one of them.\n\t\t *\n\t\t * This is equivalent to `Prism.highlightAllUnder(document, async, callback)`.\n\t\t *\n\t\t * @param {boolean} [async=false] Same as in {@link Prism.highlightAllUnder}.\n\t\t * @param {HighlightCallback} [callback] Same as in {@link Prism.highlightAllUnder}.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\thighlightAll: function (async, callback) {\n\t\t\t_.highlightAllUnder(document, async, callback);\n\t\t},\n\n\t\t/**\n\t\t * Fetches all the descendants of `container` that have a `.language-xxxx` class and then calls\n\t\t * {@link Prism.highlightElement} on each one of them.\n\t\t *\n\t\t * The following hooks will be run:\n\t\t * 1. `before-highlightall`\n\t\t * 2. `before-all-elements-highlight`\n\t\t * 3. All hooks of {@link Prism.highlightElement} for each element.\n\t\t *\n\t\t * @param {ParentNode} container The root element, whose descendants that have a `.language-xxxx` class will be highlighted.\n\t\t * @param {boolean} [async=false] Whether each element is to be highlighted asynchronously using Web Workers.\n\t\t * @param {HighlightCallback} [callback] An optional callback to be invoked on each element after its highlighting is done.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\thighlightAllUnder: function (container, async, callback) {\n\t\t\tvar env = {\n\t\t\t\tcallback: callback,\n\t\t\t\tcontainer: container,\n\t\t\t\tselector: 'code[class*=\"language-\"], [class*=\"language-\"] code, code[class*=\"lang-\"], [class*=\"lang-\"] code'\n\t\t\t};\n\n\t\t\t_.hooks.run('before-highlightall', env);\n\n\t\t\tenv.elements = Array.prototype.slice.apply(env.container.querySelectorAll(env.selector));\n\n\t\t\t_.hooks.run('before-all-elements-highlight', env);\n\n\t\t\tfor (var i = 0, element; (element = env.elements[i++]);) {\n\t\t\t\t_.highlightElement(element, async === true, env.callback);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Highlights the code inside a single element.\n\t\t *\n\t\t * The following hooks will be run:\n\t\t * 1. `before-sanity-check`\n\t\t * 2. `before-highlight`\n\t\t * 3. All hooks of {@link Prism.highlight}. These hooks will be run by an asynchronous worker if `async` is `true`.\n\t\t * 4. `before-insert`\n\t\t * 5. `after-highlight`\n\t\t * 6. `complete`\n\t\t *\n\t\t * Some the above hooks will be skipped if the element doesn't contain any text or there is no grammar loaded for\n\t\t * the element's language.\n\t\t *\n\t\t * @param {Element} element The element containing the code.\n\t\t * It must have a class of `language-xxxx` to be processed, where `xxxx` is a valid language identifier.\n\t\t * @param {boolean} [async=false] Whether the element is to be highlighted asynchronously using Web Workers\n\t\t * to improve performance and avoid blocking the UI when highlighting very large chunks of code. This option is\n\t\t * [disabled by default](https://prismjs.com/faq.html#why-is-asynchronous-highlighting-disabled-by-default).\n\t\t *\n\t\t * Note: All language definitions required to highlight the code must be included in the main `prism.js` file for\n\t\t * asynchronous highlighting to work. You can build your own bundle on the\n\t\t * [Download page](https://prismjs.com/download.html).\n\t\t * @param {HighlightCallback} [callback] An optional callback to be invoked after the highlighting is done.\n\t\t * Mostly useful when `async` is `true`, since in that case, the highlighting is done asynchronously.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\thighlightElement: function (element, async, callback) {\n\t\t\t// Find language\n\t\t\tvar language = _.util.getLanguage(element);\n\t\t\tvar grammar = _.languages[language];\n\n\t\t\t// Set language on the element, if not present\n\t\t\telement.className = element.className.replace(lang, '').replace(/\\s+/g, ' ') + ' language-' + language;\n\n\t\t\t// Set language on the parent, for styling\n\t\t\tvar parent = element.parentElement;\n\t\t\tif (parent && parent.nodeName.toLowerCase() === 'pre') {\n\t\t\t\tparent.className = parent.className.replace(lang, '').replace(/\\s+/g, ' ') + ' language-' + language;\n\t\t\t}\n\n\t\t\tvar code = element.textContent;\n\n\t\t\tvar env = {\n\t\t\t\telement: element,\n\t\t\t\tlanguage: language,\n\t\t\t\tgrammar: grammar,\n\t\t\t\tcode: code\n\t\t\t};\n\n\t\t\tfunction insertHighlightedCode(highlightedCode) {\n\t\t\t\tenv.highlightedCode = highlightedCode;\n\n\t\t\t\t_.hooks.run('before-insert', env);\n\n\t\t\t\tenv.element.innerHTML = env.highlightedCode;\n\n\t\t\t\t_.hooks.run('after-highlight', env);\n\t\t\t\t_.hooks.run('complete', env);\n\t\t\t\tcallback && callback.call(env.element);\n\t\t\t}\n\n\t\t\t_.hooks.run('before-sanity-check', env);\n\n\t\t\t// plugins may change/add the parent/element\n\t\t\tparent = env.element.parentElement;\n\t\t\tif (parent && parent.nodeName.toLowerCase() === 'pre' && !parent.hasAttribute('tabindex')) {\n\t\t\t\tparent.setAttribute('tabindex', '0');\n\t\t\t}\n\n\t\t\tif (!env.code) {\n\t\t\t\t_.hooks.run('complete', env);\n\t\t\t\tcallback && callback.call(env.element);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t_.hooks.run('before-highlight', env);\n\n\t\t\tif (!env.grammar) {\n\t\t\t\tinsertHighlightedCode(_.util.encode(env.code));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (async && _self.Worker) {\n\t\t\t\tvar worker = new Worker(_.filename);\n\n\t\t\t\tworker.onmessage = function (evt) {\n\t\t\t\t\tinsertHighlightedCode(evt.data);\n\t\t\t\t};\n\n\t\t\t\tworker.postMessage(JSON.stringify({\n\t\t\t\t\tlanguage: env.language,\n\t\t\t\t\tcode: env.code,\n\t\t\t\t\timmediateClose: true\n\t\t\t\t}));\n\t\t\t} else {\n\t\t\t\tinsertHighlightedCode(_.highlight(env.code, env.grammar, env.language));\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Low-level function, only use if you know what you’re doing. It accepts a string of text as input\n\t\t * and the language definitions to use, and returns a string with the HTML produced.\n\t\t *\n\t\t * The following hooks will be run:\n\t\t * 1. `before-tokenize`\n\t\t * 2. `after-tokenize`\n\t\t * 3. `wrap`: On each {@link Token}.\n\t\t *\n\t\t * @param {string} text A string with the code to be highlighted.\n\t\t * @param {Grammar} grammar An object containing the tokens to use.\n\t\t *\n\t\t * Usually a language definition like `Prism.languages.markup`.\n\t\t * @param {string} language The name of the language definition passed to `grammar`.\n\t\t * @returns {string} The highlighted HTML.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t * @example\n\t\t * Prism.highlight('var foo = true;', Prism.languages.javascript, 'javascript');\n\t\t */\n\t\thighlight: function (text, grammar, language) {\n\t\t\tvar env = {\n\t\t\t\tcode: text,\n\t\t\t\tgrammar: grammar,\n\t\t\t\tlanguage: language\n\t\t\t};\n\t\t\t_.hooks.run('before-tokenize', env);\n\t\t\tenv.tokens = _.tokenize(env.code, env.grammar);\n\t\t\t_.hooks.run('after-tokenize', env);\n\t\t\treturn Token.stringify(_.util.encode(env.tokens), env.language);\n\t\t},\n\n\t\t/**\n\t\t * This is the heart of Prism, and the most low-level function you can use. It accepts a string of text as input\n\t\t * and the language definitions to use, and returns an array with the tokenized code.\n\t\t *\n\t\t * When the language definition includes nested tokens, the function is called recursively on each of these tokens.\n\t\t *\n\t\t * This method could be useful in other contexts as well, as a very crude parser.\n\t\t *\n\t\t * @param {string} text A string with the code to be highlighted.\n\t\t * @param {Grammar} grammar An object containing the tokens to use.\n\t\t *\n\t\t * Usually a language definition like `Prism.languages.markup`.\n\t\t * @returns {TokenStream} An array of strings and tokens, a token stream.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t * @example\n\t\t * let code = `var foo = 0;`;\n\t\t * let tokens = Prism.tokenize(code, Prism.languages.javascript);\n\t\t * tokens.forEach(token => {\n\t\t *     if (token instanceof Prism.Token && token.type === 'number') {\n\t\t *         console.log(`Found numeric literal: ${token.content}`);\n\t\t *     }\n\t\t * });\n\t\t */\n\t\ttokenize: function (text, grammar) {\n\t\t\tvar rest = grammar.rest;\n\t\t\tif (rest) {\n\t\t\t\tfor (var token in rest) {\n\t\t\t\t\tgrammar[token] = rest[token];\n\t\t\t\t}\n\n\t\t\t\tdelete grammar.rest;\n\t\t\t}\n\n\t\t\tvar tokenList = new LinkedList();\n\t\t\taddAfter(tokenList, tokenList.head, text);\n\n\t\t\tmatchGrammar(text, tokenList, grammar, tokenList.head, 0);\n\n\t\t\treturn toArray(tokenList);\n\t\t},\n\n\t\t/**\n\t\t * @namespace\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\thooks: {\n\t\t\tall: {},\n\n\t\t\t/**\n\t\t\t * Adds the given callback to the list of callbacks for the given hook.\n\t\t\t *\n\t\t\t * The callback will be invoked when the hook it is registered for is run.\n\t\t\t * Hooks are usually directly run by a highlight function but you can also run hooks yourself.\n\t\t\t *\n\t\t\t * One callback function can be registered to multiple hooks and the same hook multiple times.\n\t\t\t *\n\t\t\t * @param {string} name The name of the hook.\n\t\t\t * @param {HookCallback} callback The callback function which is given environment variables.\n\t\t\t * @public\n\t\t\t */\n\t\t\tadd: function (name, callback) {\n\t\t\t\tvar hooks = _.hooks.all;\n\n\t\t\t\thooks[name] = hooks[name] || [];\n\n\t\t\t\thooks[name].push(callback);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Runs a hook invoking all registered callbacks with the given environment variables.\n\t\t\t *\n\t\t\t * Callbacks will be invoked synchronously and in the order in which they were registered.\n\t\t\t *\n\t\t\t * @param {string} name The name of the hook.\n\t\t\t * @param {Object<string, any>} env The environment variables of the hook passed to all callbacks registered.\n\t\t\t * @public\n\t\t\t */\n\t\t\trun: function (name, env) {\n\t\t\t\tvar callbacks = _.hooks.all[name];\n\n\t\t\t\tif (!callbacks || !callbacks.length) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfor (var i = 0, callback; (callback = callbacks[i++]);) {\n\t\t\t\t\tcallback(env);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tToken: Token\n\t};\n\t_self.Prism = _;\n\n\n\t// Typescript note:\n\t// The following can be used to import the Token type in JSDoc:\n\t//\n\t//   @typedef {InstanceType<import(\"./prism-core\")[\"Token\"]>} Token\n\n\t/**\n\t * Creates a new token.\n\t *\n\t * @param {string} type See {@link Token#type type}\n\t * @param {string | TokenStream} content See {@link Token#content content}\n\t * @param {string|string[]} [alias] The alias(es) of the token.\n\t * @param {string} [matchedStr=\"\"] A copy of the full string this token was created from.\n\t * @class\n\t * @global\n\t * @public\n\t */\n\tfunction Token(type, content, alias, matchedStr) {\n\t\t/**\n\t\t * The type of the token.\n\t\t *\n\t\t * This is usually the key of a pattern in a {@link Grammar}.\n\t\t *\n\t\t * @type {string}\n\t\t * @see GrammarToken\n\t\t * @public\n\t\t */\n\t\tthis.type = type;\n\t\t/**\n\t\t * The strings or tokens contained by this token.\n\t\t *\n\t\t * This will be a token stream if the pattern matched also defined an `inside` grammar.\n\t\t *\n\t\t * @type {string | TokenStream}\n\t\t * @public\n\t\t */\n\t\tthis.content = content;\n\t\t/**\n\t\t * The alias(es) of the token.\n\t\t *\n\t\t * @type {string|string[]}\n\t\t * @see GrammarToken\n\t\t * @public\n\t\t */\n\t\tthis.alias = alias;\n\t\t// Copy of the full string this token was created from\n\t\tthis.length = (matchedStr || '').length | 0;\n\t}\n\n\t/**\n\t * A token stream is an array of strings and {@link Token Token} objects.\n\t *\n\t * Token streams have to fulfill a few properties that are assumed by most functions (mostly internal ones) that process\n\t * them.\n\t *\n\t * 1. No adjacent strings.\n\t * 2. No empty strings.\n\t *\n\t *    The only exception here is the token stream that only contains the empty string and nothing else.\n\t *\n\t * @typedef {Array<string | Token>} TokenStream\n\t * @global\n\t * @public\n\t */\n\n\t/**\n\t * Converts the given token or token stream to an HTML representation.\n\t *\n\t * The following hooks will be run:\n\t * 1. `wrap`: On each {@link Token}.\n\t *\n\t * @param {string | Token | TokenStream} o The token or token stream to be converted.\n\t * @param {string} language The name of current language.\n\t * @returns {string} The HTML representation of the token or token stream.\n\t * @memberof Token\n\t * @static\n\t */\n\tToken.stringify = function stringify(o, language) {\n\t\tif (typeof o == 'string') {\n\t\t\treturn o;\n\t\t}\n\t\tif (Array.isArray(o)) {\n\t\t\tvar s = '';\n\t\t\to.forEach(function (e) {\n\t\t\t\ts += stringify(e, language);\n\t\t\t});\n\t\t\treturn s;\n\t\t}\n\n\t\tvar env = {\n\t\t\ttype: o.type,\n\t\t\tcontent: stringify(o.content, language),\n\t\t\ttag: 'span',\n\t\t\tclasses: ['token', o.type],\n\t\t\tattributes: {},\n\t\t\tlanguage: language\n\t\t};\n\n\t\tvar aliases = o.alias;\n\t\tif (aliases) {\n\t\t\tif (Array.isArray(aliases)) {\n\t\t\t\tArray.prototype.push.apply(env.classes, aliases);\n\t\t\t} else {\n\t\t\t\tenv.classes.push(aliases);\n\t\t\t}\n\t\t}\n\n\t\t_.hooks.run('wrap', env);\n\n\t\tvar attributes = '';\n\t\tfor (var name in env.attributes) {\n\t\t\tattributes += ' ' + name + '=\"' + (env.attributes[name] || '').replace(/\"/g, '&quot;') + '\"';\n\t\t}\n\n\t\treturn '<' + env.tag + ' class=\"' + env.classes.join(' ') + '\"' + attributes + '>' + env.content + '</' + env.tag + '>';\n\t};\n\n\t/**\n\t * @param {RegExp} pattern\n\t * @param {number} pos\n\t * @param {string} text\n\t * @param {boolean} lookbehind\n\t * @returns {RegExpExecArray | null}\n\t */\n\tfunction matchPattern(pattern, pos, text, lookbehind) {\n\t\tpattern.lastIndex = pos;\n\t\tvar match = pattern.exec(text);\n\t\tif (match && lookbehind && match[1]) {\n\t\t\t// change the match to remove the text matched by the Prism lookbehind group\n\t\t\tvar lookbehindLength = match[1].length;\n\t\t\tmatch.index += lookbehindLength;\n\t\t\tmatch[0] = match[0].slice(lookbehindLength);\n\t\t}\n\t\treturn match;\n\t}\n\n\t/**\n\t * @param {string} text\n\t * @param {LinkedList<string | Token>} tokenList\n\t * @param {any} grammar\n\t * @param {LinkedListNode<string | Token>} startNode\n\t * @param {number} startPos\n\t * @param {RematchOptions} [rematch]\n\t * @returns {void}\n\t * @private\n\t *\n\t * @typedef RematchOptions\n\t * @property {string} cause\n\t * @property {number} reach\n\t */\n\tfunction matchGrammar(text, tokenList, grammar, startNode, startPos, rematch) {\n\t\tfor (var token in grammar) {\n\t\t\tif (!grammar.hasOwnProperty(token) || !grammar[token]) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tvar patterns = grammar[token];\n\t\t\tpatterns = Array.isArray(patterns) ? patterns : [patterns];\n\n\t\t\tfor (var j = 0; j < patterns.length; ++j) {\n\t\t\t\tif (rematch && rematch.cause == token + ',' + j) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar patternObj = patterns[j];\n\t\t\t\tvar inside = patternObj.inside;\n\t\t\t\tvar lookbehind = !!patternObj.lookbehind;\n\t\t\t\tvar greedy = !!patternObj.greedy;\n\t\t\t\tvar alias = patternObj.alias;\n\n\t\t\t\tif (greedy && !patternObj.pattern.global) {\n\t\t\t\t\t// Without the global flag, lastIndex won't work\n\t\t\t\t\tvar flags = patternObj.pattern.toString().match(/[imsuy]*$/)[0];\n\t\t\t\t\tpatternObj.pattern = RegExp(patternObj.pattern.source, flags + 'g');\n\t\t\t\t}\n\n\t\t\t\t/** @type {RegExp} */\n\t\t\t\tvar pattern = patternObj.pattern || patternObj;\n\n\t\t\t\tfor ( // iterate the token list and keep track of the current token/string position\n\t\t\t\t\tvar currentNode = startNode.next, pos = startPos;\n\t\t\t\t\tcurrentNode !== tokenList.tail;\n\t\t\t\t\tpos += currentNode.value.length, currentNode = currentNode.next\n\t\t\t\t) {\n\n\t\t\t\t\tif (rematch && pos >= rematch.reach) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar str = currentNode.value;\n\n\t\t\t\t\tif (tokenList.length > text.length) {\n\t\t\t\t\t\t// Something went terribly wrong, ABORT, ABORT!\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (str instanceof Token) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar removeCount = 1; // this is the to parameter of removeBetween\n\t\t\t\t\tvar match;\n\n\t\t\t\t\tif (greedy) {\n\t\t\t\t\t\tmatch = matchPattern(pattern, pos, text, lookbehind);\n\t\t\t\t\t\tif (!match) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar from = match.index;\n\t\t\t\t\t\tvar to = match.index + match[0].length;\n\t\t\t\t\t\tvar p = pos;\n\n\t\t\t\t\t\t// find the node that contains the match\n\t\t\t\t\t\tp += currentNode.value.length;\n\t\t\t\t\t\twhile (from >= p) {\n\t\t\t\t\t\t\tcurrentNode = currentNode.next;\n\t\t\t\t\t\t\tp += currentNode.value.length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// adjust pos (and p)\n\t\t\t\t\t\tp -= currentNode.value.length;\n\t\t\t\t\t\tpos = p;\n\n\t\t\t\t\t\t// the current node is a Token, then the match starts inside another Token, which is invalid\n\t\t\t\t\t\tif (currentNode.value instanceof Token) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// find the last node which is affected by this match\n\t\t\t\t\t\tfor (\n\t\t\t\t\t\t\tvar k = currentNode;\n\t\t\t\t\t\t\tk !== tokenList.tail && (p < to || typeof k.value === 'string');\n\t\t\t\t\t\t\tk = k.next\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tremoveCount++;\n\t\t\t\t\t\t\tp += k.value.length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tremoveCount--;\n\n\t\t\t\t\t\t// replace with the new match\n\t\t\t\t\t\tstr = text.slice(pos, p);\n\t\t\t\t\t\tmatch.index -= pos;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmatch = matchPattern(pattern, 0, str, lookbehind);\n\t\t\t\t\t\tif (!match) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// eslint-disable-next-line no-redeclare\n\t\t\t\t\tvar from = match.index;\n\t\t\t\t\tvar matchStr = match[0];\n\t\t\t\t\tvar before = str.slice(0, from);\n\t\t\t\t\tvar after = str.slice(from + matchStr.length);\n\n\t\t\t\t\tvar reach = pos + str.length;\n\t\t\t\t\tif (rematch && reach > rematch.reach) {\n\t\t\t\t\t\trematch.reach = reach;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar removeFrom = currentNode.prev;\n\n\t\t\t\t\tif (before) {\n\t\t\t\t\t\tremoveFrom = addAfter(tokenList, removeFrom, before);\n\t\t\t\t\t\tpos += before.length;\n\t\t\t\t\t}\n\n\t\t\t\t\tremoveRange(tokenList, removeFrom, removeCount);\n\n\t\t\t\t\tvar wrapped = new Token(token, inside ? _.tokenize(matchStr, inside) : matchStr, alias, matchStr);\n\t\t\t\t\tcurrentNode = addAfter(tokenList, removeFrom, wrapped);\n\n\t\t\t\t\tif (after) {\n\t\t\t\t\t\taddAfter(tokenList, currentNode, after);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (removeCount > 1) {\n\t\t\t\t\t\t// at least one Token object was removed, so we have to do some rematching\n\t\t\t\t\t\t// this can only happen if the current pattern is greedy\n\n\t\t\t\t\t\t/** @type {RematchOptions} */\n\t\t\t\t\t\tvar nestedRematch = {\n\t\t\t\t\t\t\tcause: token + ',' + j,\n\t\t\t\t\t\t\treach: reach\n\t\t\t\t\t\t};\n\t\t\t\t\t\tmatchGrammar(text, tokenList, grammar, currentNode.prev, pos, nestedRematch);\n\n\t\t\t\t\t\t// the reach might have been extended because of the rematching\n\t\t\t\t\t\tif (rematch && nestedRematch.reach > rematch.reach) {\n\t\t\t\t\t\t\trematch.reach = nestedRematch.reach;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @typedef LinkedListNode\n\t * @property {T} value\n\t * @property {LinkedListNode<T> | null} prev The previous node.\n\t * @property {LinkedListNode<T> | null} next The next node.\n\t * @template T\n\t * @private\n\t */\n\n\t/**\n\t * @template T\n\t * @private\n\t */\n\tfunction LinkedList() {\n\t\t/** @type {LinkedListNode<T>} */\n\t\tvar head = { value: null, prev: null, next: null };\n\t\t/** @type {LinkedListNode<T>} */\n\t\tvar tail = { value: null, prev: head, next: null };\n\t\thead.next = tail;\n\n\t\t/** @type {LinkedListNode<T>} */\n\t\tthis.head = head;\n\t\t/** @type {LinkedListNode<T>} */\n\t\tthis.tail = tail;\n\t\tthis.length = 0;\n\t}\n\n\t/**\n\t * Adds a new node with the given value to the list.\n\t *\n\t * @param {LinkedList<T>} list\n\t * @param {LinkedListNode<T>} node\n\t * @param {T} value\n\t * @returns {LinkedListNode<T>} The added node.\n\t * @template T\n\t */\n\tfunction addAfter(list, node, value) {\n\t\t// assumes that node != list.tail && values.length >= 0\n\t\tvar next = node.next;\n\n\t\tvar newNode = { value: value, prev: node, next: next };\n\t\tnode.next = newNode;\n\t\tnext.prev = newNode;\n\t\tlist.length++;\n\n\t\treturn newNode;\n\t}\n\t/**\n\t * Removes `count` nodes after the given node. The given node will not be removed.\n\t *\n\t * @param {LinkedList<T>} list\n\t * @param {LinkedListNode<T>} node\n\t * @param {number} count\n\t * @template T\n\t */\n\tfunction removeRange(list, node, count) {\n\t\tvar next = node.next;\n\t\tfor (var i = 0; i < count && next !== list.tail; i++) {\n\t\t\tnext = next.next;\n\t\t}\n\t\tnode.next = next;\n\t\tnext.prev = node;\n\t\tlist.length -= i;\n\t}\n\t/**\n\t * @param {LinkedList<T>} list\n\t * @returns {T[]}\n\t * @template T\n\t */\n\tfunction toArray(list) {\n\t\tvar array = [];\n\t\tvar node = list.head.next;\n\t\twhile (node !== list.tail) {\n\t\t\tarray.push(node.value);\n\t\t\tnode = node.next;\n\t\t}\n\t\treturn array;\n\t}\n\n\n\tif (!_self.document) {\n\t\tif (!_self.addEventListener) {\n\t\t\t// in Node.js\n\t\t\treturn _;\n\t\t}\n\n\t\tif (!_.disableWorkerMessageHandler) {\n\t\t\t// In worker\n\t\t\t_self.addEventListener('message', function (evt) {\n\t\t\t\tvar message = JSON.parse(evt.data);\n\t\t\t\tvar lang = message.language;\n\t\t\t\tvar code = message.code;\n\t\t\t\tvar immediateClose = message.immediateClose;\n\n\t\t\t\t_self.postMessage(_.highlight(code, _.languages[lang], lang));\n\t\t\t\tif (immediateClose) {\n\t\t\t\t\t_self.close();\n\t\t\t\t}\n\t\t\t}, false);\n\t\t}\n\n\t\treturn _;\n\t}\n\n\t// Get current script and highlight\n\tvar script = _.util.currentScript();\n\n\tif (script) {\n\t\t_.filename = script.src;\n\n\t\tif (script.hasAttribute('data-manual')) {\n\t\t\t_.manual = true;\n\t\t}\n\t}\n\n\tfunction highlightAutomaticallyCallback() {\n\t\tif (!_.manual) {\n\t\t\t_.highlightAll();\n\t\t}\n\t}\n\n\tif (!_.manual) {\n\t\t// If the document state is \"loading\", then we'll use DOMContentLoaded.\n\t\t// If the document state is \"interactive\" and the prism.js script is deferred, then we'll also use the\n\t\t// DOMContentLoaded event because there might be some plugins or languages which have also been deferred and they\n\t\t// might take longer one animation frame to execute which can create a race condition where only some plugins have\n\t\t// been loaded when Prism.highlightAll() is executed, depending on how fast resources are loaded.\n\t\t// See https://github.com/PrismJS/prism/issues/2102\n\t\tvar readyState = document.readyState;\n\t\tif (readyState === 'loading' || readyState === 'interactive' && script && script.defer) {\n\t\t\tdocument.addEventListener('DOMContentLoaded', highlightAutomaticallyCallback);\n\t\t} else {\n\t\t\tif (window.requestAnimationFrame) {\n\t\t\t\twindow.requestAnimationFrame(highlightAutomaticallyCallback);\n\t\t\t} else {\n\t\t\t\twindow.setTimeout(highlightAutomaticallyCallback, 16);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn _;\n\n}(_self));\n\nif (typeof module !== 'undefined' && module.exports) {\n\tmodule.exports = Prism;\n}\n\n// hack for components to work correctly in node.js\nif (typeof global !== 'undefined') {\n\tglobal.Prism = Prism;\n}\n\n// some additional documentation/types\n\n/**\n * The expansion of a simple `RegExp` literal to support additional properties.\n *\n * @typedef GrammarToken\n * @property {RegExp} pattern The regular expression of the token.\n * @property {boolean} [lookbehind=false] If `true`, then the first capturing group of `pattern` will (effectively)\n * behave as a lookbehind group meaning that the captured text will not be part of the matched text of the new token.\n * @property {boolean} [greedy=false] Whether the token is greedy.\n * @property {string|string[]} [alias] An optional alias or list of aliases.\n * @property {Grammar} [inside] The nested grammar of this token.\n *\n * The `inside` grammar will be used to tokenize the text value of each token of this kind.\n *\n * This can be used to make nested and even recursive language definitions.\n *\n * Note: This can cause infinite recursion. Be careful when you embed different languages or even the same language into\n * each another.\n * @global\n * @public\n */\n\n/**\n * @typedef Grammar\n * @type {Object<string, RegExp | GrammarToken | Array<RegExp | GrammarToken>>}\n * @property {Grammar} [rest] An optional grammar object that will be appended to this grammar.\n * @global\n * @public\n */\n\n/**\n * A function which will invoked after an element was successfully highlighted.\n *\n * @callback HighlightCallback\n * @param {Element} element The element successfully highlighted.\n * @returns {void}\n * @global\n * @public\n */\n\n/**\n * @callback HookCallback\n * @param {Object<string, any>} env The environment variables of the hook.\n * @returns {void}\n * @global\n * @public\n */\n"],"sourceRoot":""}