{"version":3,"sources":["pages/application/system-log.js"],"names":["TextArea","Input","withRouter","connect","application","dispatch","detail","logs","useState","fetching","setFetching","id","useParams","status","useEffect","type","payload","interval","setInterval","console","log","INTERVAL","clearInterval","className","title","readOnly","value","rows"],"mappings":"sMAUQA,G,cAAaC,EAAbD,UA4COE,sBAAWC,aA3CF,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,SAAhB,MAAgC,CAAEC,OAAQF,EAAYE,OAAQC,KAAMH,EAAYG,KAAMF,cA2CpFF,EAzCN,SAAC,GAAgC,IAA9BG,EAA6B,EAA7BA,OAAQC,EAAqB,EAArBA,KAAMF,EAAe,EAAfA,SACnC,EAAgCG,oBAAS,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACQC,EAAOC,cAAPD,GACAE,EAAWP,EAAXO,OA4BR,OA3BAC,qBAAU,WACHL,IACHJ,EAAS,CACPU,KAAM,qBACNC,QAAS,CAAEL,QAEbD,GAAY,MAEb,CAACC,IACJG,qBAAU,WACR,IAAIG,EACJ,GAAe,YAAXJ,EASF,OARAI,EAAWC,aAAY,WACrBC,QAAQC,IAAI,cACZf,EAAS,CACPU,KAAM,qBACNC,QAAS,CAAEL,UAEZU,IAAW,GAEP,WACLC,cAAcL,IAEPA,GACTK,cAAcL,MAIhB,oCACE,yBAAKM,UAAU,mBACb,kBAAC,IAAD,CAAQC,MAAM,4BACd,kBAACxB,EAAD,CAAUyB,UAAQ,EAACC,MAAOnB,EAAMoB,KAAM","file":"static/js/21.3868e8b6.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { Helmet } from 'react-helmet'\nimport { connect } from 'react-redux'\nimport { withRouter, useParams } from 'react-router-dom'\nimport 'prismjs/components/prism-clike'\nimport 'prismjs/components/prism-go'\nimport { INTERVAL } from 'constant'\nimport 'css/editor.css'\nimport { Input } from 'antd'\n\nconst { TextArea } = Input\nconst mapStateToProps = ({ application, dispatch }) => ({ detail: application.detail, logs: application.logs, dispatch })\n\nconst DefaultPage = ({ detail, logs, dispatch }) => {\n  const [fetching, setFetching] = useState(false)\n  const { id } = useParams()\n  const { status } = detail\n  useEffect(() => {\n    if (!fetching) {\n      dispatch({\n        type: 'application/SYSLOG',\n        payload: { id }\n      })\n      setFetching(true)\n    }\n  }, [id])\n  useEffect(() => {\n    let interval\n    if (status === 'running') {\n      interval = setInterval(() => {\n        console.log('polling...')\n        dispatch({\n          type: 'application/SYSLOG',\n          payload: { id }\n        })\n      }, INTERVAL / 2)\n      // destroy interval on unmount\n      return () => {\n        clearInterval(interval)\n      }\n    } else if (interval) {\n      clearInterval(interval)\n    }\n  })\n  return (\n    <>\n      <div className='application-log'>\n        <Helmet title='Application| System Log' />\n        <TextArea readOnly value={logs} rows={50} />\n      </div>\n    </>\n  )\n}\n\nexport default withRouter(connect(mapStateToProps)(DefaultPage))\n"],"sourceRoot":""}