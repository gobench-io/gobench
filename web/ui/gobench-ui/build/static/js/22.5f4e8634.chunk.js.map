{"version":3,"sources":["pages/application/tags.js"],"names":["withRouter","connect","application","dispatch","detail","tags","id","useParams","useState","editable","setEditable","newTag","setNewTag","useEffect","type","payload","removeTag","tagId","addTag","saved","indexOf","name","map","index","isLongTag","length","tagElem","className","key","closable","onClose","color","colorFull","slice","title","autoFocus","size","value","onChange","e","target","onBlur","onPressEnter","onClick"],"mappings":"kNA0FeA,sBAAWC,aAnFF,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,SAEtC,MAAO,CAAEC,OADgBF,EAAjBE,OACSC,KADQH,EAATG,KACOF,cAiFCF,EA/EN,SAAC,GAAwB,IAAtBI,EAAqB,EAArBA,KAAMF,EAAe,EAAfA,SACnBG,EAAOC,cAAPD,GAER,EAAgCE,oBAAS,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KAEAC,qBAAU,WACRV,EAAS,CACPW,KAAM,mBACNC,QAAS,CAAET,UAEZ,CAACA,IAEJ,IAAMU,EAAY,SAAAC,GAChBd,EAAS,CACPW,KAAM,yBACNC,QAAS,CAAET,KAAIW,YAGbC,EAAS,SAACC,GACVR,IAAoC,IAA1BN,EAAKe,QAAQT,GACrBQ,GACFhB,EAAS,CACPW,KAAM,sBACNC,QAAS,CAAET,KAAIe,KAAMV,KAIzBD,GAAY,GAGdE,EAAU,KAEZ,OACE,oCACGP,GAAQA,EAAKiB,KAAI,WAAeC,GAAW,IAAvBjB,EAAsB,EAAtBA,GAAIe,EAAkB,EAAlBA,KACjBG,EAAYH,EAAKI,OAAS,GAE1BC,EACJ,kBAAC,IAAD,CACEC,UAAU,WACVC,IAAKtB,EACLuB,UAAQ,EACRC,QAAS,WAAQd,EAAUV,IAC3ByB,MAAOC,YAAUT,IAEjB,8BACGC,EAAS,UAAMH,EAAKY,MAAM,EAAG,IAApB,OAA+BZ,IAI/C,OAAOG,EACL,kBAAC,IAAD,CAASU,MAAOb,EAAMO,IAAKtB,GACxBoB,GAGHA,KAGHjB,GACC,kBAAC,IAAD,CACE0B,WAAS,EACTrB,KAAK,OACLsB,KAAK,QACLT,UAAU,YACVU,MAAO1B,EACP2B,SAAU,SAACC,GAAD,OAAO3B,EAAU2B,EAAEC,OAAOH,QACpCI,OAAQ,kBAAMvB,KACdwB,aAAc,kBAAMxB,GAAO,OAG7BT,GACA,kBAAC,IAAD,CAAKkB,UAAU,gBAAgBgB,QAAS,kBAAMjC,GAAY,KACxD,kBAAC,IAAD,MADF","file":"static/js/22.5f4e8634.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Tag, Input, Tooltip } from 'antd'\nimport { connect } from 'react-redux'\nimport { PlusOutlined } from '@ant-design/icons'\nimport { colorFull } from 'utils/status'\nimport { withRouter, useParams } from 'react-router-dom'\n\nconst mapStateToProps = ({ application, dispatch }) => {\n  const { detail, tags } = application\n  return { detail, tags, dispatch }\n}\nconst DefaultPage = ({ tags, dispatch }) => {\n  const { id } = useParams()\n\n  const [editable, setEditable] = useState(false)\n  const [newTag, setNewTag] = useState('')\n\n  useEffect(() => {\n    dispatch({\n      type: 'application/TAGS',\n      payload: { id }\n    })\n  }, [id])\n\n  const removeTag = tagId => {\n    dispatch({\n      type: 'application/TAG_REMOVE',\n      payload: { id, tagId }\n    })\n  }\n  const addTag = (saved) => {\n    if (newTag && tags.indexOf(newTag) === -1) {\n      if (saved) {\n        dispatch({\n          type: 'application/TAG_ADD',\n          payload: { id, name: newTag }\n        })\n      }\n    } else {\n      setEditable(false)\n    }\n\n    setNewTag('')\n  }\n  return (\n    <>\n      {tags && tags.map(({ id, name }, index) => {\n        const isLongTag = name.length > 20\n\n        const tagElem = (\n          <Tag\n            className='edit-tag'\n            key={id}\n            closable\n            onClose={() => { removeTag(id) }}\n            color={colorFull(index)}\n          >\n            <span>\n              {isLongTag ? `${name.slice(0, 20)}...` : name}\n            </span>\n          </Tag>\n        )\n        return isLongTag ? (\n          <Tooltip title={name} key={id}>\n            {tagElem}\n          </Tooltip>\n        ) : (\n          tagElem\n        )\n      })}\n      {editable && (\n        <Input\n          autoFocus\n          type='text'\n          size='small'\n          className='tag-input'\n          value={newTag}\n          onChange={(e) => setNewTag(e.target.value)}\n          onBlur={() => addTag()}\n          onPressEnter={() => addTag(true)}\n        />\n      )}\n      {!editable && (\n        <Tag className='site-tag-plus' onClick={() => setEditable(true)}>\n          <PlusOutlined /> New Tag\n        </Tag>\n      )}\n    </>\n  )\n}\nexport default withRouter(connect(mapStateToProps)(DefaultPage))\n"],"sourceRoot":""}