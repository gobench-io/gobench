{"version":3,"sources":["pages/application/chart/metric.js"],"names":["ApexChart","lazy","withRouter","connect","application","dispatch","detail","graphMetrics","metricDatas","series","graph","unit","timeRange","appStatus","get","timestamp","isRealtime","find","x","graphId","id","metrics","metricData","metricType","useEffect","length","type","payload","useInterval","console","log","data","INTERVAL","METRIC_TYPE","HISTOGRAM","makeHistogramSeriesData","isArray","map","d","name","title","chartData","makeChartDataByTimeRange","fallback","callback","delay","savedCallback","useRef","current","setInterval","clearInterval"],"mappings":"yOAOMA,EAAYC,gBAAK,kBAAM,yDA+DdC,sBAAWC,aA7DF,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,SAEtC,MAAO,CACLC,OAF4CF,EAAtCE,OAGNC,aAH4CH,EAA9BG,aAIdC,YAJ4CJ,EAAhBI,YAK5BH,cAuDsBF,EAjDN,SAAC,GAA6E,IAC5FM,EADiBH,EAA0E,EAA1EA,OAAQI,EAAkE,EAAlEA,MAAOH,EAA2D,EAA3DA,aAAcC,EAA6C,EAA7CA,YAAaG,EAAgC,EAAhCA,KAAMC,EAA0B,EAA1BA,UAAWP,EAAe,EAAfA,SAE1EQ,EAAYC,cAAIR,EAAQ,SAAU,IAClCS,EAAYD,cAAIR,EAAQ,YAAa,IACrCU,EAA2B,YAAdH,EACnB,EAA6BN,EAAaU,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UAAYT,EAAMU,OAAO,CAAEC,QAAS,IAAlFF,EAAR,EAAQA,QAASE,EAAjB,EAAiBA,QACXC,EAAad,EAAYS,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UAAYT,EAAMU,OAAO,CAAEC,QAAS,IACzEE,EAAaT,cAAIO,EAAS,WAAY,IAC5CG,qBAAU,WACJH,EAAQI,OAAS,GACe,IAA9BH,EAAWD,QAAQI,QACrBpB,EAAS,CACPqB,KAAM,gCACNC,QAAS,CAAEP,GAAID,EAASE,UAAST,YAAWG,YAAWC,kBAI5D,CAACG,IACJS,GAAY,WACVC,QAAQC,IAAI,cACZzB,EAAS,CACPqB,KAAM,kCACNC,QAAS,CAAEP,GAAIV,EAAMU,GAAIC,UAASU,KAAMT,EAAWD,aAEpDL,EAAagB,IAAW,MAEvBT,IAAeU,IAAYC,UAC7BzB,EAAM,YAAO0B,YAAwBrB,cAAIQ,EAAWD,QAAS,qBAAsB,MAE/Ee,kBAAQd,EAAWD,WACrBZ,EAASa,EAAWD,QAAQgB,KAAI,SAAAC,GAAC,OAAIxB,cAAIwB,EAAG,YAAa,CACvDC,KAAMD,EAAEE,MACRT,KAAM,SAIZ,IAAMU,EAAYzB,EAAa0B,YAAyBjC,EAAQG,GAAaH,EAC7E,OACE,oCACE,kBAAC,WAAD,CAAUkC,SAzCM,gDA0Cd,kBAAC3C,EAAD,CACES,OAAQgC,EACR9B,KAAMA,UAST,IAAMiB,EAAc,SAACgB,EAAUC,GACpC,IAAMC,EAAgBC,mBACtBvB,qBAAU,WACRsB,EAAcE,QAAUJ,IACvB,CAACA,IAEJpB,qBAAU,WAKR,GAAc,OAAVqB,EAAgB,CAClB,IAAMzB,EAAK6B,aALb,WACEH,EAAcE,YAIeH,GAC7B,OAAO,kBAAMK,cAAc9B,OAE5B,CAACyB","file":"static/js/20.7468890d.chunk.js","sourcesContent":["import React, { lazy, useEffect, Suspense, useRef } from 'react'\nimport { connect } from 'react-redux'\nimport { withRouter } from 'react-router-dom'\nimport { get, isArray } from 'lodash'\nimport { INTERVAL, METRIC_TYPE } from 'constant'\nimport { makeHistogramSeriesData, makeChartDataByTimeRange } from 'utils/chart'\n\nconst ApexChart = lazy(() => import('./apex-chart'))\n\nconst mapStateToProps = ({ application, dispatch }) => {\n  const { detail, graphMetrics, metricDatas } = application\n  return {\n    detail,\n    graphMetrics,\n    metricDatas,\n    dispatch\n  }\n}\n\nconst loading = () => <p>Loading graph...</p>\n\nconst DefaultPage = ({ detail, graph, graphMetrics, metricDatas, unit, timeRange, dispatch }) => {\n  let series\n  const appStatus = get(detail, 'status', '')\n  const timestamp = get(detail, 'timestamp', '')\n  const isRealtime = appStatus === 'running'\n  const { graphId, metrics } = graphMetrics.find(x => x.graphId === graph.id) || { metrics: [] }\n  const metricData = metricDatas.find(x => x.graphId === graph.id) || { metrics: [] }\n  const metricType = get(metrics, '[0].type', '')\n  useEffect(() => {\n    if (metrics.length > 0) {\n      if (metricData.metrics.length === 0) {\n        dispatch({\n          type: 'application/GRAPH_METRIC_DATA',\n          payload: { id: graphId, metrics, timeRange, timestamp, isRealtime }\n        })\n      }\n    }\n  }, [graphId])\n  useInterval(() => {\n    console.log('polling...')\n    dispatch({\n      type: 'application/METRIC_DATA_POLLING',\n      payload: { id: graph.id, metrics, data: metricData.metrics }\n    })\n  }, isRealtime ? INTERVAL : null)\n\n  if (metricType === METRIC_TYPE.HISTOGRAM) {\n    series = [...makeHistogramSeriesData(get(metricData.metrics, '[0].chartData.data', []))]\n  } else {\n    if (isArray(metricData.metrics)) {\n      series = metricData.metrics.map(d => get(d, 'chartData', {\n        name: d.title,\n        data: []\n      }))\n    }\n  }\n  const chartData = isRealtime ? makeChartDataByTimeRange(series, timeRange) : series\n  return (\n    <>\n      <Suspense fallback={loading()}>\n        <ApexChart\n          series={chartData}\n          unit={unit}\n        />\n      </Suspense>\n    </>\n  )\n}\n\nexport default withRouter(connect(mapStateToProps)(DefaultPage))\n\nexport const useInterval = (callback, delay) => {\n  const savedCallback = useRef()\n  useEffect(() => {\n    savedCallback.current = callback\n  }, [callback])\n\n  useEffect(() => {\n    function tick () {\n      savedCallback.current()\n    }\n\n    if (delay !== null) {\n      const id = setInterval(tick, delay)\n      return () => clearInterval(id)\n    }\n  }, [delay])\n}\n"],"sourceRoot":""}